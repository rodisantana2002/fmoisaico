@article{Kitchenham_2009,
abstract = {Background: In 2004 the concept of evidence-based software engineering (EBSE) was introduced at the ICSE04 conference. Aims: This study assesses the impact of systematic literature reviews (SLRs) which are the recommended EBSE method for aggregating evidence. Method: We used the standard systematic literature review method employing a manual search of 10 journals and 4 conference proceedings. Results: Of 20 relevant studies, eight addressed research trends rather than technique evaluation. Seven SLRs addressed cost estimation. The quality of SLRs was fair with only three scoring less than 2 out of 4. Conclusions: Currently, the topic areas covered by SLRs are limited. European researchers, particularly those at the Simula Laboratory appear to be the leading exponents of systematic literature reviews. The series of cost estimation SLRs demonstrate the potential value of EBSE for synthesising evidence and making it available to practitioners. {\textcopyright} 2008 Elsevier B.V. All rights reserved.},
author = {Kitchenham, Barbara and {Pearl Brereton}, O. and Budgen, David and Turner, Mark and Bailey, John and Linkman, Stephen},
doi = {10.1016/j.infsof.2008.09.009},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Cost estimation,Evidence-based software engineering,Systematic literature review,Systematic review quality,Tertiary study},
month = {jan},
number = {1},
pages = {7--15},
publisher = {Elsevier {\{}BV{\}}},
title = {{Systematic literature reviews in software engineering - A systematic literature review}},
url = {https://doi.org/10.1016{\%}2Fj.infsof.2008.09.009},
volume = {51},
year = {2009}
}
@inproceedings{2011,
abstract = {Presents the table of contents of the proceedings of the 2011 Agile Conference.},
booktitle = {2011 Agile Conference},
doi = {10.1109/agile.2011.6},
pages = {v--viii},
publisher = {IEEE},
title = {{2011 Agile Conference: AGILE 2011 - Table of Contents}},
url = {https://doi.org/10.1109{\%}2Fagile.2011.6},
year = {2011}
}
@article{C_Nienaber_2005,
abstract = {Software technology and computing resources have evolved and developed considerably over the past years and may be considered as the backbone of many business ventures today. However, the software project management environment has also changed and is continuously evolving. Currently software projects are developed and deployed in distributed, pervasive and collaborative environments. This means that traditional software project management methods cannot, and do not, address the added complexities found in a pervasive, distributed global environment. Projects thus have a high rate of failure. More specifically, software projects often do not comply with the traditional standard measurements of success, namely time, cost and specifications. There is thus a need for new methods and measures to support software project management. In this paper, software agent technology is explored as a potential tool for enhancing software project management practices in general. We propose and discuss)},
author = {{C Nienaber}, Rita and Barnard, Andries},
doi = {10.28945/858},
issn = {1547-5840},
journal = {Issues in Informing Science and Information Technology},
pages = {659--669},
publisher = {Informing Science Institute},
title = {{Software Quality Management supported by Software Agent}},
url = {https://doi.org/10.28945{\%}2F858},
volume = {2},
year = {2005}
}
@incollection{Yara_2009,
abstract = {Offshore and outsourced distributed software development models and processes are facing challenges, previously unknown, with respect to computing capacity, bandwidth, storage, security, complexity, reliability, and business uncertainty. Clouds promise to address these challenges by adopting recent advances in virtualization, parallel and distributed systems, utility computing, and software services. In this paper, we envision a cloud-based platform that addresses some of these core problems. We outline a generic cloud architecture, its design and our first implementation results for three cloud forms - a compute cloud, a storage cloud and a cloud-based software service- in the context of global distributed software development (GSD). Our "compute cloud" provides computational services such as continuous code integration and a compile server farm, "storage cloud" offers storage (block or file-based) services with an on-line virtual storage service, whereas the on-line virtual labs represent a useful cloud service. We note some of the use cases for clouds in GSD, the lessons learned with our prototypes and identify challenges that must be conquered before realizing the full business benefits. We believe that in the future, software practitioners will focus more on these cloud computing platforms and see clouds as a means to supporting a ecosystem of clients, developers and other key stakeholders. {\textcopyright} 2009 Springer Berlin Heidelberg.},
author = {Yara, Pavan and Ramachandran, Ramaseshan and Balasubramanian, Gayathri and Muthuswamy, Karthik and Chandrasekar, Divya},
booktitle = {Lecture Notes in Business Information Processing},
doi = {10.1007/978-3-642-02987-5_10},
isbn = {9783642029868},
issn = {18651348},
keywords = {Cloud computing,Compute cloud,Globally distributed software development,Software-as-a-service,Storage cloud},
pages = {81--95},
publisher = {Springer Berlin Heidelberg},
title = {{Global software development with cloud platforms}},
url = {https://doi.org/10.1007{\%}2F978-3-642-02987-5{\_}10},
volume = {35 LNBIP},
year = {2009}
}
@inproceedings{Vouk_2008,
abstract = {"Cloud" computing - a relatively recent term, builds on decades of research in virtualization, distributed computing, utility computing, and more recently networking, web and software services. It implies a service oriented architecture, reduced information technology overhead for the end-user, great flexibility, reduced total cost of ownership, ondemand services and many other things. This paper discusses the concept of "cloud" computing, issues it tries to address, related research topics, and a "cloud" implementation available today.},
author = {Vouk, Mladen A.},
booktitle = {Proceedings of the International Conference on Information Technology Interfaces, ITI},
doi = {10.1109/ITI.2008.4588381},
isbn = {9789537138127},
issn = {13301012},
keywords = {"Cloud" computing,End-to-end quality of service,Utility computing,Virtual computing lab,Virtualization},
month = {jun},
pages = {31--40},
publisher = {IEEE},
title = {{Cloud computing - Issues, research and implementations}},
url = {https://doi.org/10.1109{\%}2Fiti.2008.4588381},
year = {2008}
}
@article{2011,
doi = {10.1016/j.orggeochem.2011.04.014},
issn = {01466380},
journal = {Organic Geochemistry},
number = {8},
pages = {e169--e190},
publisher = {Elsevier {\{}BV{\}}},
title = {{Geochemistry Articles – April 2011}},
url = {https://doi.org/10.1016{\%}2Fj.orggeochem.2011.04.014},
volume = {42},
year = {2011}
}
@incollection{2009,
booktitle = {Applied Software Engineering Series},
doi = {10.1201/9781439803226-c16},
month = {nov},
publisher = {{\{}CRC{\}} Press},
title = {{Tools in the Agile Enterprise}},
url = {https://doi.org/10.1201{\%}2F9781439803226-c16},
year = {2009}
}
@inproceedings{Lee_2009,
abstract = {Cloud computing is a style of computing in which dynamically scalable and often virtualized resources are provided as a service over the Internet. One type of cloud service, SaaS is commonly utilized and it provides several benefits to service consumers. To realize these benefits, it is essential to evaluate the quality of SaaS and manage relatively higher level of its quality based on the evaluation result. Hence, there is a high demand for devising a quality model to evaluate SaaS cloud services. Conventional frameworks do not effectively support SaaS-specific quality aspects such as reusability and accessibility. In this paper, we propose a comprehensive model for evaluating quality of SaaS. We first define key features of SaaS. And then, we derive quality attributes from the key features, and define metrics for the quality attributes. To validate our quality model for SaaS, we conduct assessment based on IEEE 1061. By using the proposed SaaS quality model, SaaS can be evaluated by both service providers. Furthermore, the evaluation results are utilized as an indicator for SaaS quality management. {\textcopyright} 2009 IEEE.},
author = {Lee, Jae Yoo and Lee, Jung Woo and Cheun, Du Wan and Kim, Soo Dong},
booktitle = {Proceedings - 7th ACIS International Conference on Software Engineering Research, Management and Applications, SERA09},
doi = {10.1109/SERA.2009.43},
isbn = {9780769539034},
pages = {261--266},
publisher = {IEEE},
title = {{A quality model for evaluating software-as-a-service in cloud computing}},
url = {https://doi.org/10.1109{\%}2Fsera.2009.43},
year = {2009}
}
@inproceedings{Zhou_Peng_2010,
abstract = {This paper introduces the basic concepts of cloud computing and the characteristics of GIS software engineering, and analyzes the impact of cloud computing on the GIS software development. It discusses the GIS software engineering design method under the cloud computing environment from the aspect of GIS software architecture, development organizations and deployment management, and proposes some suggestions for problems that need to be paid attention to during the GIS software development under the of cloud computing environment. {\textcopyright} 2010 IEEE.},
author = {Peng, Zhou and Mei, Li and Fei, Wang and Fei, Yin},
booktitle = {ICEIT 2010 - 2010 International Conference on Educational and Information Technology, Proceedings},
doi = {10.1109/ICEIT.2010.5607613},
isbn = {9781424480340},
keywords = {Cloud computing,GIS,Software engineering},
publisher = {IEEE},
title = {{The analisis of gis software engineering pattern under the cloud computing environment}},
url = {https://doi.org/10.1109{\%}2Ficeit.2010.5607613},
volume = {2},
year = {2010}
}
@inproceedings{Rellermeyer_2009,
abstract = {Cloud computing faces many of the challenges and difficulties of distributed and parallel software. While the service interface hides the actual application from the remote user, the application developer still needs to come to terms with distributed software that needs to run on dynamic clusters and operate under a wide range of configurations. In this paper, we outline our vision of a model and runtime platform for the development, deployment, and management of software applications on the cloud. Our basic idea is to turn the notion of software module into a first class entity used for management and distribution that can be autonomously managed by the underlying software fabric of the cloud. In the paper we present our model, outline an initial implementation, and describe a first application developed using the ideas presented in the paper. {\textcopyright} 2009 IEEE.},
author = {Rellermeyer, Jan S. and Duller, Michael and Alonso, Gustavo},
booktitle = {Proceedings of the 2009 ICSE Workshop on Software Engineering Challenges of Cloud Computing, CLOUD 2009},
doi = {10.1109/CLOUD.2009.5071530},
isbn = {9781424437139},
pages = {32--37},
publisher = {IEEE},
title = {{Engineering the cloud from software modules}},
url = {https://doi.org/10.1109{\%}2Fcloud.2009.5071530},
year = {2009}
}
@inproceedings{Mei_2009,
abstract = {Cloud computing is an emerging computing paradigm. It aims to share data, calculations, and services transparently among users of a massive grid. Although the industry has started selling cloud-computing products, the software engineering infrastructure and application model are still unclear. In this paper, we compare cloud computing with service-oriented computing and pervasive computing. Both the industry and research community have actively examined these three computing paradigms. In this paper, we draw a qualitative comparison among their application characteristics based on the classic model of computer architecture from the cloud application perspective. We contrast the difference and pinpoint areas that researchers may examine in the future. {\textcopyright} 2009 IEEE.},
author = {Mei, Lijun and Zhang, Zhenyu and Chan, W. K.},
booktitle = {Proceedings - International Computer Software and Applications Conference},
doi = {10.1109/COMPSAC.2009.76},
isbn = {9780769537269},
issn = {07303157},
keywords = {Applications,Cloud computing,Software engineering},
pages = {525--530},
publisher = {IEEE},
title = {{More tales of clouds: Software engineering research issues from the cloud application perspective}},
url = {https://doi.org/10.1109{\%}2Fcompsac.2009.76},
volume = {1},
year = {2009}
}
@inproceedings{Cunsolo_2010,
abstract = {Cloud computing is the "new hot" topic in IT. It combines the maturity of Web technologies (networking, APIs, semantic Web 2.0, languages, protocols and standards such as WSDL, SOAP, REST, WS-BPEL, WS-CDL, IPSEC, etc.), the robustness of geographically distributed computing paradigm (Network, Internet and Grid computing) and self-management capabilities (Autonomic computing), with the capacity to manage quality of services by monitoring, metering, quantifying and billing computing resources and costs (Utility computing). Those have made possible and cost-effective for businesses, small and large, to completely host data- and application-centers virtually... in the Cloud. Our idea of Cloud proposes a new dimension of computing, in which everyone, from single users to communities and enterprises, can, on one hand, share resources and services in a transparent way and, on the other hand, have access to and use such resources and services adaptively to their requirements. Such an enhanced concept of Cloud, enriching the original one with Volunteer computing and interoperability challenges, has been proposed and synthesized in Cloud@Home. The complex infrastructure implementing Cloud@Home has to be supported by an adequate distributed middleware able to manage it. In order to develop such a complex distributed software, in this paper we apply software engineering principles such as rigor, separation of concerns and modularity. Our idea is, starting from a software engineering approach, to identify and separate concerns and tasks, and then to provide both the software middleware architecture and the hardware infrastructure following the hw/sw co-design technique widely used in embedded systems. In this way we want to primarily identify and specify the Cloud@Home middleware architecture and its deployment into a feasible infrastructure; secondly, we want to propose the development process we follow, based on hardware/software co-design, in distributed computing contexts, demonstrating its effectiveness through Cloud@Home. {\textcopyright} 2010 IEEE.},
author = {Cunsolo, V. D. and Distefano, S. and Puliafito, A. and Scarpa, M.},
booktitle = {CCGrid 2010 - 10th IEEE/ACM International Conference on Cluster, Cloud, and Grid Computing},
doi = {10.1109/CCGRID.2010.76},
isbn = {9781424469871},
keywords = {Cloud computing,Cross-platform interoperability,HW/SW co-design,Separation of concerns,Volunteer computing},
pages = {618--624},
publisher = {IEEE},
title = {{Applying software engineering principles for designing Cloud@Home}},
url = {https://doi.org/10.1109{\%}2Fccgrid.2010.76},
year = {2010}
}
@inproceedings{Ju_2010,
abstract = {Software as a Service (SaaS) is a newly emerging business model in the software industry. The growing speed of SaaS is fast. The article gives a quick survey on SaaS. It covers key technologies in SaaS, difference between ASP and SaaS, SaaS application architecture and SaaS Maturity Model. To small businesses, SaaS offers more advantages. {\textcopyright} 2010 IEEE.},
author = {Ju, Jiehui and Ya, Wang and Fu, Jianqing and Wu, Jiyi and Lin, Zhijie},
booktitle = {Proceedings - 2010 International Conference on Intelligent Computing and Cognitive Informatics, ICICCI 2010},
doi = {10.1109/ICICCI.2010.120},
isbn = {9780769540146},
keywords = {Advantage,Architecture,Key technology,Maturity Model,SaaS},
month = {jun},
pages = {384--387},
publisher = {IEEE},
title = {{Research on key technology in SaaS}},
url = {https://doi.org/10.1109{\%}2Ficicci.2010.120},
year = {2010}
}
@incollection{La_2009,
abstract = {Software-as-a-Service (SaaS) is a type of cloud service which provides software functionality through Internet. Its benefits are well received in academia and industry. To fully utilize the benefits, there should be effective methodologies to support the development of SaaS services which provide high reusability and applicability. Conventional approaches such as object-oriented methods do not effectively support SaaS-specific engineering activities such as modeling common features, variability, and designing quality services. In this paper, we present a systematic process for developing high quality SaaS and highlight the essentiality of commonality and variability (C{\&}V) modeling to maximize the reusability. We first define criteria for designing the process model and provide a theoretical foundation for SaaS; its meta-model and C{\&}V model. We clarify the notion of commonality and variability in SaaS, and propose a SaaS development process which is accompanied with engineering instructions. Using the proposed process, SaaS services with high quality can be effectively developed. {\textcopyright} 2009 Springer-Verlag.},
author = {La, Hyun Jung and Kim, Soo Dong},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-10665-1_25},
isbn = {3642106641},
issn = {03029743},
keywords = {Cloud computing,Commonality and variability analysis,Development process,SaaS,Software-as-a-Service},
pages = {278--289},
publisher = {Springer Berlin Heidelberg},
title = {{A systematic process for developing high quality SaaS cloud services}},
url = {https://doi.org/10.1007{\%}2F978-3-642-10665-1{\_}25},
volume = {5931 LNCS},
year = {2009}
}
@inproceedings{Weber_2014,
author = {Weber, Daniel and Collado, Antonio and Stork, Andre and Dokken, Tor and Stahl, Christian},
booktitle = {European Project Space on Information and Communication Systems},
doi = {10.5220/0006183300710088},
pages = {71--88},
publisher = {{\{}SCITEPRESS{\}} - Science and and Technology Publications},
title = {{Computational Cloud Services and Workflows for Agile Engineering}},
url = {https://doi.org/10.5220{\%}2F0006183300710088},
year = {2016}
}
@article{de_Almeida_Biolchini_2007,
abstract = {The term systematic review is used to refer to a specific methodology of research, developed in order to gather and evaluate the available evidence pertaining to a focused topic. It represents a secondary study that depends on primary study results to be accomplished. Several primary studies have been conducted in the field of Software Engineering in the last years, determining an increasing improvement in methodology. However, in most cases software is built with technologies and processes for which developers have insufficient evidence to confirm their suitability, limits, qualities, costs, and inherent risks. Conducting systematic reviews in Software Engineering consists in a major methodological tool to scientifically improve the validity of assertions that can be made in the field and, as a consequence, the reliability degree of the methods that are employed for developing software technologies and supporting software processes. This paper aims at discussing the significance of experimental studies, particularly systematic reviews, and their use in supporting software processes. A template designed to support systematic reviews in Software Engineering is presented, and the development of ontologies to describe knowledge regarding such experimental studies is also introduced. {\textcopyright} 2006 Elsevier Ltd. All rights reserved.},
author = {{de Almeida Biolchini}, Jorge Calmon and Mian, Paula Gomes and Natali, Ana Candida Cruz and Conte, Tayana Uch{\^{o}}a and Travassos, Guilherme Horta},
doi = {10.1016/j.aei.2006.11.006},
issn = {14740346},
journal = {Advanced Engineering Informatics},
keywords = {Experimental software engineering,Experimental study,Ontology,Scientific method,Systematic review},
number = {2},
pages = {133--151},
publisher = {Elsevier {\{}BV{\}}},
title = {{Scientific research ontology to support systematic review in software engineering}},
url = {https://doi.org/10.1016{\%}2Fj.aei.2006.11.006},
volume = {21},
year = {2007}
}
@inproceedings{Guha_2010,
abstract = {Current era of Web 2.0 is enabling new business models for using the semantic web. One such business model is leasing out computing platform of hardware and software over the internet to the tenants and is dubbed as Cloud Computing. The anticipated future trend of computing is believed to be this cloud computing as it promises a lot of benefits like no capital expenditure, speed of application deployment, shorter time to market, lower cost of operation and easier maintenance for the tenants. This paper analyses how cloud computing on the background of Web 2.0 is going to impact the software engineering process to develop quality software. As the cloud provider is an external entity or third party, how difficult will be the interaction with them? How to separate the roles of SW engineers and cloud providers? SW engineering should include framework activities to leverage all the benefits of cloud computing systematically and strategically. This paper extends the traditional agile process model named Extreme Programming (XP) and integrates interaction with the cloud provider to facilitate acceptance of cloud computing. {\textcopyright} 2010 IEEE.},
author = {Guha, Radha and Al-Dabass, David},
booktitle = {Proceedings - 2010 International Symposium on Electronic System Design, ISED 2010},
doi = {10.1109/ISED.2010.48},
isbn = {9780769542942},
keywords = {Agile process model,Cloud computing,Software engineering,Web 2.0},
pages = {213--218},
publisher = {IEEE},
title = {{Impact of Web 2.0 and Cloud Computing platform on software engineering}},
url = {https://doi.org/10.1109{\%}2Fised.2010.48},
year = {2010}
}
@inproceedings{Badr_2010,
abstract = {Version control plays an important role in software industries to manage changes and code development. It is also recognized as embedded parts in various software types such as Content Management Systems, Wikis and Word processors. The emergence of Software-as-a-Service (SaaS) and Cloud computing stimulate the provision of online services via the Internet. Traditional version control systems still provide control over changes to source codes in software engineering, but they are expected to play a major role in service innovation. Incremental changes in service provisions increase value, productivity and consumer satisfaction. From a business perspective, the challenge arises when the revision control helps in to decide whether a new version of a SaaS application should be released and define metrics to determine that users should migrate to a new version after several minor or major revisions. Based on the versionology theory, we introduce a metric-based system to evaluate the distance between successive versions and extrapolate users' resistance to change and their capacity to integrate a new version. We also conducted experiments to demonstrate the usefulness of this approach in service differentiation. {\textcopyright} 2010 IEEE.},
author = {Badr, Youakim and Caplat, Guy},
booktitle = {Proceedings - International Conference on Advanced Information Networking and Applications, AINA},
doi = {10.1109/AINA.2010.131},
isbn = {9780769540184},
issn = {1550445X},
keywords = {Complexity measures,Design concepts,Evolutionary prototyping,Evolving internet applications,Review and evaluation,Service computing,Software-as-a- Service,Version control},
month = {mar},
number = {3},
pages = {237--243},
publisher = {IEEE},
title = {{Software-as-a-service and Versionology: Towards innovative service differentiation}},
url = {https://doi.org/10.1109{\%}2Faina.2010.131 https://doi.org/10.1109{\%}2Fmc.2011.67 https://doi.org/10.1109{\%}2Fcloud.2009.5071534},
volume = {44},
year = {2010}
}
@inproceedings{La_2009,
abstract = {As an effective reuse paradigm, Cloud Computing (CC) provide many benefits. Among different types of cloud services, SaaS and Mash-up services are delivering the conventional software functionality as a service. Hence, both types of services become alternatives to acquisition of conventional software applications. However, there are some critical technical problems/risks in trying to reuse SaaS and Mash-up services, such as providing pre-specified scalability even at peak and engineering services with high commonality and applicability. In this paper, we first define meta-models of two types of cloud services; SaaS and Mash-up Service. For each type of cloud service, we raise two technical issues and provide their effective solution space. By applying the provided solutions, much of the technical problems and risks can be remedied in advance, making cloud services more reusable and reliable. {\textcopyright} 2009 IEEE.},
author = {La, Hyun Jung and Choi, Si Won and Kim, Soo Dong},
booktitle = {Proceedings - IEEE International Conference on e-Business Engineering, ICEBE 2009; IEEE Int. Workshops - AiR 2009; SOAIC 2009; SOKMBI 2009; ASOC 2009},
doi = {10.1109/ICEBE.2009.56},
isbn = {9780769538426},
keywords = {Cloud computing,Mash-up service,Software-as-a-Service (SaaS),Technical challenges and solutions},
pages = {359--364},
publisher = {IEEE},
title = {{Technical challenges and solution space for developing SaaS and mash-up cloud services}},
url = {https://doi.org/10.1109{\%}2Ficebe.2009.56},
year = {2009}
}
@inproceedings{Parveen_2010,
abstract = {Testing is a challenging activity for many software engineering projects, especially for large-scale systems. The amount of tests cases can range from a few hundred to several thousands, requiring significant computing resources and lengthy execution times. Cloud computing offers the potential to address both of these issues: it offers resources such as virtualized hardware, effectively unlimited storage, and software services that can aid in reducing the execution time of large test suites in a cost-effective manner. However, migrating to the cloud is not without cost, nor is it necessarily the best solution to all testing problems. This paper discusses when to migrate software testing to the cloud from two perspectives:the characteristics of an application under test, and the types of testing performed on the application. {\textcopyright} 2010 IEEE.},
author = {Parveen, Tauhida and Tilley, Scott},
booktitle = {ICSTW 2010 - 3rd International Conference on Software Testing, Verification, and Validation Workshops},
doi = {10.1109/ICSTW.2010.77},
isbn = {9780769540504},
keywords = {Cloud computing,Software testing,System migration},
pages = {424--427},
publisher = {IEEE},
title = {{When to migrate software testing to the cloud?}},
url = {https://doi.org/10.1109{\%}2Ficstw.2010.77},
year = {2010}
}
@inproceedings{Riungu_2010,
abstract = {Cloud computing is causing a paradigm shift in the provision and use of computing services; away from the traditional desktop form to online services. This implies that the manner in which these computing services are tested should also change. This paper discusses the research issues that cloud computing imposes on software testing. These issues were gathered during interviews with industry practitioners from eleven software organizations. The interviews were analyzed using qualitative grounded theory method. Findings of the study were compared with existing literature. The research issues were categorized according to application, management, legal and financial issues. By addressing these issues, researchers can offer reliable recommendation for practitioners in the industry. {\textcopyright} 2010 IEEE.},
author = {Riungu, Leah Muthoni and Taipale, Ossi and Smolander, Kari},
booktitle = {Proceedings - 2nd IEEE International Conference on Cloud Computing Technology and Science, CloudCom 2010},
doi = {10.1109/CloudCom.2010.58},
isbn = {9780769543024},
keywords = {Cloud computing,Research issues,Software testing},
month = {nov},
pages = {557--564},
publisher = {IEEE},
title = {{Research issues for software testing in the cloud}},
url = {https://doi.org/10.1109{\%}2Fcloudcom.2010.58},
year = {2010}
}
@article{Parthasarathy_2016,
abstract = {Enterprise resource planning (ERP) systems are recognized as management information systems that streamline business processes of an enterprise. Delivering ERP software to meet functional needs of an organization with acceptable level of quality is a challenge due to the very nature of development and deployment of this packaged software. Drawing on ISO/IEC 9126's characterization of software quality and Luo and Strong's ERP customization framework, this paper analyzes the impact of the ERP system customization on software quality of ERP. A software quality framework for ERP customization has been developed, and three sets of hypotheses have been formulated. A detailed survey was conducted for data collection. The statistical data analysis reveals that module customization does not impact ERP quality, while database and source code customizations have significant influence over ERP quality. Our findings have implications for the implementation of customized ERP in organizations.},
author = {Parthasarathy, Sudhaman and Sharma, Srinarayan},
doi = {10.1007/s11219-016-9314-x},
issn = {15731367},
journal = {Software Quality Journal},
keywords = {Customization,Enterprise resource planning (ERP),Quality attributes,Software quality},
number = {2},
pages = {581--598},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Impact of customization over software quality in ERP projects: an empirical study}},
url = {https://doi.org/10.1007{\%}2Fs11219-016-9314-x},
volume = {25},
year = {2017}
}
@inproceedings{Li_2009,
abstract = {SaaS (Software as a Service) is becoming a popular research field for its feature of novel schema in software development. In this schema, service providers are in charge of constructing, managing and maintaining the necessary IT supporting infrastructure and the platform for operating services, while tenants take use of the customization functions to cement their own individual applications on the platform. However, current studies on customization mechanisms are difficult in validating the complex relationships between customized composites in the customization phase. In the view of this situation, this paper proposes a customization relationship model for supporting the multi-granularity relationship in the multi-tenant environment of SaaS. Analyzing from data, service, process and user interface levels, it guides the actions of customization behavior. We also bring forward corresponding engines and validation algorithms to guarantee the correction of customization production by tenants. {\textcopyright} 2009 IEEE.},
author = {Li, Hongbo and Shi, Yuliang and Li, Qingzhong},
booktitle = {2009 International Conference on Web Information Systems and Mining, WISM 2009},
doi = {10.1109/WISM.2009.128},
isbn = {9780769538174},
keywords = {Customization,Multi-granularity,Relationship,SaaS,Validation},
month = {nov},
pages = {611--615},
publisher = {IEEE},
title = {{A multi-granularity customization relationship model for SaaS}},
url = {https://doi.org/10.1109{\%}2Fwism.2009.128},
year = {2009}
}
@inproceedings{Salih_2012,
abstract = {We observed SaaS developed application by multi-tenancy to provide flexible customization and introduced many issues in software scalability and dynamic testing. Multi-tenancy demand to customizing the single instance according variability wishes among many customers. For that we proposed variable service process to customization multi-tenancy in runtime. It will be realize all benefits of variability concept for SaaS application. And proposed Feature meta-model to implement graphical editor and define all rules and linkages between elements of service process. {\textcopyright} 2012 IEEE.},
author = {Salih, Nadir K. and Zang, Tianyi},
booktitle = {Proceedings of the 2012 International Conference in Green and Ubiquitous Technology, GUT 2012},
doi = {10.1109/GUT.2012.6344158},
isbn = {9781457721724},
keywords = {SaaS,multi-tenancy,service process,variability},
month = {jul},
pages = {102--105},
publisher = {IEEE},
title = {{Variable service process by feature meta-model for SaaS application}},
url = {https://doi.org/10.1109{\%}2Fgut.2012.6344158},
year = {2012}
}
@inproceedings{Wohlin_2014,
abstract = {Background: Systematic literature studies have become common in software engineering, and hence it is important to understand how to conduct them efficiently and reliably. Objective: This paper presents guidelines for conducting literature reviews using a snowballing approach, and they are illustrated and evaluated by replicating a published systematic literature review. Method: The guidelines are based on the experience from conducting several systematic literature reviews and experimenting with different approaches. Results: The guidelines for using snowballing as a way to search for relevant literature was successfully applied to a systematic literature review. Conclusions: It is concluded that using snowballing, as a first search strategy, may very well be a good alternative to the use of database searches. Copyright 2014 ACM.},
author = {Wohlin, Claes},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/2601248.2601268},
isbn = {9781450324762},
keywords = {Replication,Snowball search,Snowballing,Systematic literature review,Systematic mapping studies},
publisher = {{\{}ACM{\}} Press},
title = {{Guidelines for snowballing in systematic literature studies and a replication in software engineering}},
url = {https://doi.org/10.1145{\%}2F2601248.2601268},
year = {2014}
}
@article{Fourie_2004,
author = {Fourie, Ina},
doi = {10.1108/02640470410533542},
issn = {0264-0473},
journal = {The Electronic Library},
number = {2},
pages = {193--194},
publisher = {Emerald},
title = {{ Challenges of Teaching with Technology across the Curriculum: Issues and Solutions20049Edited by Lawrence Tomei. Challenges of Teaching with Technology across the Curriculum: Issues and Solutions . Hershey, PA: Information Science Publishing 2003. , ISBN: 1591401097 US{\$} 74.95 hard cover }},
url = {https://doi.org/10.1108{\%}2F02640470410533542},
volume = {22},
year = {2004}
}
@incollection{Malik_2019,
author = {Malik, Sahil and Malik, Sahil},
booktitle = {Beginning Microsoft Graph},
doi = {10.1007/978-1-4842-3965-0_5},
publisher = {Apress},
title = {{Single Tenant vs. Multi Tenant}},
url = {https://doi.org/10.1007{\%}2F978-1-4842-3965-0{\_}5},
year = {2019}
}
@article{Kaltenecker_2015,
abstract = {The software industry faces a fundamental change from delivering software On-premises to delivering software On-demand. Well-established companies have to shift their focus from the (still) profitable On-premises market to an, as yet unprofitable, On-demand market to survive. This requires strategies to handle the transformation process. Based on five case studies and following Christensen's disruptive innovation theory, we learn the successful strategies that software companies can adopt to handle a change from On-premises to On-demand delivery. These strategies include the general ideas that Christensen proposes and separate extensions for the software industry, suggesting an emerging area of IS research.},
author = {Kaltenecker, Natalie and Hess, Thomas and Huesig, Stefan},
doi = {10.1016/j.jsis.2015.08.006},
issn = {09638687},
journal = {Journal of Strategic Information Systems},
keywords = {Cloud computing,Disruptive innovation,Software as a service,Software industry,Transformation strategy},
number = {4},
pages = {234--250},
publisher = {Elsevier {\{}BV{\}}},
title = {{Managing potentially disruptive innovations in software companies: Transforming from On-premises to the On-demand}},
url = {https://doi.org/10.1016{\%}2Fj.jsis.2015.08.006},
volume = {24},
year = {2015}
}
@article{Lishko_2013,
abstract = {Current knowledge of the mechanisms of blood coagulation does not provide an answer to one pivotal question: why is, in contrast to a pathological thrombus, the growth of normal hemostatic clot after blood vessel injury suddenly terminated? In the present paper, we summarize the results of our investigations that give an answer to this question. We show that the surface of fibrin clot in the circulation is coated with a thin metastable layer of fibrinogen which is not able to support adhesion of blood cells. Consequently, platelets and leukocytes, the cells expressing adhesive integrins, are incapable of consolidatingtheir grip on the surface and washed away by blood flow, thereby preventing the thrombus propagation. The cells that escaped this fibrinogen shield and reached a solid fibrin matrix use an additional mechanism -the ability to activate plasminogen bound either to the surface of cells or to fibrin. Plasmin formed at the interface between the cells and the clot locally degrades fibrin resulting in the fragmentation of the surface rendering it unstable, non-adhesive and therefore non-thrombogenic. Thus, the growth of hemostatic thrombus is halted by two mechanisms, fibrinogen-and plasminogen-dependent, both of which are based on the same principle -the generation of the mechanically unstable, non-adhesive surface.},
author = {Lishko, V. K. and Yermolenko, I. S. and Podolnikova, N. P. and Ugarova, T. P.},
doi = {10.15407/ubj85.06.094},
issn = {02018470},
journal = {Ukrain'skyi Biokhimichnyi Zhurnal},
keywords = {Fibrin,Fibrinogen,Mechanical vascular injury,Plasmin,Plasminogen,Plasminogen activation},
number = {6},
pages = {94--105},
publisher = {National Academy of Sciences of Ukraine (Co. {\{}LTD{\}} Ukrinformnauka)},
title = {{A novel mechanism cont rolling the growth of hemostatic thrombi}},
url = {https://doi.org/10.15407{\%}2Fubj85.06.094},
volume = {85},
year = {2013}
}
@inproceedings{Chen_2006,
abstract = {Scalability is a crucial factor in performance evaluation and analysis of parallel and distributed systems. Much effort has been devoted to scalability research and several metrics are proposed. However, the lacking of an effective scalability analysis toolkit is still a major barrier for researchers to measure and analyze scalabilities. Isospeed scalability is a known metric and has been extended for general computing systems recently. This paper proposes an effective Scalability Testing and Analysis System, called STAS, and presents its implementation with isospeed-e scalability metric. STAS provides the facility to conduct automated isospeed-e scalability measure and analysis. It reduces the burden for users to evaluate the performance of algorithms and systems. Experiments have been conducted to verify the design and implementation. {\textcopyright} 2006 IEEE.},
author = {Chen, Yong and Sun, Xian He},
booktitle = {Proceedings - IEEE International Conference on Cluster Computing, ICCC},
doi = {10.1109/CLUSTR.2006.311882},
isbn = {1424403286},
issn = {15525244},
publisher = {IEEE},
title = {{STAS: A Scalability Testing and Analysis System}},
url = {https://doi.org/10.1109{\%}2Fclustr.2006.311882},
year = {2006}
}
@inproceedings{He_2012,
abstract = {Cloud-based software applications (Software as a Service - SaaS) for multi-tenant provisioning have become a major development paradigm in Web engineering. Instead of serving a single end-user, a multi-tenant SaaS provides multiple end-users with the same functionality but with potentially different quality-of-service (QoS) values. The service selection for such a SaaS is a complex decision-making process which involves a number of stakeholders with different QoS requirements. SaaS developers need to compose services with different QoS values to meet end-users' different multidimensional QoS constraints for the SaaS. Furthermore, they also need to satisfy SaaS providers' optimisation goals for the SaaS, such as least resource cost and best system performance. Existing QoS-aware service selection approaches are oriented at a single tenant. They do not consider the characteristics of multi-tenant SaaS and hence are ineffective and inefficient when applied to compose multi-tenant SaaS. In this paper, we introduce a novel QoS-driven approach for helping SaaS developers select the services for composing multi-tenant SaaS, which achieves SaaS providers' optimisation goals while fulfilling the end-users' different levels of QoS constraints. The proposed approach is evaluated using an example SaaS synthetically generated based on a dataset of real-world Web services. Experimental results show that our approach significantly outperforms existing approaches in terms of both effectiveness and performance. {\textcopyright} 2012 IEEE.},
author = {He, Qiang and Han, Jun and Yang, Yun and Grundy, John and Jin, Hai},
booktitle = {Proceedings - 2012 IEEE 5th International Conference on Cloud Computing, CLOUD 2012},
doi = {10.1109/CLOUD.2012.125},
isbn = {9780769547558},
keywords = {Cloud computing,Quality of Service,SaaS,multi-tenancy,optimisation,service composition},
month = {jun},
pages = {566--573},
publisher = {IEEE},
title = {{QoS-driven service selection for multi-tenant SaaS}},
url = {https://doi.org/10.1109{\%}2Fcloud.2012.125},
year = {2012}
}
@inproceedings{Zhang_2010,
abstract = {As one of the key characteristics of Software as a Service (SaaS), multi-tenancy aims to support massive customers by sharing application instances and databases. To achieve the high economies of scale, one of the most issues needing to be solved in the real industry is that, given a fixed number of nodes, how to optimally place on-boarding tenants to maximize the total supported number of tenants without violating their SLA requirements. This paper focuses on this problem, which is called On-line Tenant Placement Problem (OTPP). In order to calculate the resource consumption of onboarding tenants, a novel resource consumption estimation model for multi-tenant pattern is proposed in this paper. Based on this model, we explore the complexity of OTPP. A robust heuristic is proposed for the OTPP. The simulation experimental results show the high effectiveness and the good efficiency of our algorithm. {\textcopyright} 2010 IEEE.},
author = {Zhang, Yi and Wang, Zhihu and Gao, Bo and Guo, Changjie and Sun, Wei and Li, Xiaoping},
booktitle = {ICWS 2010 - 2010 IEEE 8th International Conference on Web Services},
doi = {10.1109/ICWS.2010.65},
isbn = {9780769541280},
keywords = {Heuristic,On-line tenant placement problem,Resource consumption estimation model,Vector distance},
month = {jul},
pages = {425--432},
publisher = {IEEE},
title = {{An effective heuristic for on-line tenant placement problem in SaaS}},
url = {https://doi.org/10.1109{\%}2Ficws.2010.65},
year = {2010}
}
@inproceedings{Chauvel_2018,
abstract = {Enterprise software applications need to be customized in order to meet special requirements from customers. When the customization requirements are beyond the prediction of vendors, deep customization is needed, and traditionally customers do deep customizations by directly modifying the application source code. When the applications are moving from on-premises to multi-tenant Software as a Service, directly changing code is not feasible because many customers are sharing one instance of the application code. In this paper, we present a new approach to enable deep customization on multi-tenant SaaS, using intrusive microservices. The custom code is implemented as an isolated and self-contained microservice running beside the main service, and it uses callback code to intrusively execute queries or commands inside the main service. We present the key techniques behind intrusive microservices and illustrate how turned an open source online shopping application into a deeply customizable multi-tenant service.},
author = {Chauvel, Franck and Solberg, Arnor},
booktitle = {Proceedings - 2018 International Conference on the Quality of Information and Communications Technology, QUATIC 2018},
doi = {10.1109/QUATIC.2018.00015},
isbn = {9781538658413},
keywords = {Cloud computing,Customization,Microservices,Multi tenancy},
pages = {30--37},
publisher = {IEEE},
title = {{Using intrusive microservices to enable deep customization of multi-tenant SaaS}},
url = {https://doi.org/10.1109{\%}2Fquatic.2018.00015},
year = {2018}
}
@incollection{Heart_2010,
abstract = {Software as a service (SaaS) is a software sourcing option that allows organizations to remotely access enterprise applications, without having to install the application in-house. In this work we study vendors' readiness to deliver SaaS, a topic scarcely studied before. The innovation classification (evolutionary vs. revolutionary) and a new, Seven Fundamental Organizational Capabilities (FOCs) Model, are used as the theoretical frameworks. The Seven FOCs model suggests generic yet comprehensive set of capabilities that are required for organizational success: 1) sensing the stakeholders, 2) sensing the business environment, 3) sensing the knowledge environment, 4) process control, 5) process improvement, 6) new process development, and 7) appropriate resolution. The results show that most vendors perceive SaaS as an evolutionary rather than revolutionary innovation hence do not employ radically new business processes. Some lessons were drawn from the past ASP failure, but a deep learning process was scarcely employed. These findings were particularly typical to leading vendors in the software product market who recently added SaaS to their business. In contrast, pure-SaaS vendors thought differently. Respondents consistently perceived their organizational capabilities higher than the rank calculated from indirect measures of the capabilities. This may well mean that the respondents' organizations were in fact less ready than expected. Furthermore, 'appropriate resolution' and 'new model development' were ranked low by the respondents, while highly correlated with customer satisfaction from SaaS. The readiness of SaaS vendors, therefore, especially those who are accustomed to delivering software products, is questionable. {\textcopyright} 2010 Springer-Verlag Berlin Heidelberg.},
author = {Heart, Tsipi and Tsur, Noa Shamir and Pliskin, Nava},
booktitle = {Lecture Notes in Business Information Processing},
doi = {10.1007/978-3-642-15417-1_9},
isbn = {3642154166},
issn = {18651348},
pages = {151--184},
publisher = {Springer Berlin Heidelberg},
title = {{Software-as-a-service vendors: Are they ready to successfully deliver?}},
url = {https://doi.org/10.1007{\%}2F978-3-642-15417-1{\_}9},
volume = {55 LNBIP},
year = {2010}
}
@article{Walraven_2014,
abstract = {Application-level multi-tenancy is an architectural approach for Software-as-a-Service (SaaS) applications which enables high operational cost efficiency by sharing one application instance among multiple customer organizations (the so-called tenants). However, the focus on increased resource sharing typically results in a one-size-fits-all approach. In principle, the shared application instance satisfies only the requirements common to all tenants, without supporting potentially different and varying requirements of these tenants. As a consequence, multi-tenant SaaS applications are inherently limited in terms of flexibility and variability. This paper presents an integrated service engineering method, called service line engineering, that supports co-existing tenant-specific configurations and that facilitates the development and management of customizable, multi-tenant SaaS applications, without compromising scalability. Specifically, the method spans the design, implementation, configuration, composition, operations and maintenance of a SaaS application that bundles all variations that are based on a common core. We validate this work by illustrating the benefits of our method in the development of a real-world SaaS offering for document processing. We explicitly show that the effort to configure and compose an application variant for each individual tenant is significantly reduced, though at the expense of a higher initial development effort. {\textcopyright} 2014 Elsevier Inc.},
author = {Walraven, Stefan and {Van Landuyt}, Dimitri and Truyen, Eddy and Handekyn, Koen and Joosen, Wouter},
doi = {10.1016/j.jss.2014.01.021},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Multi-tenancy,SaaS,Variability},
number = {1},
pages = {48--62},
publisher = {Elsevier {\{}BV{\}}},
title = {{Efficient customization of multi-tenant Software-as-a-Service applications with service lines}},
url = {https://doi.org/10.1016{\%}2Fj.jss.2014.01.021},
volume = {91},
year = {2014}
}
@inproceedings{ZHANG_2007,
abstract = {Software as Services (SaS) is emerging as a new application software delivery approach, and has extensively leveraged Web services and other SOA concepts and technologies. Compared to the traditional ones, SaS has the following distinctive features: application delivery over Internet, usage based pricing mechanism, etc. Potentially, this approach can significantly reduce the total cost of ownership of application software. However, it does have a number of unique issues that include service customization, multi-tenancy, complex billing model, etc. If not handled properly, these issues can result in ad-hoc and manual service consumption practices, which could eliminate the benefits of the SaS approach. In this paper, we are going to specifically deal with the service customization issue. To that end, we proposed a novel SaS customization policy and a supporting framework that is realized through a design-time tooling and a runtime environment. We also provided a case study to verify the effectiveness of the proposed approach. {\textcopyright} 2007 IEEE.},
author = {Zhang, Kuo and Zhang, Xin and Sun, Wei and Liang, Haiqi and Huang, Ying and Zeng, Liangzhao and Liu, Xuanzhe},
booktitle = {Proceedings - The 9th IEEE International Conference on E-Commerce Technology; The 4th IEEE International Conference on Enterprise Computing, E-Commerce and E-Services, CEC/EEE 2007},
doi = {10.1109/CEC-EEE.2007.9},
isbn = {0769529135},
month = {jul},
pages = {123--130},
publisher = {IEEE},
title = {{A policy-driven approach for software-as-services customization}},
url = {https://doi.org/10.1109{\%}2Fcec-eee.2007.9},
year = {2007}
}
@inproceedings{Tai_2010,
abstract = {Building on compute and storage virtualization, Cloud Computing provides scalable, network-centric, abstracted IT infrastructure, platforms, and applications as on-demand services that are billed by consumption. Cloud Service Engineering is the application of a systematic approach to leverage Cloud Computing in the context of the Internet in its combined role as a platform for technical, economic, organizational and social networks. This tutorial introduces concepts and technology of Cloud Computing and Cloud Service Engineering, providing an overview of state-of-the-art in research and practice. We show how to set up a private Cloud that delivers Infrastructure-as-a-Service (IaaS). Eucalyptus and OpenNebula are popular open source software frameworks for creating on-premise Clouds. Promises, challenges and solutions for integrating services of a private Cloud with public Cloud services such as Amazon EC2 and SQS are discussed. We show how the best of both worlds - private and public Clouds - can be combined to build scalable and secure systems. {\textcopyright} 2010 ACM.},
author = {Tai, Stefan and Nimis, Jens and Lenk, Alexander and Klems, Markus},
booktitle = {Proceedings - International Conference on Software Engineering},
doi = {10.1145/1810295.1810437},
isbn = {9781605587196},
issn = {02705257},
keywords = {cloud computing,cloud service engineering},
pages = {475--476},
publisher = {{\{}ACM{\}} Press},
title = {{Cloud service engineering}},
url = {https://doi.org/10.1145{\%}2F1810295.1810437},
volume = {2},
year = {2010}
}
@inproceedings{Almorsy_2012,
abstract = {Multi-tenancy helps service providers to save costs, improve resource utilization, and reduce service customization and maintenance time by sharing of resources and services. On the other hand, supporting multi-tenancy adds more complexity to the shared application's required capabilities. Security is a key requirement that must be addressed when engineering new SaaS applications or when re-engineering existing applications to support multi-tenancy. Traditional security (re)engineering approaches do not fit with the multi-tenancy application model where tenants and their security requirements emerge after the system was first developed. Enabling, runtime, adaptable and tenant-oriented application security customization on single service instance is a key challenging security goal in multi-tenant application engineering. In this paper we introduce TOSSMA, a Tenant-Oriented SaaS Security Management Architecture. TOSSMA allows service providers to enable their tenants in defining, customizing and enforcing their security requirements without having to go back to application developers for maintenance or security customizations. TOSSMA supports security management for both new and existing systems. Service providers are not required to write security integration code to use a specific security platform or mechanism. In this paper, we describe details of our approach and architecture, our prototype implementation of TOSSMA, give a usage example of securing a multi-tenant SaaS, and discuss our evaluation experiments of TOSSMA. {\textcopyright} 2012 IEEE.},
author = {Almorsy, Mohamed and Grundy, John and Ibrahim, Amani S.},
booktitle = {Proceedings - 2012 IEEE 5th International Conference on Cloud Computing, CLOUD 2012},
doi = {10.1109/CLOUD.2012.146},
isbn = {9780769547558},
keywords = {Cloud computing,SaaS application security,cloud computing security,multi-tenancy security},
month = {jun},
pages = {981--988},
publisher = {IEEE},
title = {{TOSSMA: A tenant-oriented SaaS security management architecture}},
url = {https://doi.org/10.1109{\%}2Fcloud.2012.146},
year = {2012}
}
@article{LYNN_1986,
author = {Lynn, Mary R.},
doi = {10.1097/00006199-198611000-00017},
issn = {15389847},
journal = {Nursing Research},
month = {nov},
number = {6},
pages = {382--386},
pmid = {3640358},
publisher = {Ovid Technologies (Wolters Kluwer Health)},
title = {{Determination and quantification of content validity}},
url = {https://doi.org/10.1097{\%}2F00006199-198611000-00017},
volume = {35},
year = {1986}
}
@article{Cronbach_1951,
abstract = {A general formula ($\alpha$) of which a special case is the Kuder-Richardson coefficient of equivalence is shown to be the mean of all split-half coefficients resulting from different splittings of a test. $\alpha$ is therefore an estimate of the correlation between two random samples of items from a universe of items like those in the test. $\alpha$ is found to be an appropriate index of equivalence and, except for very short tests, of the first-factor concentration in the test. Tests divisible into distinct subtests should be so divided before using the formula. The index {\{}Mathematical expression{\}}, derived from $\alpha$, is shown to be an index of inter-item homogeneity. Comparison is made to the Guttman and Loevinger approaches. Parallel split coefficients are shown to be unnecessary for tests of common types. In designing tests, maximum interpretability of scores is obtained by increasing the first-factor concentration in any separately-scored subtest and avoiding substantial group-factor clusters within a subtest. Scalability is not a requisite. {\textcopyright} 1951 Psychometric Society.},
author = {Cronbach, Lee J.},
doi = {10.1007/BF02310555},
issn = {00333123},
journal = {Psychometrika},
number = {3},
pages = {297--334},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Coefficient alpha and the internal structure of tests}},
url = {https://doi.org/10.1007{\%}2Fbf02310555},
volume = {16},
year = {1951}
}
@inproceedings{A_Shahin_2014,
abstract = {Software as a Service (SaaS) is a new software delivery model in which pre-built applications are delivered to customers as a service. SaaS providers aim to attract a large number of tenants (users) with minimal system modifications to meet economics of scale. To achieve this aim, SaaS applications have to be customizable to meet requirements of each tenant. However, due to the rapid growing of the SaaS, SaaS applications could have thousands of tenants with a huge number of ways to customize applications. Modularizing such customizations still is a highly complex task. Additionally, due to the big variation of requirements for tenants, no single customization model is appropriate for all tenants. In this paper, we propose a multi-dimensional customization model based on metagraph. The proposed mode addresses the modelling variability among tenants, describes customizations and their relationships, and guarantees the correctness of SaaS customizations made by tenants.},
author = {{A. Shahin}, Ashraf},
booktitle = {Computer Science {\&} Information Technology ( {\{}CS{\}} {\&} {\{}IT{\}} )},
doi = {10.5121/csit.2014.4205},
pages = {53--63},
publisher = {Academy {\&} Industry Research Collaboration Center ({\{}AIRCC{\}})},
title = {{Multi-Dimensional Customization Modelling Based on Metagraph for SAAS Multi-Tenant Applications}},
url = {https://doi.org/10.5121{\%}2Fcsit.2014.4205},
year = {2014}
}
@inproceedings{Li_2017,
abstract = {Multi-tenant service customization is one of the core technologies to implement the SaaS multi-tenant software architecture, which can meet the changing needs of individual tenants. In order to broaden the intelligent application of ant colony algorithm in SaaS and improve the service quality and efficiency of SaaS platform, a multi -tenant service customization algorithm based on MapReduce and multi - target ant colony algorithm is proposed. From a number of business processes and mass services, the multi-tenant service customization algorithm sets the most suitable business process and optimized service portfolio for tenants. Multi-tenant service custom algorithm designed multi-target ant colony algorithm, and applied the MapReduce cloud computing technology. In a cloud computing environment, it runs in a distributed and parallel manner to optimize tasks. The results show that the multi - tenant service customization algorithm has a good convergence and expansibility in solving the multi - tenant personalized service customization problem. The algorithm has the ability to handle massive data and large-scale problems.},
author = {Li, Weibo},
booktitle = {Proceedings of the 2nd International Conference on Mechatronics Engineering and Information Technology ({\{}ICMEIT{\}} 2017)},
doi = {10.2991/icmeit-17.2017.75},
publisher = {Atlantis Press},
title = {{Application of Multi-tenant Service Customization Algorithm Based on Multi-target Ant Colony Algorithm in Cloud Platform Software as a Service}},
url = {https://doi.org/10.2991{\%}2Ficmeit-17.2017.75},
year = {2017}
}
@incollection{V_lker_2013,
abstract = {This chapter gives recommendations for selecting, implementing, and operating ERP systems. It is not intended to be a complete guideline for introducing ERP. Instead, the authors indicate special aspects that are important from their point of view. The chapter addresses practitioners who are responsible for selection, implementation, and operations of ERP systems, especially IT and project managers. General process models are given for the two main IT projects of this domain, ERP system selection and ERP system implementation. The main structure of the chapter matches the phases of these projects. The authors' suggestions stretch from project management, business process reengineering, application development, reporting, and customizing to choosing hardware and key users, data migration, and user training. While other publications give rather general advice, recommendations in this chapter are selected to be use-oriented and easy to apply. The recommendations do not depend on any particular ERP system.},
author = {V{\"{o}}lker, Sven and Munkelt, Torsten},
booktitle = {Sociotechnical Enterprise Information Systems Design and Integration},
doi = {10.4018/978-1-4666-3664-4.ch004},
isbn = {9781466636651},
pages = {56--71},
publisher = {{\{}IGI{\}} Global},
title = {{On selection, implementation, and operations of ERP systems}},
url = {https://doi.org/10.4018{\%}2F978-1-4666-3664-4.ch004},
year = {2013}
}
@inproceedings{Kang_2011,
abstract = {In this paper, the conceptual architecture of a SaaS platform that enables executing of configurable and multitenant SaaS application is proposed. Even though most of organizations utilize a standardized SaaS application developed by a SaaS developer, each of tenants would have unique requirements regarding service components. The platform provides several features for configuring these aspects of SaaS software such as organizational structure (role sets and access control), user interface, data model, workflow, and business logic. To satisfy multitenancy of SaaS application, we applied metadata driven architecture proposed by Force.com. The target SaaS platform is composed of the key components that supports SaaS Application execution environment that serves multiple tenant using a single service instance. An example scenario of SaaS software lifecycle is also described to explain how the target platform would be operated from development and deployment of SaaS application to configuration by tenants. {\textcopyright} 2011 IEEE.},
author = {Kang, Sungjoo and Kang, Sungwon and Hur, Sungjin},
booktitle = {Proceedings - 1st ACIS/JNU International Conference on Computers, Networks, Systems, and Industrial Engineering, CNSI 2011},
doi = {10.1109/CNSI.2011.56},
isbn = {9780769544175},
pages = {462--467},
publisher = {IEEE},
title = {{A design of the conceptual architecture for a multitenant SaaS application platform}},
url = {https://doi.org/10.1109{\%}2Fcnsi.2011.56},
year = {2011}
}
@inproceedings{Lin_2009,
abstract = {The ability to deliver different performance levels based on tenant-specific service level agreements (SLAs) is a key requirement for multi-tenant internet applications. However, workload variations and extensive resource sharing among tenants make this goal hard to achieve. We address the issue with a performance regulator based on feedback-control. The regulator has a hierarchical structure, with which a high-level controller manages request admission rates to prevent overloading and a low-level controller manages resource allocation for admitted requests to track a specified level of service differentiation between the cohosted tenants. A prototype implementation of the performance regulator based on Tomcat and MySQL is provided and a multitenant version of RUBBoS benchmark is used for evaluation. Experimental results indicate that the regulator effectively bounds the response time for each tenant while maintaining high resource utilization levels. {\textcopyright} 2009 IEEE.},
author = {Lin, Hailue and Sun, Kai and Zhao, Shuan and Han, Yanbo},
booktitle = {Proceedings of the International Conference on Parallel and Distributed Systems - ICPADS},
doi = {10.1109/ICPADS.2009.22},
isbn = {9780769539003},
issn = {15219097},
pages = {134--141},
publisher = {IEEE},
title = {{Feedback-control-based performance regulation for multi-tenant applications}},
url = {https://doi.org/10.1109{\%}2Ficpads.2009.22},
year = {2009}
}
@inproceedings{Saraswathi_2014,
abstract = {Today's businesses can attain applications on demand using cloud computing. Multi-tenancy is a significant feature of cloud computing in which a single application is shared among multiple tenants. Multi-tenancy offers variety of advantages including cost savings, resource utilization, version control and more. Currently more applications are moved from organization's internal infrastructure to data centers using shared infrastructure that provide Software as a Service (SaaS) to large number of organizations. This paper is devoted to discussing different options for implementing multitenancy such as An Efficient Schema Shared Approach for Cloud Based Multitenant Database with Authentication {\&} Authorization Framework and A Non-Intrusive Multi-Tenant Database For Large Scale Applications. Finally analyze the two solution with various factors.},
author = {Saraswathi, M. and Bhuvaneswari, T.},
booktitle = {2014 International Conference on Communication and Network Technologies, ICCNT 2014},
doi = {10.1109/CNT.2014.7062719},
isbn = {9781479962662},
keywords = {Multi-tenancy,Software as a service,resource utilization},
pages = {27--32},
publisher = {IEEE},
title = {{Multitenant SaaS model of cloud computing: Issues and solutions}},
url = {https://doi.org/10.1109{\%}2Fcnt.2014.7062719},
volume = {2015-March},
year = {2015}
}
@article{Parthasarathy_2016,
abstract = {Enterprise Resource Planning (ERP) packages developed by ERP vendors are designed not only to standardize the existing business processes of the implementing organization, but also to bring in some of the best practices of the industry. There are many past studies on the assessment of the efficiency of standard ERP projects; however, to date no research has been conducted to assess the efficiency of ERP packages from the point of view of customization. Assessing the efficiency of customized ERP packages is vital for benchmarking best customization practices. In this study we examine the efficiency of customized ERP packages using Data Envelopment Analysis (DEA). We also examine the relationship between the degree of customization of ERP packages and their efficiency. Data was collected from an IT vendor who had deployed ERP package in 12 educational institutions. The results suggest that customization adversely affects the efficiency of ERP packages. We also discuss the implications of the results for research and practice.},
author = {Parthasarathy, Sudhaman and Sharma, Srinarayan},
doi = {10.1016/j.compind.2016.05.004},
issn = {01663615},
journal = {Computers in Industry},
keywords = {Customization,Data Envelopment Analysis (DEA),Efficiency,Enterprise Resource Planning (ERP),Software productivity},
pages = {19--27},
publisher = {Elsevier {\{}BV{\}}},
title = {{Efficiency analysis of ERP packages - A customization perspective}},
url = {https://doi.org/10.1016{\%}2Fj.compind.2016.05.004},
volume = {82},
year = {2016}
}
@inproceedings{Truyen_2012,
abstract = {Software-as-a-Service (SaaS) applications are multi-tenant software applications that are delivered as highly configurable web services to individual customers, which are called tenants in this context. For reasons of complexity management and to lower maintenance cost, SaaS providers maintain and deploy a single version of the application code for all tenants. As a result, however, custom-made extensions for individual tenants cannot be efficiently integrated and managed. In this paper we show that by using a context-oriented programming model, cross-tier tenant-specific software variations can be easily integrated into the single-version application code base. Moreover, the selection of which variations to execute can be configured on a per tenant basis. Concretely, we provide a technical case study based on Google App Engine (GAE), a cloud platform for building multi-tenant web applications. We contribute by showing: (a) how ContextJ, a context-oriented programming (COP) language, can be used with GAE, (b) the increase in flexibility and customizability of tenant-specific software variations using ContextJ as compared to Google's dependency injection framework Guice, and (c) that the performance of using ContextJ is comparable to Guice. Based on these observations, we come to the conclusion that COP can be helpful for providing software variations in SaaS. {\textcopyright} 2012 ACM.},
author = {Truyen, Eddy and Cardozo, Nicol{\'{a}}s and Walraven, Stefan and Vallejos, Jorge and Bainomugisha, Engineer and G{\"{u}}nther, Sebastian and D'Hondt, Theo and Joosen, Wouter},
booktitle = {Proceedings of the ACM Symposium on Applied Computing},
doi = {10.1145/2245276.2245358},
isbn = {9781450308571},
keywords = {context-oriented programming,customization,google app engine,multi-tenancy,software-as-a-Service},
pages = {418--425},
publisher = {{\{}ACM{\}} Press},
title = {{Context-oriented programming for customizable SaaS applications}},
url = {https://doi.org/10.1145{\%}2F2245276.2245358},
year = {2012}
}
@inproceedings{Hansbauer_2015,
abstract = {Quality assurance in software development cannot exist without software testing. Developers and dev teams often deal with incompatibility issues, because of the fact that they do not have access to every single environment to test their software on. This article will discuss one specific solution for automated testing via virtualization in the cloud and highlight its usage for real-world application.},
author = {Hansbauer, Georg},
booktitle = {2015 IEEE 8th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2015 - Proceedings},
doi = {10.1109/ICSTW.2015.7107419},
isbn = {9781479918850},
keywords = {Automatisation,JUnit,Selenium,SikuliX,Virtualisation},
publisher = {IEEE},
title = {{Automated testing in the cloud: Test infrastructure management with SaaS}},
url = {https://doi.org/10.1109{\%}2Ficstw.2015.7107419},
year = {2015}
}
@article{Clegg_2017,
abstract = {This paper aims to: (1) pr{\'{e}}cis the extant literature on servitization and enterprization transformations, focusing on the role of information technology (IT) and information systems (IS) and their inter-relationships; (2) illustrate these interrelationships by showing how a small-to-medium-sized enterprise (SME) can move from being a predominantly independent SME, delivering only products, to become part of a multi-organisation enterprise able to deliver product-service solutions; and (3) provide generic learning by proposing a new integrated business transformation model. The methodology used is abductive action research. A literature review is conducted to provide academically grounded themes to inform and interpret practical actions. An empirical case study is conducted with a UK SME from the construction industry that provides empirical data to illustrate a business transformation. Inductive reasoning is used to propose a new integrated transformation model. Findings show that enterprization and servitization transformation themes are highly interdependent and co-implementable when an IT/IS focus is taken. Furthermore, these transformations can be used as part of a successful strategy for growth by an SME. A new operating structure, labelled a product-service enterprise (PSE), is proposed as part of a business transformation model to assist future deliveries of product-service solutions (PSSns). Actions and findings are based on a single empirical case abducted with academic themes. Whilst it is probable that the themes and actions have contributed towards the organization's successful growth, no absolute deterministic causality is claimed.},
author = {Clegg, Ben and Little, Paul and Govette, Steve and Logue, Joel},
doi = {10.1016/j.ijpe.2017.01.012},
issn = {09255273},
journal = {International Journal of Production Economics},
keywords = {action research,enterprise systems (ES),enterprization,multi-organisation enterprise (MOE),product–service system (PSS),servitization},
pages = {81--91},
publisher = {Elsevier {\{}BV{\}}},
title = {{Transformation of a small-to-medium-sized enterprise to a multi-organisation product-service solution provider}},
url = {https://doi.org/10.1016{\%}2Fj.ijpe.2017.01.012},
volume = {192},
year = {2017}
}
@article{K_rner_1954,
author = {K{\"{o}}rner, S.},
doi = {10.1017/s0031819100054863},
issn = {0031-8191},
journal = {Philosophy},
month = {jul},
number = {110},
pages = {271--271},
publisher = {Cambridge University Press ({\{}CUP{\}})},
title = {{Introduction to Logic. By Irving M. Copi. (The Macmillan Company, New York. Pp. 472. Price {\$}4.00.)}},
url = {https://doi.org/10.1017{\%}2Fs0031819100054863},
volume = {29},
year = {1954}
}
@inproceedings{Shi_2009,
abstract = {With the rapid development of Internet and the gradual maturity of SOA, SaaS has become a popular software service mode. This paper proposes a flexible business process customization framework to solve problems caused by orchestrating SaaS business process through BPEL specifications. The framework is fully independent of BPEL engine and web services, which can realize a series of functions as following: enabling the tenant to customize service and process during defining process, verifying and checking the correctness of process logic while deploying process, modifying dynamically, substituting services and handling abnormal situations according to the rules provided by tenants or the framework automatically at the runtime of process. {\textcopyright} 2009 IEEE.},
author = {Yuliang, Shi and Shuai, Luan and Qingzhong, Li and Haiyang, Wang},
booktitle = {2009 WASE International Conference on Information Engineering, ICIE 2009},
doi = {10.1109/ICIE.2009.226},
isbn = {9780769536798},
keywords = {BPEL,Customization,SOA,SaaS,Single-instance multi-tenancy},
month = {jul},
pages = {350--353},
publisher = {IEEE},
title = {{A flexible business process customization framework for SaaS}},
url = {https://doi.org/10.1109{\%}2Ficie.2009.226},
volume = {2},
year = {2009}
}
@incollection{M_ller_2009,
abstract = {Since the emerge of Salesforce.com, more and more business applications tend to move towards Software as a Service. In order to target Small and Medium-sized Enterprises, platform providers need to lower their operational costs and establish an ecosystem of partners, customizing their generic solution, to push their products into spot markets. This paper categorizes customization options, identifies cornerstones of a customizable, multi-tenancy aware infrastructure, proposes a framework that encapsulates multi-tenancy, and introduces a technique for partner back-end customizations with regard to a given real-world scenario. {\textcopyright} 2009 Springer Berlin Heidelberg.},
author = {M{\"{u}}ller, J{\"{u}}rgen and Kr{\"{u}}ger, Jens and Enderlein, Sebastian and Helmich, Marco and Zeier, Alexander},
booktitle = {Lecture Notes in Business Information Processing},
doi = {10.1007/978-3-642-01347-8_6},
isbn = {9783642013461},
issn = {18651348},
keywords = {Design,Enterprise resource planning,Multi-tenancy,Software as a service},
pages = {66--77},
publisher = {Springer Berlin Heidelberg},
title = {{Customizing enterprise software as a service applications: Back-end extension in a multi-tenancy environment}},
url = {https://doi.org/10.1007{\%}2F978-3-642-01347-8{\_}6},
volume = {24 LNBIP},
year = {2009}
}
@incollection{Wang_2013,
abstract = {Traditional service composition approaches face the significant challenge of how to deal with massive individualized requirements. Such challenges include how to reach a tradeoff between one generalized solution and multiple customized ones and how to balance the costs and benefits of a composition solution(s). Service network is a feasible method to cope with these challenges by interconnecting distributed services to form a dynamic network that operates as a persistent infrastructure, and satisfies the massive individualized requirements of many customers. When a requirement arrives, the service network is dynamically customized and transformed into a specific composite solution. In such way, mass requirements are fulfilled cost-effectively. The conceptual architecture and the mechanisms of facilitating mass customization are presented in this paper, and a competency assessment framework is proposed to evaluate its mass customization and cost-effectiveness capacities},
author = {Wang, Zhongjie and Xu, Xiaofei and Wang, Xianzhi},
booktitle = {Lecture Notes in Business Information Processing},
doi = {10.1007/978-3-642-36796-0_15},
isbn = {9783642367953},
issn = {18651348},
keywords = {Competency assessment,Costeffectiveness,Mass customization,Service composition,Service network},
pages = {172--185},
publisher = {Springer Berlin Heidelberg},
title = {{Mass customization oriented and cost-effective service network}},
url = {https://doi.org/10.1007{\%}2F978-3-642-36796-0{\_}15},
volume = {144},
year = {2013}
}
@incollection{2013,
author = {Shelton, Ted},
booktitle = {Business Models for the Social Mobile Cloud},
doi = {10.1002/9781118555910.ch4},
pages = {45--50},
publisher = {John Wiley {\&} Sons, Inc.},
title = {{Plug Yourself into the Cloud}},
url = {https://doi.org/10.1002{\%}2F9781118555910.ch4},
year = {2013}
}
@inproceedings{Brehm,
abstract = {The IS literature distinguishes between custom-built and off-the-shelf software. Enterprise resource planning (ERP) packages are often viewed as off-the-shelf software, because adopters implement them by setting parameters (called configuration), rather than by traditional programming. Making changes to ERP software code (called modification) is usually strongly discouraged by vendors and implementation consultants. Nevertheless, field research has shown that many companies have had to modify ERP software in various ways to meet essential business needs. This suggests that ERP packages do not fit cleanly into the custom/off-the-shelf distinction. In this paper, we describe a portfolio of tailoring options between configuration and modification, with important implications for implementation risk and the difficulty of ERP system upgrades. We discuss the implications of our framework for practitioners and for further research on ERP systems.},
author = {Brehm, Lars and Heinzl, Armin and Markus, M. Lynne},
booktitle = {Proceedings of the Hawaii International Conference on System Sciences},
doi = {10.1109/HICSS.2001.927130},
issn = {10603425},
keywords = {Configuration,Customization,ERP package,ERP system,Modification,Software package,Tailoring},
pages = {215},
publisher = {{\{}IEEE{\}} Comput. Soc},
title = {{Tailoring ERP systems: A spectrum of choices and their implications}},
url = {https://doi.org/10.1109{\%}2Fhicss.2001.927130},
year = {2001}
}
@article{Araujo_2013,
abstract = {Software-as-a-Service (SaaS) is a viable option for some companies bearing their business processes. There is a considerable adoption rate, with companies already using more than two services for over two years. However, while some companies have plans to put more business processes supported by these services in the near future, others do not know if they will. They have several concerns regarding the software providers service level. These concerns are mainly technical and functional issues, service availability and payment models. There are major changes compared to the traditional software that have implications on how the software is developed and made available to the users. The existing research addresses specific aspects and few studies give a broader view of the implications of SaaS for anyone who develops and provides software, and also for those who consumes it as an end user. What are the real needs of the Portuguese market? What fears and what is being done to mitigate them? Where should we focus our attention related to the SaaS offering in order to create more value? Thus, to analyze these questions four exploratory case studiesare used to assess the possible implications of SaaS on software developers or software providers based in Portugal and also on end-users. This article appears in the context of a realistic and deep research that includes the involvement of managers, leaders and decision makers of Portuguese companies, to realize what actually constitutes a problem in SaaS and what effectively companies would like to have available in this offer. The results of this study reveal that SaaS effectively constitutes a very interesting and solid solution for the development of Portuguese companies, however there is a lack for greater efforts particularly in terms of customization for each customer (tenant) and integration with the back-end on-premise applications.},
author = {Araujo, Virginia Maria and Vazquez, Jose Ayude},
doi = {10.5121/ijfcst.2013.3601},
journal = {International Journal in Foundations of Computer Science {\&} Technology},
month = {nov},
number = {6},
pages = {1--14},
publisher = {Academy and Industry Research Collaboration Center ({\{}AIRCC{\}})},
title = {{Business and Technical Requirements of Software-As-A-Service: Implications in Portuguese Enterprise Business Context}},
url = {https://doi.org/10.5121{\%}2Fijfcst.2013.3601},
volume = {3},
year = {2013}
}
@article{Lee_2013,
abstract = {To overcome the problem of limited resources, increasing numbers of small- and medium-sized companies (SMEs) are adopting "Software-as-a-service" (Saas) as an efficient tool for IS implementation. The balanced scorecard (BSC) has been adopted by SMEs to evaluate Saas via four measures: learning and growth, internal business processes, customer performance, and financial performance. The survey results for 101 Software-as-a-service adopters indicate that learning and growth, internal business processes, and customer performance are causally related to financial performance. The results show that these four key elements for Saas success are interrelated, supporting the core premise of the BSC. {\textcopyright} 2013 Elsevier B.V.},
author = {Lee, Sangjae and Park, Sung Bum and Lim, Gyoo Gun},
doi = {10.1016/j.im.2013.07.006},
issn = {03787206},
journal = {Information and Management},
keywords = {Balanced scorecard (BSC),Causal relationships,Software-as-a-service (Saas)},
month = {nov},
number = {7},
pages = {553--561},
publisher = {Elsevier {\{}BV{\}}},
title = {{Using balanced scorecards for the evaluation of "software-as-a- service"}},
url = {https://doi.org/10.1016{\%}2Fj.im.2013.07.006},
volume = {50},
year = {2013}
}
@article{Rothenberger_2009,
abstract = {This research investigates why certain enterprise resource planning (ERP) system adopters have pursued high levels of software customization during implementation despite the generally accepted best-practice heuristic of limiting customization. Qualitative data from ERP adoption projects and consultants working with ERP implementations have been collected. This study empirically identifies customization drivers and explains their relationship to customization. The results suggest that high customization may occur because of: unnecessary redevelopment of functionality that is available in the ERP system standard, resistance to change based on cultural issues and low project acceptance, insufficient weight given to the implementation team's recommendations, and the implementation team's lack of opposition to customization requests. The results of this study also explain how these problems occur and why they lead to overcustomization. {\textcopyright} 2009 IEEE.},
author = {Rothenberger, Marcus A. and Srite, Mark},
doi = {10.1109/TEM.2009.2028319},
issn = {00189391},
journal = {IEEE Transactions on Engineering Management},
keywords = {Case study,Enterprise resource planning (ERP),Qualitative study,Success factors,System customization},
month = {nov},
number = {4},
pages = {663--676},
publisher = {Institute of Electrical and Electronics Engineers ({\{}IEEE{\}})},
title = {{An investigation of customization in ERP system implementations}},
url = {https://doi.org/10.1109{\%}2Ftem.2009.2028319},
volume = {56},
year = {2009}
}
@article{Scimago_2007,
author = {Scimago, Grupo},
doi = {10.3145/epi.2007.nov.11},
issn = {16992407},
journal = {Profesional de la Informacion},
month = {jan},
number = {6},
pages = {645--646},
publisher = {Ediciones Profesionales de la Informacion {\{}SL{\}}},
title = {{SCImago journal {\&} country rank: Un nuevo portal, dos nuevos rankings}},
url = {https://doi.org/10.3145{\%}2Fepi.2007.nov.11},
volume = {16},
year = {2007}
}
@inproceedings{Tsai_2014,
abstract = {Multi-tenancy architecture (MTA) is often used in Software-as-a-Service (SaaS) and the central idea is that multiple tenant applications can be developed using components stored in the SaaS infrastructure. Recently, MTA has been extended where a tenant application can have its own sub-tenants as the tenant application acts like a SaaS infrastructure. In other words, MTA is extended to STA (Sub-Tenancy Architecture). In STA, each tenant application not only needs to develop its own functionalities, but also needs to prepare an infrastructure to allow its sub-tenants to develop customized applications. This paper formulates eight models for STA, and discusses their trade-offs including their formal notations and application scenarios. {\textcopyright} 2014 IEEE.},
author = {Tsai, Wei Tek and Zhong, Peide},
booktitle = {Proceedings - IEEE 8th International Symposium on Service Oriented System Engineering, SOSE 2014},
doi = {10.1109/SOSE.2014.20},
isbn = {9781479925049},
keywords = {Multi-Tenancy Architecture,SaaS,Sub-Tenancy Architecture},
pages = {128--139},
publisher = {IEEE},
title = {{Multi-tenancy and sub-tenancy architecture in software-as - A-service (SaaS)}},
url = {https://doi.org/10.1109{\%}2Fsose.2014.20},
year = {2014}
}
@inproceedings{Shi_2009,
abstract = {Software as a Service (SaaS) has become a popular software service mode. Tenants can access SaaS application via the web and essentially rent the application from SaaS provider. This paper proposes a flexible, multi-tenant oriented business process customization system to resolve the problem caused by orchestrating SaaS business process base on BPEL. The system includes kernel framework, resource layer and execution environment. It enables multi-tenant to customize services and processes during defining. When deploying process definition into process engine, the system is also able to verify the correctness of process logic. At the runtime of process, the system can dynamically modify or substitute the service or handle abnormal situation automatically according to the rules provided by tenant or system. {\textcopyright} 2009 IEEE.},
author = {Shi, Yuliang and Luan, Shuai and Li, Qingzhong and Wang, Haiyang},
booktitle = {Proceedings - 2009 International Conference on New Trends in Information and Service Science, NISS 2009},
doi = {10.1109/NISS.2009.181},
isbn = {9780769536873},
keywords = {BPEL,Customization,SOA,SaaS,Single-instance multi-tenancy},
month = {jun},
pages = {319--324},
publisher = {IEEE},
title = {{A multi-tenant oriented business process customization system*}},
url = {https://doi.org/10.1109{\%}2Fniss.2009.181},
year = {2009}
}
@article{Benlian_2009,
abstract = {Software-as-a-Service (SaaS) is said to become an important cornerstone of the Internet of Services. However, while some market research and IT provider firms fervently support this point of view, others already conjure up the failure of this on-demand sourcing option. Oftentimes based on weak empirical data and shaky reasoning, these inconsistent perspectives lack scientific rigor and neglect to present a more differentiated picture of SaaS-adoption. This study seeks to deepen the understanding of factors driving the adoption of Software-as-a-Service (SaaS). Grounded in transaction cost theory, the resource-based view, and the theory of planned behavior, we develop a research model to assess SaaS-adoption at the application level. Survey data of 297 firms in Germany with 374 valid response items across different industries were collected to test the theoretical model. Our analysis revealed that patterns on the decision on SaaS-adoption differ across application types. Social influence, attitude toward SaaS-adoption, adoption uncertainty, and strategic value turned out to be the strongest and most consistent drivers across all application types. Furthermore, we found that firm size does not matter in SaaS-adoption, since large enterprises and small- and medium-sized companies had similar adoption rates. Overall, this study provides relevant findings that IT vendors can use to better appeal to potential companies that consider adopting SaaS.},
author = {Benlian, Alexander and Hess, Thomas and Buxmann, Peter},
doi = {10.1007/s12599-009-0068-x},
issn = {1867-0202},
journal = {Business {\&} Information Systems Engineering},
number = {5},
pages = {357--369},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Drivers of SaaS-Adoption – An Empirical Study of Different Application Types}},
url = {https://doi.org/10.1007{\%}2Fs12599-009-0068-x},
volume = {1},
year = {2009}
}
@article{Fan_2015,
abstract = {Software as a Service (SaaS) has recently emerged as one of the most popular service delivery models in cloud computing. The number of SaaS services and their users is continuously increasing and new SaaS service providers emerge on a regular basis. As users are exposed to a wide range of SaaS services, they may soon become more demanding when receiving/consuming such services. Similar to the web and/or mobile applications, personalization can play a critical role in modern SaaS-based cloud services. This paper introduces a fully designed, cloud-enabled personalization framework to facilitate the collection of preferences and the delivery of corresponding SaaS services. The approach we adapt in the design and development of the proposed framework is to synthesize various models and techniques in a novel way. The objective is to provide an integrated and structured environment wherein SaaS services can be provisioned with enhanced personalization quality and performance.},
author = {Fan, Haolong and Hussain, Farookh Khadeer and Younas, Muhammad and Hussain, Omar Khadeer},
doi = {10.1016/j.future.2015.05.011},
issn = {0167739X},
journal = {Future Generation Computer Systems},
keywords = {Cloud computing,Cloud service,Personalization,Recommendation engine,SaaS,Semantic web},
pages = {157--173},
publisher = {Elsevier {\{}BV{\}}},
title = {{An integrated personalization framework for SaaS-based cloud services}},
url = {https://doi.org/10.1016{\%}2Fj.future.2015.05.011},
volume = {53},
year = {2015}
}
@inproceedings{Bakshi_2011,
abstract = {Cloud computing is one of the fastest growing opportunities for enterprises and service providers. Enterprises use the Infrastructure-as-a-service (IaaS) model to build private clouds, and virtual private clouds that reduce operating and capital expenses and increase the agility and reliability of their critical information systems. Service providers build public clouds to offer on-demand, secure, multi-tenant, pay-per-use IT infrastructure to businesses and government agencies that use cloud services to offload, or augment, their internal resources using a public cloud infrastructure. This paper starts with the cloud taxonomy and model overview. Then the paper describes the Cloud framework and architecture, with characteristics of virtualization and multi-tenancy to build an end-to-end IaaS cloud-computing infrastructure. Logical building blocks for cloud data centers including the virtualized network, compute, and storage resources, which are overlaid with Service orchestration, modular approach and service differentiation elements. The paper also describes phases of adoption of cloud data center by an enterprise. {\textcopyright} 2011 IEEE.},
author = {Bakshi, Kapil},
booktitle = {IEEE Aerospace Conference Proceedings},
doi = {10.1109/AERO.2011.5747554},
isbn = {9781424473502},
issn = {1095323X},
month = {mar},
publisher = {IEEE},
title = {{Considerations for cloud data centers: Framework, architecture and adoption}},
url = {https://doi.org/10.1109{\%}2Faero.2011.5747554},
year = {2011}
}
@inproceedings{Sun_2008,
abstract = {Software as a Serivce(SaaS) provides software application vendors a Web based delivery model to serve big amount of clients with multi-tenancy based infrastructure and application sharing architecture so as to get great benefit from the economy of scale. Though SaaS application is usually developed with highly standardized software functionalities to serve as many clients as possible, many clients still ask for function variants according to their unique business needs through easy configuration and customization. Due to the subscription based model, SaaS vendors need take a well designed strategy to enable self serve configuration and customization by their customers without changing the SaaS application source code for any individual customer. In this paper, we will explore the configuration and customization issues and challenges to SaaS vendors, clarify the difference between configuration and customization. A competency model and a methodology framework have been developed to help SaaS vendors to plan and evaluate their capabilities and strategies for service configuration and customization. {\textcopyright} 2008 IEEE.},
author = {Sun, Wei and Zhang, Xin and Guo, Chang Jie and Sun, Pei and Su, Hui},
booktitle = {Proceedings - 2008 IEEE Congress on Services, SERVICES 2008},
doi = {10.1109/SERVICES-2.2008.29},
isbn = {9780769532868},
pages = {18--24},
publisher = {IEEE},
title = {{Software as a service: Configuration and customization perspectives}},
url = {https://doi.org/10.1109{\%}2Fservices-2.2008.29},
volume = {PART2},
year = {2008}
}
@article{Haines_2009,
abstract = {From a strategic alignment standpoint, a clear link is desirable between strategic business goals and the specialization of business assets. The customization of an Enterprise System can be viewed as a specialization of an IT related business asset. Its customization should be driven by these strategic business goals. However, the implementation realities frequently tell a different story. Customizations are often not linked to strategic business goals and at times even run counter to these goals. Experiences have shown that these gaps can be costly and have severe business implications. Thus, it is important to understand how these discrepancies can occur, and subsequently, how to develop approaches to avoid unnecessary customizations. This qualitative study explores key influences on customizations in five major Enterprise System implementations. The analysis of the qualitative data collected in this study reveals key influence factors with their direct, as well as their indirect impacts on customization. The article further discusses how some of these influences can be leveraged by IT managers to guide customizations in a desirable direction. {\textcopyright} Taylor {\&} Francis Group, LLC.},
author = {Haines, Marc N.},
doi = {10.1080/10580530902797581},
issn = {10580530},
journal = {Information Systems Management},
keywords = {Case study,Customization,Enterprise Systems (ERP),Strategic alignment},
number = {2},
pages = {182--198},
publisher = {Informa {\{}UK{\}} Limited},
title = {{Understanding enterprise system customization: An exploration of implementation realities and the key influence factors}},
url = {https://doi.org/10.1080{\%}2F10580530902797581},
volume = {26},
year = {2009}
}
@incollection{Sun_2007,
abstract = {Software as a Service (SaaS) is gaining momentum in recent years with more and more successful adoptions. Though SaaS is delivered over Internet and charged on per-use basis, it is software application in essence. SaaS contains business data and logics which are usually required to integrate with other applications deployed by a SaaS subscriber. This makes Integration become one of the common requirements in most SaaS adoptions. In this paper, we analyze the key functional and non-functional SaaS integration requirements from an industry practitioner point of view; and summarize the SaaS integration patterns and existing offerings; then point out the gaps from both technology and tooling perspectives; finally we introduce a SaaS integration framework to address those gaps. Considering there is no much academic work on SaaS service modeling, we come up with a SaaS service description framework as an extension of Web Service description, so as to model SaaS unique features in a unified way. With the supported tooling and runtime platform, the framework can facilitate the SaaS integration lifecycle in a model-driven approach. {\textcopyright} Springer-Verlag Berlin Heidelberg 2007.},
author = {Sun, Wei and Zhang, Kuo and Chen, Shyh Kwei and Zhang, Xin and Liang, Haiqi},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-540-74974-5_52},
isbn = {9783540749738},
issn = {03029743},
pages = {558--569},
publisher = {Springer Berlin Heidelberg},
title = {{Software as a service: An integration perspective}},
url = {https://doi.org/10.1007{\%}2F978-3-540-74974-5{\_}52},
volume = {4749 LNCS},
year = {2007}
}
@incollection{Resciniti_2013,
abstract = {The governance issues and trajecttories of growth The vital network of inter-organizational relationships The dynamic focus strategies The new value chain of mid-sized Italian companies Competing in international markets The mid-sized company and the new global economic context},
author = {Resciniti, Riccardo and Tunisini, Annalisa},
booktitle = {Sxi {\{}$\backslash$textemdash{\}} Springer per l'Innovazione / Sxi {\{}$\backslash$textemdash{\}} Springer for Innovation},
doi = {10.1007/978-88-470-2589-9_4},
pages = {75--136},
publisher = {Springer Milan},
title = {{Virtuous business models for international competitiveness}},
url = {https://doi.org/10.1007{\%}2F978-88-470-2589-9{\_}4},
year = {2013}
}
@inproceedings{Anjum_2012,
abstract = {Context: Service Oriented Architecture (SOA) has formed the basis for many workshops, conferences and books. However these do not always seem to have used a consistent set of concepts. Objectives: To identify the key characteristics of an SOA as identified from the literature. Method: We report on our experience of undertaking a mapping study (a form of systematic literature review) to identify the different definitions of SOA being used in the literature. Results: We found 921 candidate studies, of which only 98 were explicit about the definitions of SOA that were used. Conclusion: We have demonstrated that a mapping study can be usefully employed to identify inconsistencies and help to create a model of SOA.},
author = {Anjum, Maria and Budgen, David},
booktitle = {IET Seminar Digest},
doi = {10.1049/ic.2012.0008},
isbn = {9781849195416},
number = {1},
pages = {57--61},
publisher = {IET},
title = {{A mapping study of the definitions for service oriented architecture}},
url = {https://doi.org/10.1049{\%}2Fic.2012.0008},
volume = {2012},
year = {2012}
}
@article{Espadas_2013,
abstract = {Cloud computing provides on-demand access to computational resources which together with pay-per-use business models, enable application providers seamlessly scaling their services. Cloud computing infrastructures allow creating a variable number of virtual machine instances depending on the application demands. An attractive capability for Software-as-a-Service (SaaS) providers is having the potential to scale up or down application resources to only consume and pay for the resources that are really required at some point in time; if done correctly, it will be less expensive than running on regular hardware by traditional hosting. However, even when large-scale applications are deployed over pay-per-use cloud high-performance infrastructures, cost-effective scalability is not achieved because idle processes and resources (CPU, memory) are unused but charged to application providers. Over and under provisioning of cloud resources are still unsolved issues. Even if peak loads can be successfully predicted, without an effective elasticity model, costly resources are wasted during nonpeak times (underutilization) or revenues from potential customers are lost after experiencing poor service (saturation). This work attempts to establish formal measurements for under and over provisioning of virtualized resources in cloud infrastructures, specifically for SaaS platform deployments and proposes a resource allocation model to deploy SaaS applications over cloud computing platforms by taking into account their multi-tenancy, thus creating a cost-effective scalable environment. {\textcopyright} 2011 Elsevier B.V. All rights reserved.},
author = {Espadas, Javier and Molina, Arturo and Jim{\'{e}}nez, Guillermo and Molina, Mart{\'{i}}n and Ram{\'{i}}rez, Ra{\'{u}}l and Concha, David},
doi = {10.1016/j.future.2011.10.013},
issn = {0167739X},
journal = {Future Generation Computer Systems},
keywords = {Cloud computing,Multi-tenancy,Resource allocation,Software-as-a-Service,Virtualized resources},
month = {jan},
number = {1},
pages = {273--286},
publisher = {Elsevier {\{}BV{\}}},
title = {{A tenant-based resource allocation model for scaling Software-as-a-Service applications over cloud computing infrastructures}},
url = {https://doi.org/10.1016{\%}2Fj.future.2011.10.013},
volume = {29},
year = {2013}
}
@inproceedings{Takahashi_2016,
author = {Takahashi, Harutaka and Nakada, Ruri and Konagai, Nobutoshi},
booktitle = {Proc. 14th Int. Conf. on Global Research and Education, Inter-Academia 2015},
doi = {10.7567/jjapcp.4.011402},
pages = {011402},
publisher = {Japan Society of Applied Physics},
title = {{Development of evaluation system for automobile corrosion environment}},
url = {https://doi.org/10.7567{\%}2Fjjapcp.4.011402},
year = {2016}
}
@inproceedings{Nitu_2009,
abstract = {In the last few years Software as a Service (SaaS) has changed from curiosity generating concept to an accepted mainstream concept. SaaS has transformed the way software is being delivered to the customer. This transformation has been possible with maturing technologies and the web becoming the primary medium of communication and collaboration. SaaS is a software delivery paradigm where the software is hosted off-premise and delivered via web to a large number of tenants and the mode of payment follows a subscription model. Configurability is one of the keystones to the success of any SaaS software. Configurability allows the single instance multiple tenant model which leads to many benefits both for the customers and the vendors which in turn has led to the acceptance and popularity of SaaS. Configurability in SaaS software aims to provide tenants/customers with a multitude of options and variations using a single code base, such that it is possible for each tenant to have a unique software configuration. How to capture and represent configuration data is an important consideration when designing for configurability in SaaS software. This paper addresses the issue of how to effectively and efficiently support configurability in SaaS software and proposes SaaS architecture to support configurability. A proof of concept implementation is done to support configurability with the configuration data in xml format. The paper aims to provide information on the nature of configurability in SaaS software, how it can be provided and the technologies needed to support it. Copyright 2009 ACM.},
author = {Nitu},
booktitle = {Proceedings of the 2nd India Software Engineering Conference, ISEC 2009},
doi = {10.1145/1506216.1506221},
isbn = {9781605584263},
keywords = {Design,Experimentation},
pages = {19--26},
publisher = {{\{}ACM{\}} Press},
title = {{Configurability in SaaS (software as a service) applications}},
url = {https://doi.org/10.1145{\%}2F1506216.1506221},
year = {2009}
}
@inproceedings{Bezemer_2010,
abstract = {Multi-tenancy is a relatively new software architecture principle in the realm of the Software as a Service (SaaS) business model. It allows to make full use of the economy of scale, as multiple customers - "tenants" - share the same application and database instance. All the while, the tenants enjoy a highly configurable application, making it appear that the application is deployed on a dedicated server. The major benefits of multi-tenancy are increased utilization of hardware resources and improved ease of maintenance, in particular on the deployment side. These benefits should result in lower overall application costs, making the technology attractive for service providers targeting small and medium enterprises (SME). However, as this paper advocates, a wrong architectural choice might entail that multi-tenancy becomes a maintenance nightmare. {\textcopyright} 2010 ACM.},
author = {Bezemer, Cor Paul and Zaidman, Andy},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/1862372.1862393},
isbn = {1595930361},
pages = {88--92},
publisher = {{\{}ACM{\}} Press},
title = {{Multi-tenant SaaS applications: Maintenance dream or nightmare?}},
url = {https://doi.org/10.1145{\%}2F1862372.1862393},
year = {2010}
}
@article{Zheng_2018,
abstract = {This study utilized a systematic review to provide an overall understanding of how academic research can be incorporated into business intelligence (BI) to ensure patient-centeredness (PC). Using the BI maturity model, this study analyzed findings of previous studies from four time periods within the period 2000–2016 to determine how BI can facilitate PC through organization, human-orientation, and technology, as well as other PC-specific conditions. Our results indicate that the number of BI applications that include PC have continued to grow since 2010, and that they primarily focus on the dimensions of organization, humanism, and PC-specific conditions; additionally, we noted that a time-based correlation exists between the related results. This study then explored the extent to which BI supports the subdimensions of PC (e.g., principles, enablers, and activities). Finally, future research focuses and directions were proposed.},
author = {Zheng, Wenzhi and Wu, Yen Chun Jim and Chen, Liangyong},
doi = {10.1016/j.tele.2017.06.015},
issn = {07365853},
journal = {Telematics and Informatics},
keywords = {Business intelligence,Clinician–patient relationship,Health data,Patient involvement,Patient-centeredness,Systematic review},
month = {jul},
number = {4},
pages = {665--676},
publisher = {Elsevier {\{}BV{\}}},
title = {{Business intelligence for patient-centeredness: A systematic review}},
url = {https://doi.org/10.1016{\%}2Fj.tele.2017.06.015},
volume = {35},
year = {2018}
}
@inproceedings{Laatikainen_2014,
abstract = {In the new era of computing, SaaS software with different architectural characteristics might be priced in different ways. Even though both pricing and architectural characteristics are responsible for the success of the offering, the relationship between architectural and pricing characteristics has not been studied before. The present study fills this gap by employing a multi-case research. The findings accentuate that flexible and well-designed architecture enables different pricing models, however, poorly designed architecture limits also the pricing. Scalability and high level of modularity are the major enablers of a great variety of pricing models. Using public cloud services may lead to introducing usage-based pricing or in the contrary, making the pricing simpler. Applying multi-tenancy lowers the customizability, consequently the customers' negotiation power decreases. Pricing may give special requirements to the architectural design, such as scalability, customizability and additional components.},
author = {Laatikainen, Gabriella and Ojala, Arto},
booktitle = {Proceedings - 2014 IEEE International Conference on Services Computing, SCC 2014},
doi = {10.1109/SCC.2014.84},
isbn = {9781479950669},
keywords = {Cloud,Pricing,SaaS,SaaS architecture},
month = {jun},
pages = {597--604},
publisher = {IEEE},
title = {{SaaS architecture and pricing models}},
url = {https://doi.org/10.1109{\%}2Fscc.2014.84},
year = {2014}
}
@inproceedings{Song_2018,
abstract = {Enterprise software needs to be customizable, and the customization needs from a customer are often beyond what the software vendor can predict in advance. In the on-premises era, customers do deep customizations beyond vendor's prediction by directly modifying the vendor's source code and then build and operate it on their own premises. When enterprise software is moving to cloud-based multi-tenant SaaS (Software as a Service), it is no longer possible for customers to directly modify the vendor's source code, because the same instance of code is shared by multiple customers at runtime. Therefore, the question is whether it is still possible to do deep customization on multi-tenant SaaS. In this paper, we give an answer to this question with a novel architecture style to realize deep customization of SaaS using intrusive microservices. We evaluate the approach on an open source online commercial system, and discuss the further research questions to make deep customization applicable in practice.},
author = {Song, Hui and Chauvel, Franck and Solberg, Arnor},
booktitle = {Proceedings - International Conference on Software Engineering},
doi = {10.1145/3183399.3183407},
isbn = {9781450356626},
issn = {02705257},
keywords = {Architecture style,Customization,Multi-tenancy,SaaS},
pages = {97--100},
publisher = {{\{}ACM{\}} Press},
title = {{Deep customization of multi-tenant SaaS using intrusive microservices}},
url = {https://doi.org/10.1145{\%}2F3183399.3183407},
year = {2018}
}
@inproceedings{Aouzal_2015,
abstract = {The Cloud Computing paradigm has enabled the multi-tenancy architectural approach in Cloud applications. In a multi-tenant application, one single instance is shared by many tenants (users). Since each client has its own and particular requirements and context, that are exposed to change in time, the process of realizing customizable and adaptable services becomes complex and difficult to handle. Handling variability has been subject of many research works in the domain of Service Oriented Computing, while less interest was given to variability in Cloud services. Therefore, managing variability in Cloud applications can take benefit from related works in service-oriented computing. In this paper, we present an overview of variability management in Cloud applications, in order to assess the pertinence of the different approaches proposed to tackle this issue.},
author = {Aouzal, Khadija and Hafiddi, Hatim and Dahchour, Mohamed},
booktitle = {Proceedings of 2015 International Conference on Cloud Computing Technologies and Applications, CloudTech 2015},
doi = {10.1109/CloudTech.2015.7336976},
isbn = {9781467381499},
keywords = {Cloud Computing,SOA,SOC,Service,Variability},
month = {jun},
publisher = {IEEE},
title = {{An overview of variability management in cloud services}},
url = {https://doi.org/10.1109{\%}2Fcloudtech.2015.7336976},
year = {2015}
}
@article{Kaiser_1970,
author = {Kaiser, Henry F.},
doi = {10.1007/BF02291817},
issn = {00333123},
journal = {Psychometrika},
number = {4},
pages = {401--415},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{A second generation little jiffy}},
url = {https://doi.org/10.1007{\%}2Fbf02291817},
volume = {35},
year = {1970}
}
@book{2013,
abstract = {One of the challenges in concurrent software development is early discovery of design errors which could lead to deadlocks or race-conditions. For safety-critical and complex distributed applications, traditional testing does not always expose such problems. Performing more rigorous formal analysis typically requires a model, which is an abstraction of the system. For object-oriented software, UML is the industry-adopted modeling language. UML offers a number of views to present the system from different perspectives. Behavioral views are necessary for the purpose of model checking, as they capture the dynamics of the system. Among them are sequence diagrams, in which the interaction between components is modeled by means of message exchanges. UML 2.x includes rich features that enable modeling code-like structures, such as loops, conditions and referring to existing interactions. We present an automatic procedure for translating UML into mCRL2 process algebra models. Our prototype is able to produce a formal model, and feed model-checking traces back into any UML modeling tool, without the user having to leave the UML domain. We argue why previous approaches of which we are aware have limitations that we overcome. We further apply our methodology on the Grid framework used to support production activities of one of the LHC experiments at CERN. {\textcopyright} 2013 Springer-Verlag.},
author = {Remenska, Daniela and Templon, Jeff and Willemse, Tim A C and Homburg, Philip and Verstoep, Kees and Casajus, Adria and Bal, Henri},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-38088-4},
editor = {Brat, Guillaume and Rungta, Neha and Venet, Arnaud},
isbn = {978-3-642-38087-7},
issn = {03029743},
keywords = {UML,formal methods,software engineering},
pages = {244--260},
publisher = {Springer Berlin Heidelberg},
title = {{NASA Formal Methods}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84883410356{\&}partnerID=tZOtx3y1},
volume = {7871},
year = {2013}
}
@inproceedings{Kitchenham_2006,
abstract = {OBJECTIVE – The objective of this paper is to determine under what circumstances individual organisations would be able to rely on cross-company based estimation models. METHOD – We performed a systematic review of studies that compared predictions from cross-company models with predictions from within-company models based on analysis of project data. RESULTS – Ten papers compared cross-company and within-company estimation models, however, only seven of the papers presented independent results. Of those seven, three found that cross-company models were as good as within-company models, four found cross-company models were significantly worse than within-company models. Experimental procedures used by the studies differed making it impossible to undertake formal meta-analysis of the results. The main trend distinguishing study results was that studies with small single company data sets (i.e. {\textless}20 projects) that used leave-one-out cross-validation all found that the within-company model was significantly more accurate than the cross-company model. CONCLUSIONS – The results of this review are inconclusive. It is clear that some organisations would be ill-served by cross-company models whereas others would benefit. Further studies are needed, but they must be independent (i.e. based on different data bases or at least different single company data sets). In addition, experimenters need to standardise their experimental procedures to enable formal meta-analysis.},
author = {Kitchenham, Barbara and Mendes, Emilia and Travassos, Guilherme H.},
doi = {10.14236/ewic/ease2006.10},
publisher = {{\{}BCS{\}} Learning {\&} Development},
title = {{A Systematic Review of Cross- vs. Within-Company Cost Estimation Studies}},
url = {https://doi.org/10.14236{\%}2Fewic{\%}2Fease2006.10},
year = {2006}
}
@incollection{Sharma_2014,
abstract = {This chapter presents the results of a systematic review from existing literature in software engineering for cloud-based applications and describes what the research community thinks about the effects of introducing cloud computing into a software development process. In this systematic review, the authors describe the challenges cloud computing poses for software development. They particularly investigate whether agile methodologies are beneficial or not in developing software that will be deployed in the cloud. In their results, they found that industry practitioners in their blogs and self-reported reviews indicate that agile development and cloud computing goes well together and that further investigation is required to confirm this claim.},
author = {Sharma, Abhishek and Maurer, Frank},
booktitle = {Software Design and Development: Concepts, Methodologies, Tools, and Applications},
doi = {10.4018/978-1-4666-4301-7.ch001},
isbn = {9781466643024},
pages = {1--16},
publisher = {{\{}IGI{\}} Global},
title = {{A roadmap for software engineering for the cloud: Results of a systematic review}},
url = {https://doi.org/10.4018{\%}2F978-1-4666-4301-7.ch001},
volume = {1-4},
year = {2013}
}
@inproceedings{Van_Outvorst_2018,
abstract = {Many organizations are striving for a structural and professional approach toward business information management (BIM). With help of BiSL they can shape the BIM responsibilities and processes, but they struggle with the required capacity for the BIM activities necessary for their particular situation. Therefore, research was started to develop an instrument to determine the required capacity of the BIM activities in an organization. In this paper the construction of the instrument will be described. A limited set of factors may be of importance to identify the required capacity of BIM activities that is needed: complexity of business processes, complexity of IS/IT, dynamics of the organization and its environment and the size of the organization are examples of relevant factors. However, factors that appear relevant may prove useless in practice due to the fact that organizations have no data on these indicators available. Furthermore, the relationships between the present and desired quality of information and information services are part of the instrument. The instrument was tested in practice to determine the usefulness. The results show that the instrument has the potential to determine the required capacity of BIM.},
author = {van Outvorst, Frank and Meijnen, Mart and Timens, Pascal and Walenbergh, Sjoerd and de Waal, Benny},
booktitle = {31st Bled eConference: Digital Transformation: Meeting the Challenges, BLED 2018},
doi = {10.18690/978-961-286-170-4.37},
isbn = {9789612861704},
keywords = {BiSL Framework,Business IT alignment,Business information management,IS/IT management,Required capacity},
month = {jun},
pages = {531--542},
publisher = {Univerzitetna zalo{\v{z}}ba Univerze v Mariboru / University of Maribor Press},
title = {{Determining the required capacity of business information management: Towards a concise instrument}},
url = {https://doi.org/10.18690{\%}2F978-961-286-170-4.37},
year = {2018}
}
@inproceedings{Bezemer_2010,
abstract = {Multi-tenancy is a relatively new software architecture principle in the realm of the Software as a Service (SaaS) business model. It allows to make full use of the economy of scale, as multiple customers - "tenants" - share the same application and database instance. All the while, the tenants enjoy a highly configurable application, making it appear that the application is deployed on a dedicated server. The major benefits of multi-tenancy are increased utilization of hardware resources and improved ease of maintenance, resulting in lower overall application costs, making the technology attractive for service providers targeting small and medium enterprises (SME). Therefore, migrating existing single-tenant to multi-tenant applications can be interesting for SaaS software companies. In this paper we report on our experiences with reengineering an existing industrial, single-tenant software system into a multitenant one using a lightweight reengineering approach. {\textcopyright} 2010 IEEE.},
author = {Bezemer, Cor Paul and Zaidman, Andy and Platzbeecker, Bart and Hurkmans, Toine and Hart, Aad},
booktitle = {IEEE International Conference on Software Maintenance, ICSM},
doi = {10.1109/ICSM.2010.5609735},
isbn = {9781424486298},
publisher = {IEEE},
title = {{Enabling multi-tenancy: An industrial experience report}},
url = {https://doi.org/10.1109{\%}2Ficsm.2010.5609735},
year = {2010}
}
@inproceedings{Ru_2013,
abstract = {Background: Given the dynamics in resource allocation schemes offered by cloud computing, effective scheduling algorithms are important to utilize these benefits. Aim: In this paper, we propose a scheduling algorithm integrated with task grouping, priority-aware and SJF (shortest-job-first) to reduce the waiting time and make span, as well as to maximize resource utilization. Method: Scheduling is responsible for allocating the tasks to the best suitable resources with consideration of some dynamic parameters, restrictions and demands, such as network restriction and resource processing capability as well as waiting time. The proposed scheduling algorithm is integrated with task grouping, prioritization of bandwidth awareness and SJF algorithm, which aims at reducing processing time, waiting time and overhead. In the experiment, tasks are generated using Gaussian distribution and resources are created using Random distribution as well as CloudSim framework is used to simulate the proposed algorithm under various conditions. Results are then compared with existing algorithms for evaluation. Results: In comparison with existing task grouping algorithms, results show that the proposed algorithm waiting time and processing time decreased significantly (over 30{\%}). Conclusion: The proposed method effectively minimizes waiting time and processing time and reduces processing cost to achieve optimum resources utilization and minimum overhead, as well as to reduce influence of bandwidth bottleneck in communication. {\textcopyright} 2013 IEEE.},
author = {Ru, Jia and Keung, Jacky},
booktitle = {Proceedings of the Australian Software Engineering Conference, ASWEC},
doi = {10.1109/ASWEC.2013.19},
isbn = {9780769549958},
keywords = {Cloud Computing,SJF,Scheduling,Software Metrics,Task Grouping},
month = {jun},
pages = {78--87},
publisher = {IEEE},
title = {{An empirical investigation on the simulation of priority and shortest-job-first scheduling for cloud-based software systems}},
url = {https://doi.org/10.1109{\%}2Faswec.2013.19},
year = {2013}
}
@article{Norton_2008,
author = {Norton, Matthew},
doi = {10.1177/14733250080070030802},
issn = {1473-3250},
journal = {Qualitative Social Work: Research and Practice},
number = {3},
pages = {381--386},
publisher = {{\{}SAGE{\}} Publications},
title = {{Review Essay: Matt Petticrew and Helen Roberts, Systematic Reviews in the Social Sciences: A Practical Guide. Oxford, UK: Blackwell Publishing, 2005. 352 pp. ISBN 978—14051—2110—1 (hbk); ISBN 978—1—4051—2111—8 (pbk)}},
url = {https://doi.org/10.1177{\%}2F14733250080070030802},
volume = {7},
year = {2008}
}
@article{Zhang_2010,
abstract = {Cloud computing has recently emerged as a new paradigm for hosting and delivering services over the Internet. Cloud computing is attractive to business owners as it eliminates the requirement for users to plan ahead for provisioning, and allows enterprises to start from the small and increase resources only when there is a rise in service demand. However, despite the fact that cloud computing offers huge opportunities to the IT industry, the development of cloud computing technology is currently at its infancy, with many issues still to be addressed. In this paper, we present a survey of cloud computing, highlighting its key concepts, architectural principles, state-of-the-art implementation as well as research challenges. The aim of this paper is to provide a better understanding of the design challenges of cloud computing and identify important research directions in this increasingly important area. {\textcopyright} The Brazilian Computer Society 2010.},
author = {Zhang, Qi and Cheng, Lu and Boutaba, Raouf},
doi = {10.1007/s13174-010-0007-6},
issn = {18674828},
journal = {Journal of Internet Services and Applications},
keywords = {Cloud computing,Data centers,Virtualization},
number = {1},
pages = {7--18},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Cloud computing: State-of-the-art and research challenges}},
url = {https://doi.org/10.1007{\%}2Fs13174-010-0007-6},
volume = {1},
year = {2010}
}
@inproceedings{Lewandowski_2013,
abstract = {As more and more organisations move from on-premise to on-demand software solutions in order to minimise overhead costs, the Enterprise Resource Planning (ERP) providers begin to offer their well-established best business processes as cloud based IT solutions. As a result, ERP software previously reserved for large organisations mainly due to heavy costs associated with the initial purchase of the software, its licensing costs and subsequent configuration and maintenance, begins to open up to Small and Medium Enterprises (SMEs). With more and more Software as a Service (SaaS) ERP solutions on the market, SMEs are beginning to consider and implement these solutions as opposed to in-house developed applications, in a bid to offer better customer relationship, gain new markets and increase profits, amongst other benefits. As this study reveals, while deployment model is a key advantage in enabling organisations to minimise costs, certain critical factors as well as some barriers need to be addressed to enable organisations to successfully implement these systems. This paper aims to identify and evaluate common problems experienced in the implementation as well as post-implementation stage of Software as Service ERP systems by Small and Medium Enterprises. Qualitative data was collected from five European and US companies, which implemented SaaS ERP, by means of a set of semi-formal interviews and online questionnaire. {\textcopyright} 2013 IEEE.},
author = {Lewandowski, Jacek and Salako, Adekemi O. and Garcia-Perez, Alexeis},
booktitle = {Proceedings - 2013 IEEE 10th International Conference on e-Business Engineering, ICEBE 2013},
doi = {10.1109/ICEBE.2013.9},
isbn = {9780769551111},
keywords = {Critical success factors,Enterprise resource planning (ERP),SAP,Small and Medium Enterprises (SME),Software as a Service (SaaS)},
pages = {56--61},
publisher = {IEEE},
title = {{SaaS enterprise resource planning systems: Challenges of their adoption in SMEs}},
url = {https://doi.org/10.1109{\%}2Ficebe.2013.9},
year = {2013}
}
@article{Subashini_2011,
abstract = {Cloud computing is a way to increase the capacity or add capabilities dynamically without investing in new infrastructure, training new personnel, or licensing new software. It extends Information Technology's (IT) existing capabilities. In the last few years, cloud computing has grown from being a promising business concept to one of the fast growing segments of the IT industry. But as more and more information on individuals and companies are placed in the cloud, concerns are beginning to grow about just how safe an environment it is. Despite of all the hype surrounding the cloud, enterprise customers are still reluctant to deploy their business in the cloud. Security is one of the major issues which reduces the growth of cloud computing and complications with data privacy and data protection continue to plague the market. The advent of an advanced model should not negotiate with the required functionalities and capabilities present in the current model. A new model targeting at improving features of an existing model must not risk or threaten other important features of the current model. The architecture of cloud poses such a threat to the security of the existing technologies when deployed in a cloud environment. Cloud service users need to be vigilant in understanding the risks of data breaches in this new environment. In this paper, a survey of the different security risks that pose a threat to the cloud is presented. This paper is a survey more specific to the different security issues that has emanated due to the nature of the service delivery models of a cloud computing system. {\textcopyright} 2010 Elsevier Ltd. All rights reserved.},
author = {Subashini, S. and Kavitha, V.},
doi = {10.1016/j.jnca.2010.07.006},
issn = {10848045},
journal = {Journal of Network and Computer Applications},
keywords = {Cloud computing,Data privacy,Data protection,Security,Virtualization},
month = {jan},
number = {1},
pages = {1--11},
publisher = {Elsevier {\{}BV{\}}},
title = {{A survey on security issues in service delivery models of cloud computing}},
url = {https://doi.org/10.1016{\%}2Fj.jnca.2010.07.006},
volume = {34},
year = {2011}
}
@article{Kaltenecker_2015,
abstract = {The software industry faces a fundamental change from delivering software On-premises to delivering software On-demand. Well-established companies have to shift their focus from the (still) profitable On-premises market to an, as yet unprofitable, On-demand market to survive. This requires strategies to handle the transformation process. Based on five case studies and following Christensen's disruptive innovation theory, we learn the successful strategies that software companies can adopt to handle a change from On-premises to On-demand delivery. These strategies include the general ideas that Christensen proposes and separate extensions for the software industry, suggesting an emerging area of IS research.},
author = {Kaltenecker, Natalie and Hess, Thomas and Huesig, Stefan},
doi = {10.1016/j.jsis.2015.08.006},
issn = {09638687},
journal = {Journal of Strategic Information Systems},
keywords = {Cloud computing,Disruptive innovation,Software as a service,Software industry,Transformation strategy},
number = {4},
pages = {234--250},
publisher = {Elsevier {\{}BV{\}}},
title = {{Managing potentially disruptive innovations in software companies: Transforming from On-premises to the On-demand}},
url = {https://doi.org/10.1016{\%}2Fj.jsis.2015.08.006},
volume = {24},
year = {2015}
}
@article{Cotroneo_2016,
abstract = {The analysis of the security alerts collected during the system operations is a crucial task to initiate effective responses against attacks and intentional system misuse. A variety of monitors are today available to generate security alerts, such as intrusion detection systems, network audit, vulnerability scans, and event logs. While the amount of alerts generated by the security monitors represents a goldmine of information, the ever-increasing volume and heterogeneity of the collected alerts pose a major threat to timely security analysis and forensic activities conducted by the operations team. This paper proposes a framework consisting of a filter and a decision tree to address large volumes of security alerts and to support the automated identification of the root causes of the alerts. The framework adopts both term weighting and conceptual clustering approaches to fill the gap between the unstructured textual alerts and the formalization of the decision tree. We evaluated the framework by analyzing two security datasets in a production SaaS Cloud, which generates an average volume of 800 alerts/day. The framework significantly reduced the volume of alerts and inferred the root causes of around 98.8{\%} of alerts with no human intervention with respect to the datasets available in this study. More important, we leveraged the output of the framework to provide a classification of the root causes of the alerts in the target SaaS Cloud.},
author = {Cotroneo, Domenico and Paudice, Andrea and Pecchia, Antonio},
doi = {10.1016/j.future.2015.09.009},
issn = {0167739X},
journal = {Future Generation Computer Systems},
keywords = {Conceptual clustering,Decision tree,Root cause,SaaS Cloud,Security alerts,Term weighting},
month = {mar},
pages = {375--387},
publisher = {Elsevier {\{}BV{\}}},
title = {{Automated root cause identification of security alerts: Evaluation in a SaaS Cloud}},
url = {https://doi.org/10.1016{\%}2Fj.future.2015.09.009},
volume = {56},
year = {2016}
}
@inproceedings{Saleh_2014,
abstract = {Software as a Service (SaaS) providers can serve thousands of customers, which have hundreds of thousands of overlapping requirements, using a single application instance to offer service at a lower price. Even with a potentially large number of customers with varying requirements, a multitenant application should make co-tenancy transparent to the tenants, which means that every tenant must appear to be the sole owner of the application, to achieve this, a highly configurable multitenant solution is needed. In this paper, we analyze variation in multiple tenants' requirements, to propose a classification for multitenant application requirements, and implement variability realization techniques depending on requirement levels. Furthermore, we prioritize the tenants' requirements to satisfy as many customer requirements as possible, and provide key guidelines to software architects and developers to implement a configuration layer in a multi-tenancy architecture.},
author = {Saleh, Ahmed I. and Fouad, Mohammed A. and Abu-Elkheir, Mervat},
booktitle = {Proceedings of the International Conference on Cloud Computing Technology and Science, CloudCom},
doi = {10.1109/CloudCom.2014.142},
isbn = {9781479940936},
issn = {23302186},
keywords = {Multi-tenancy,Multitenant application architecture,Requirements classification,Variability},
number = {February},
pages = {32--37},
publisher = {IEEE},
title = {{Classifying requirements for variability optimization in multitenant applications}},
url = {https://doi.org/10.1109{\%}2Fcloudcom.2014.142},
volume = {2015-February},
year = {2015}
}
@article{Ali_2015,
abstract = {The cloud computing exhibits, remarkable potential to provide cost effective, easy to manage, elastic, and powerful resources on the fly, over the Internet. The cloud computing, upsurges the capabilities of the hardware resources by optimal and shared utilization. The above mentioned features encourage the organizations and individual users to shift their applications and services to the cloud. Even the critical infrastructure, for example, power generation and distribution plants are being migrated to the cloud computing paradigm. However, the services provided by third-party cloud service providers entail additional security threats. The migration of user's assets (data, applications, etc.) outside the administrative control in a shared environment where numerous users are collocated escalates the security concerns. This survey details the security issues that arise due to the very nature of cloud computing. Moreover, the survey presents the recent solutions presented in the literature to counter the security issues. Furthermore, a brief view of security vulnerabilities in the mobile cloud computing are also highlighted. In the end, the discussion on the open issues and future research directions is also presented.},
author = {Ali, Mazhar and Khan, Samee U. and Vasilakos, Athanasios V.},
doi = {10.1016/j.ins.2015.01.025},
issn = {00200255},
journal = {Information Sciences},
keywords = {Cloud computing,Multi-tenancy,Security,Virtualization,Web services},
month = {jun},
pages = {357--383},
publisher = {Elsevier {\{}BV{\}}},
title = {{Security in cloud computing: Opportunities and challenges}},
url = {https://doi.org/10.1016{\%}2Fj.ins.2015.01.025},
volume = {305},
year = {2015}
}
@incollection{Li_2008,
author = {Li, Xin Hui and Liu, Tian Cheng and Li, Ying and Chen, Ying},
booktitle = {Service-Oriented Computing {\{}$\backslash$textendash{\}} {\{}ICSOC{\}} 2007},
doi = {10.1007/978-3-540-89652-4_58},
pages = {649--663},
publisher = {Springer Berlin Heidelberg},
title = {{SPIN: Service Performance Isolation Infrastructure in Multi-tenancy Environment}},
url = {https://doi.org/10.1007{\%}2F978-3-540-89652-4{\_}58},
year = {2008}
}
@inproceedings{Heimerl_2014,
abstract = {Word clouds have emerged as a straightforward and visually appealing visualization method for text. They are used in various contexts as a means to provide an overview by distilling text down to those words that appear with highest frequency. Typically, this is done in a static way as pure text summarization. We think, however, that there is a larger potential to this simple yet powerful visualization paradigm in text analytics. In this work, we explore the usefulness of word clouds for general text analysis tasks. We developed a prototypical system called the Word Cloud Explorer that relies entirely on word clouds as a visualization method. It equips them with advanced natural language processing, sophisticated interaction techniques, and context information. We show how this approach can be effectively used to solve text analysis tasks and evaluate it in a qualitative user study. {\textcopyright} 2014 IEEE.},
author = {Heimerl, Florian and Lohmann, Steffen and Lange, Simon and Ertl, Thomas},
booktitle = {Proceedings of the Annual Hawaii International Conference on System Sciences},
doi = {10.1109/HICSS.2014.231},
isbn = {9781479925049},
issn = {15301605},
month = {jan},
pages = {1833--1842},
publisher = {IEEE},
title = {{Word cloud explorer: Text analytics based on word clouds}},
url = {https://doi.org/10.1109{\%}2Fhicss.2014.231},
year = {2014}
}
@inproceedings{Azeez_2010,
abstract = {Enterprise IT infrastructure incurs many costs ranging from hardware costs and software licenses/maintenance costs to the costs of monitoring, managing, and maintaining IT infrastructure. The recent advent of cloud computing offers some tangible prospects of reducing some of those costs; however, abstractions provided by cloud computing are often inadequate to provide major cost savings across the IT infrastructure life-cycle. Multi-tenancy, which allows a single application to emulate multiple application instances, has been proposed as a solution to this problem. By sharing one application across many tenants, multi-tenancy attempts to replace many small application instances with one or few large instances thus bringing down the overall cost of IT infrastructure. In this paper, we present an architecture for achieving multi-tenancy at the SOA level, which enables users to run their services and other SOA artifacts in a multi-tenant SOA framework as well as provides an environment to build multi-tenant applications. We discuss architecture, design decisions, and problems encountered, together with potential solutions when applicable. Primary contributions of this paper are motivating multitenancy, and the design and implementation of a multitenant SOA platform which allows users to run their current applications in a multi-tenant environment with minimal or no modifications. {\textcopyright} 2010 IEEE.},
author = {Azeez, Afkham and Perera, Srinath and Gamage, Dimuthu and Linton, Ruwan and Siriwardana, Prabath and Leelaratne, Dimuthu and Weerawarana, Sanjiva and Fremantle, Paul},
booktitle = {Proceedings - 2010 IEEE 3rd International Conference on Cloud Computing, CLOUD 2010},
doi = {10.1109/CLOUD.2010.50},
isbn = {9780769541303},
keywords = {Cloud computing,Multi-tenancy,PaaS,SOA,SaaS},
month = {jul},
pages = {458--465},
publisher = {IEEE},
title = {{Multi-tenant SOA middleware for cloud computing}},
url = {https://doi.org/10.1109{\%}2Fcloud.2010.50},
year = {2010}
}
@article{2014,
doi = {10.1063/pt.5.028530},
journal = {Physics Today},
publisher = {{\{}AIP{\}} Publishing},
title = {{Preprint repository arXiv achieves milestone million uploads}},
url = {https://doi.org/10.1063{\%}2Fpt.5.028530},
year = {2014}
}
@inproceedings{Chouhan_2015,
abstract = {Our life has been significantly enhanced and improved by a wide range of multifarious software services. Technological advancements and availability of high speed Internet connection has enabled software providers to transform traditional on-premise software deployment model to off-premise centralized deployment model. Providers and users are attracted by the software as a service (SaaS) paradigm due to the appealing features such as pay-as-you-go and optimal hardware utilization it can offer. However, lots of enterprises are still reluctant to move their business into SaaS because of the security concerns. Security issues plaguing the SaaS environment cuts across various areas which could lead to increased attack surface for potential security threats. This article first introduces the architecture of SaaS and highlights its utility and applicability in different environments like cloud computing, mobile cloud computing, software defined network and Internet of things. Then elaborate the SaaS security challenges spanning across data security, application security to SaaS deployment security and how security issues might affect different layers in the SaaS architecture.},
author = {Chouhan, Pushpinder Kaur and Yao, Feng and Sezer, Sakir},
booktitle = {Proceedings of the 2015 Science and Information Conference, SAI 2015},
doi = {10.1109/SAI.2015.7237140},
isbn = {9781479985470},
keywords = {Cloud security,SaaS Architecture,SaaS security,Software-as-a-Service},
month = {jul},
pages = {162--170},
publisher = {IEEE},
title = {{Software as a service: Understanding security issues}},
url = {https://doi.org/10.1109{\%}2Fsai.2015.7237140},
year = {2015}
}
@inproceedings{Foping_2009,
abstract = {This paper presents a new schema-sharing technique for multitenant applications. Our approach is built on top of the Extension table method and makes use of the native XML data support to store the additional data supplied by each tenant. Our proposed technique can be used to implement multitenancy on top of a standard relational database. This paper also describes an implementation of our approach using a real-world case study aiming at improving the communication channel of information related to drinking water quality parameters used by all stakeholders involved in the water treatment process in Ireland. These include the Environmental Protection Agency, the Health Service Executive, drinking water treatment plant staff, local authorities and everybody consuming water. {\textcopyright} 2009 IEEE.},
author = {Foping, Franclin S. and Dokas, Ioannis M. and Feehan, John and Imran, Syed},
booktitle = {4th International Conference on Digital Information Management, ICDIM 2009},
doi = {10.1109/ICDIM.2009.5356775},
isbn = {9781424442539},
month = {nov},
pages = {210--215},
publisher = {IEEE},
title = {{A new hybrid schema-sharing technique for multitenant applications}},
url = {https://doi.org/10.1109{\%}2Ficdim.2009.5356775},
year = {2009}
}
@article{Wieringa_2005,
author = {Wieringa, Roel and Maiden, Neil and Mead, Nancy and Rolland, Colette},
doi = {10.1007/s00766-005-0021-6},
issn = {09473602},
journal = {Requirements Engineering},
keywords = {Paper classification,Paper evaluation criteria,Requirements engineering research,Research methods},
month = {nov},
number = {1},
pages = {102--107},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Requirements engineering paper classification and evaluation criteria: A proposal and a discussion}},
url = {https://doi.org/10.1007{\%}2Fs00766-005-0021-6},
volume = {11},
year = {2006}
}
@inproceedings{Kumara_2015,
abstract = {A service-based SaaS application can achieve economies of scale by sharing partner services between tenants at runtime, following the Single-Instance Multi-Tenancy (SIMT) model. However, supporting runtime sharing with tenant-specific functional and performance variations in an SIMT application is challenging. We propose an approach, Software-Defined Service Networking (SDSN), to addressing this challenge. SDSN realizes an SIMT application with a managed service network (SN) and a set of managed virtual service networks (VSNs) that share the SN. The SN connects a set of services according to their capability and interoperability. To achieve the requirements of a particular tenant, a VSN uses a subset of the services under a particular architecture and a control policy. We describe how the SN and its VSNs are designed and enacted to achieve the SIMT objectives. We show the feasibility of the SDSN, demonstrate the utilization benefits it achieves, and quantify the runtime overhead it incurs.},
author = {Kumara, Indika and Han, Jun and Colman, Alan and Kapuruge, Malinda},
booktitle = {Proceedings - 2015 IEEE International Conference on Services Computing, SCC 2015},
doi = {10.1109/SCC.2015.37},
isbn = {9781467372817},
keywords = {Cloud Service,Multi-Tenant,SaaS,Software-Defined Network,Virtual Service Network},
month = {jun},
pages = {210--217},
publisher = {IEEE},
title = {{Software-Defined Service Networking: Runtime Sharing with Performance Differentiation in Multi-tenant SaaS Applications}},
url = {https://doi.org/10.1109{\%}2Fscc.2015.37},
year = {2015}
}
@inproceedings{Moens_2012,
abstract = {In recent years, there has been a growing interest in cloud technologies. Using current cloud solutions, it is however difficult to create customizable multi-tenant applications, especially if the application must support varying Quality of Service (QoS) guarantees. Software Product Line Engineering (SPLE) and feature modeling techniques are commonly used to address these issues in non-cloud applications, but these techniques cannot be ported directly to a cloud context, as the common approaches are geared towards customization of on-premise deployed applications, and do not support multi-tenancy. In this paper, we propose an architecture for the development and management of customizable Software as a Service (SaaS) applications, built using SPLE techniques. In our approach, each application is a composition of services, where individual services correspond to specific application functionalities, referred to as features. A feature-based methodology is described to abstract and convert the application information required at different stages of the application life-cycle: development, customization and deployment. We specifically focus on how development feature models can be adapted ensuring a one-to-one correspondence between features and services exists, ensuring the composition of services yields an application containing the corresponding features. These runtime features can then be managed using feature placement techniques. The proposed approach enables developers to define significantly less features, while limiting the amount of automatically generated features in the application runtime stage. Conversion times between models are shown to be in the order of milliseconds, while execution times of management algorithms are shown to improve by 5 to 17{\%} depending on the application case. {\textcopyright} 2012 IEEE.},
author = {Moens, Hendrik and Truyen, Eddy and Walraven, Stefan and Joosen, Wouter and Dhoedt, Bart and {De Turck}, Filip},
booktitle = {Proceedings of the 2012 IEEE Network Operations and Management Symposium, NOMS 2012},
doi = {10.1109/NOMS.2012.6212066},
isbn = {9781467302685},
keywords = {Clouds,Design methodology,SPLE,SaaS},
pages = {1295--1302},
publisher = {IEEE},
title = {{Developing and managing customizable Software as a Service using feature model conversion}},
url = {https://doi.org/10.1109{\%}2Fnoms.2012.6212066},
year = {2012}
}
@incollection{Kwok_2008,
abstract = {Cost of customization, deployment and operation of a software application$\backslash$nsupporting multiple tenants can be lowered through multi-tenancy$\backslash$nin a new application business model called Software as a Service$\backslash$n(SaaS). However, there are a number of technical challenges that$\backslash$nneed to be tackled before these benefits can be realized. These challenges$\backslash$ninclude calculations of resource requirements for multi-tenants with$\backslash$napplied constraints in a shared application instance, the optimal$\backslash$nplacement of tenants and instances with maximum cost savings but$\backslash$nwithout violating any requirements of service level agreements for$\backslash$nall tenants in a set of servers. Moreover, previously reported capacity$\backslash$nplanning and resource allocation methods and tools are not tenant$\backslash$naware. This paper will address and provide novel solutions to these$\backslash$nchallenges. We also describe the first of a kind, a multi-tenant$\backslash$nplacement tool for application deployment in a distributed computing$\backslash$nenvironment. {\^{A}}{\textcopyright} 2008 Springer Berlin Heidelberg.},
author = {Kwok, Thomas and Mohindra, Ajay},
booktitle = {Service-Oriented Computing {\{}$\backslash$textendash{\}} {\{}ICSOC{\}} 2007},
doi = {10.1007/978-3-540-89652-4_57},
pages = {633--648},
publisher = {Springer Berlin Heidelberg},
title = {{Resource Calculations with Constraints, and Placement of Tenants and Instances for Multi-tenant SaaS Applications}},
url = {https://doi.org/10.1007{\%}2F978-3-540-89652-4{\_}57},
year = {2008}
}
@article{Kaiser_1960,
author = {Kaiser, Henry F.},
doi = {10.1177/001316446002000116},
issn = {15523888},
journal = {Educational and Psychological Measurement},
number = {1},
pages = {141--151},
publisher = {{\{}SAGE{\}} Publications},
title = {{The Application of Electronic Computers to Factor Analysis}},
url = {https://doi.org/10.1177{\%}2F001316446002000116},
volume = {20},
year = {1960}
}
@article{Hashizume_2013,
abstract = {Cloud Computing is a flexible, cost-effective, and proven delivery platform for providing business or consumer IT services over the Internet. However, cloud Computing presents an added level of risk because essential services are often outsourced to a third party, which makes it harder to maintain data security and privacy, support data and service availability, and demonstrate compliance. Cloud Computing leverages many technologies (SOA, virtualization, Web 2.0); it also inherits their security issues, which we discuss here, identifying the main vulnerabilities in this kind of systems and the most important threats found in the literature related to Cloud Computing and its environment as well as to identify and relate vulnerabilities and threats with possible solutions. {\textcopyright} 2013 Hashizume et al.},
author = {Hashizume, Keiko and Rosado, David G. and Fern{\'{a}}ndez-Medina, Eduardo and Fernandez, Eduardo B.},
doi = {10.1186/1869-0238-4-5},
issn = {18690238},
journal = {Journal of Internet Services and Applications},
keywords = {Cloud computing,Countermeasures,SPI model,Security,Threats,Vulnerabilities},
number = {1},
pages = {1--13},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{An analysis of security issues for cloud computing}},
url = {https://doi.org/10.1186{\%}2F1869-0238-4-5},
volume = {4},
year = {2013}
}
@article{Durao2014,
abstract = {Cloud computing is an ascending technology that has introduced a new paradigm by rendering a rational computational model possible. It has changed the dynamics of IT consumption by means of a model that provides on-demand services over the Internet. Unlike the traditional hosting service, cloud computing services are paid for per usage and may expand or shrink based on demand. Such services are, in general, fully managed by cloud providers that require users nothing but a personal computer and an Internet access. In recent years, this model has attracted the attention of researchers, investors and practitioners, many of whom have proposed a number of applications, structures and fundamentals of cloud computing, resulting in various definitions, requirements and models. Despite the interest and advances in the field, issues such as security and privacy, service layer agreement, resource sharing, and billing have opened up new questions about the real gains of the model. Although cloud computing is based on a 50-year-old business model, evidence from this study indicates that cloud computing still needs to expand and overcome present limitations that prevent the full use of its potential. In this study, we critically review the state of the art in cloud computing with the aim of identifying advances, gaps and new challenges. {\textcopyright} Springer Science+Business Media New York 2014.},
author = {Durao, Frederico and Carvalho, Jose Fernando S. and Fonseka, Anderson and Garcia, Vinicius Cardoso},
doi = {10.1007/s11227-014-1089-x},
issn = {15730484},
journal = {Journal of Supercomputing},
keywords = {Cloud computing,On-demand business model,Service layer agreement,Virtualization},
number = {3},
pages = {1321--1346},
title = {{A systematic review on cloud computing}},
url = {https://doi.org/10.1007/s11227-014-1089-x},
volume = {68},
year = {2014}
}
@article{Almorsy_2013,
abstract = {Software-as-a-service (SaaS) multi-tenancy in cloud-based applications helps service providers to save cost, improve resource utilization, and reduce service customization and maintenance time. This is achieved by sharing of resources and service instances among multiple "tenants" of the cloud-hosted application. However, supporting multi-tenancy adds more complexity to SaaS applications required capabilities. Security is one of these key requirements that must be addressed when engineering multi-tenant SaaS applications. The sharing of resources among tenants - i.e. multi-tenancy - increases tenants' concerns about the security of their cloud-hosted assets. Compounding this, existing traditional security engineering approaches do not fit well with the multi-tenancy application model where tenants and their security requirements often emerge after the applications and services were first developed. The resultant applications do not usually support diverse security capabilities based on different tenants' needs, some of which may change at run-time i.e. after cloud application deployment. We introduce a novel model-driven security engineering approach for multi-tenant, cloud-hosted SaaS applications. Our approach is based on externalizing security from the underlying SaaS application, allowing both application/service and security to evolve at runtime. Multiple security sets can be enforced on the same application instance based on different tenants' security requirements. We use abstract models to capture service provider and multiple tenants' security requirements and then generate security integration and configurations at runtime. We use dependency injection and dynamic weaving via Aspect-Oriented Programming (AOP) to integrate security within critical application/service entities at runtime. We explain our approach, architecture and implementation details, discuss a usage example, and present an evaluation of our approach on a set of open source web applications. {\textcopyright} 2013 Springer Science+Business Media New York.},
author = {Almorsy, Mohamed and Grundy, John and Ibrahim, Amani S.},
doi = {10.1007/s10515-013-0133-z},
issn = {15737535},
journal = {Automated Software Engineering},
keywords = {Adaptive-security,Model-driven engineering,Security engineering,Software-as-a-service,Tenant-oriented security},
number = {2},
pages = {187--224},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Adaptable, model-driven security engineering for SaaS cloud-based applications}},
url = {https://doi.org/10.1007{\%}2Fs10515-013-0133-z},
volume = {21},
year = {2014}
}
@inproceedings{Moens_2014,
abstract = {In recent years, there has been a rising interest in cloud computing, which is often used to offer Software as a Service (SaaS) over the Internet. SaaS applications can be offered to clients at a lower cost as they are usually multi-tenant: many end users make use of a single application instance, even when they are from different organisations. It is difficult to offer highly customizable SaaS applications that are still multi-tenant, which is why these SaaS applications are often offered in a one size fits all approach. In some application domains applications must be highly customizable, making it more difficult to migrate them to a cloud environment, and losing the benefits of multi-tenancy. In this paper we compare multiple approaches for the development and management of highly customizable multitenant SaaS applications, and present a methodology for developing and managing these applications. We compare two approaches, an application-based approach focusing on deploying multiple multi-tenant applications variants, and a feature-based approach where applications are composed out of multi-tenant services using a service oriented architecture. In addition, we also discuss a hybrid approach combining properties of both. We conclude that the feature-based approach results in the fewest application instances at runtime resulting in more multi-tenancy. Copyright is held by the owner/author(s).},
author = {Moens, Hendrik and {De Turck}, Filip},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/2648511.2648519},
isbn = {9781450327404},
keywords = {Cloud computing,Feature modeling,Multi-tenancy},
pages = {72--81},
publisher = {{\{}ACM{\}} Press},
title = {{Feature-based application development and management of multi-tenant applications in clouds}},
url = {https://doi.org/10.1145{\%}2F2648511.2648519},
volume = {1},
year = {2014}
}
@inproceedings{Gao_2011,
abstract = {Cloud computing not only changes today's computing infrastructure, but also alters the way of obtaining computing resources, managing and delivering software and services. Meanwhile, cloud computing brings new issues, challenges, and needs in performance testing, evaluation and scalability measurement due to the special features of cloud computing, such as elasticity and scalability. This paper focuses on performance evaluation and scalability measurement issue for Software as a Service (SaaS) in clouds. It proposes new formal graphic models and metrics to evaluate SaaS performance and analyze system scalability in clouds. In addition, the paper reports an evaluation approach based on Amazon's EC2 cloud technology and detailed case study results using the proposed models and metrics. {\textcopyright} 2011 IEEE.},
author = {Gao, Jerry and Pattabhiraman, Pushkala and Bai, Xiaoying and Tsai, W. T.},
booktitle = {Proceedings - 6th IEEE International Symposium on Service-Oriented System Engineering, SOSE 2011},
doi = {10.1109/SOSE.2011.6139093},
isbn = {9781467304108},
keywords = {SaaS performance evaluation and scalability measurement,cloud performance evaluation,cloud scalability measurement,scalability modeling},
pages = {61--71},
publisher = {IEEE},
title = {{SaaS performance and scalability evaluation in clouds}},
url = {https://doi.org/10.1109{\%}2Fsose.2011.6139093},
year = {2011}
}
@inproceedings{Petersen_2008,
abstract = {BACKGROUND: A software engineering systematic map is a defined method to build a classification scheme and structure a software engineering field of interest. The analysis of results focuses on frequencies of publications for categories within the scheme. Thereby, the coverage of the research field can be determined. Different facets of the scheme can also be combined to answer more specific research questions. OBJECTIVE: We describe how to conduct a systematic mapping study in software engineering and provide guidelines. We also compare systematic maps and systematic reviews to clarify how to chose between them. This comparison leads to a set of guidelines for systematic maps. METHOD: We have defined a systematic mapping process and applied it to complete a systematic mapping study. Furthermore, we compare systematic maps with systematic reviews by systematically analyzing existing systematic reviews. RESULTS: We describe a process for software engineering systematic mapping studies and compare it to systematic reviews. Based on this, guidelines for conducting systematic maps are defined. CONCLUSIONS: Systematic maps and reviews are different in terms of goals, breadth, validity issues and implications. Thus, they should be used complementarily and require different methods (e.g., for analysis).},
author = {Petersen, Kai and Feldt, Robert and Mujtaba, Shahid and Mattsson, Michael},
booktitle = {12th International Conference on Evaluation and Assessment in Software Engineering, EASE 2008},
doi = {10.14236/ewic/ease2008.8},
keywords = {Evidence based software engineering,Systematic mapping studies,Systematic reviews},
month = {jun},
publisher = {{\{}BCS{\}} Learning {\&} Development},
title = {{Systematic mapping studies in software engineering}},
url = {https://doi.org/10.14236{\%}2Fewic{\%}2Fease2008.8},
year = {2008}
}
@inproceedings{Zhou_2011,
abstract = {Software as a Service (SaaS) provides a web based software delivery model to serve a large number of clients with one single application instance. One of the essential problems to SaaS application development is about how to elicit the commonality and variance of multiple clients' requirements effectively. This paper presents a collaborative requirement elicitation technique (CRETE), which keeps each potential client of a SaaS application aware of the requirements raised by other clients or the SaaS vendor and allows a client to vote on existing requirements or raise new requirements. With CRETE, individual client can create and evolve his proprietary requirements model, while the SaaS vendor can automatically get a combined requirements model that reflects all clients' common and variant requirements. The SaaS vendor then can develop a SaaS application according to the combined requirements model, so that individual client's requirements can be satisfied by self-serve configuration without changing the SaaS application's source code. {\textcopyright} 2011 IEEE.},
author = {Zhou, Xin and Yi, Li and Liu, Ying},
booktitle = {Proceedings of 2011 IEEE International Conference on Service Operations, Logistics and Informatics, SOLI 2011},
doi = {10.1109/SOLI.2011.5986533},
isbn = {9781457705731},
keywords = {SaaS,collaboration,feature model,requirements elicitation},
month = {jul},
pages = {83--88},
publisher = {IEEE},
title = {{A collaborative requirement elicitation technique for SaaS applications}},
url = {https://doi.org/10.1109{\%}2Fsoli.2011.5986533},
year = {2011}
}
@article{Khanjani_2014,
abstract = {Software as a Service (SaaS) is one of the cloud computing branch and it is rapidly growing. Quality of Service (QoS) for SaaS cloud is considered as an important concern among researchers. The QoS specification, particularly, for SaaS is known as a big gap in current researches. Therefore, in this study, the main QoS attributes for SaaS consisting of 33 attributes have been reviewed. The results show a comprehensive specification of QoS attributes for SaaS which cover more aspects of QoS for SaaS excluding the business perspective. The attributes then have been classified in terms of both user and provider perspectives and can be useful as a guideline for both users and providers.},
author = {Khanjani, Atieh and Rahman, Wan Nurhayati Wan Ab and Ghani, Abdul Azim Abd. and Sultan, Abu Bakar Md.},
doi = {10.3923/jas.2014.3613.3619},
issn = {18125654},
journal = {Journal of Applied Sciences},
number = {24},
pages = {3613--3619},
publisher = {Science Alert},
title = {{Saas Quality of Service Attributes}},
url = {https://doi.org/10.3923{\%}2Fjas.2014.3613.3619},
volume = {14},
year = {2014}
}
@article{Cusumano_2008,
abstract = {A dramatic shift is under way in the enterprise-software industry as established vendors embrace services in the wake of declining product revenues. It remains to be seen whether life-cycle dynamics or business-model choices are behind the long-term trend. {\textcopyright} 2008 IEEE.},
author = {Cusumano, Michael A.},
doi = {10.1109/MC.2008.29},
issn = {00189162},
journal = {Computer},
month = {jan},
number = {1},
pages = {20--27},
publisher = {Institute of Electrical and Electronics Engineers ({\{}IEEE{\}})},
title = {{The changing software business: Moving from products to services}},
url = {https://doi.org/10.1109{\%}2Fmc.2008.29},
volume = {41},
year = {2008}
}
@incollection{Zhang_2011,
abstract = {In cloud computing, multi-tenancy applications utilize shared resources to serve multi tenants through "single instance multi-tenancy". Applications and databases are both deployed at the platform of un-trusted service providers. Data privacy has become the biggest challenges in wider adoption of cloud computing. Specifically, data schema evolves due to on-demand customization in cloud computing. How to protect the data privacy during data schema evolution for multi-tenancy application is an interesting and important problem. We proposed the privacy requirements for data schema evolution based on the data combination privacy, and then represented the data privacy-preserving architecture. A data schema evolution graph is constructed, and then the privacy-preserving evolution path is searched based on the principle of privacy requirements consistency. Analysis and experiments demonstrate the corrective and effective of the data privacy preservation approach during data schema evolution in cloud computing. {\textcopyright} 2011 Springer-Verlag.},
author = {Zhang, Kun and Li, Qingzhong and Shi, Yuliang},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-23971-7_47},
isbn = {9783642239700},
issn = {03029743},
keywords = {cloud computing,data privacy,schema evolution},
number = {PART 1},
pages = {376--383},
publisher = {Springer Berlin Heidelberg},
title = {{Data privacy preservation during schema evolution for multi-tenancy applications in cloud computing}},
url = {https://doi.org/10.1007{\%}2F978-3-642-23971-7{\_}47},
volume = {6987 LNCS},
year = {2011}
}
@inproceedings{Tsai_2011,
abstract = {Software-as-a-Service (SaaS) often adopts multi-tenancy architecture (MTA). However, building a MTA SaaS application requires significant effort, either from scratch or using existing platforms such as Force.com or Google App Engine. This paper introduces EasySaaS - a SaaS development framework designed to simplify SaaS development. EasySaaS provides two alternatives to build a SaaS application. First alternative allows tenants to publish their application specifications with their requirements, as well as test scripts and let the SaaS providers customize their SaaS solutions to meet tenants' requirements. The second alternative allows tenants to compose the application using templates provided in EasySaaS. This framework alleviates the workload of tenant developers, and provides an easy approach for customization according to tenants' requirements in a collaborative manner. Most services in the platform is domain independent as the domain knowledge are stored in ontology to support cross-domain development. {\textcopyright} 2011 IEEE.},
author = {Tsai, Wei Tek and Huang, Yu and Shao, Qihong},
booktitle = {Proceedings - 2011 IEEE International Conference on Service-Oriented Computing and Applications, SOCA 2011},
doi = {10.1109/SOCA.2011.6166262},
isbn = {9781467303194},
keywords = {Cloud Computing,Multi-tenancy architecture,SaaS},
publisher = {IEEE},
title = {{EasySaaS: A SaaS development framework}},
url = {https://doi.org/10.1109{\%}2Fsoca.2011.6166262},
year = {2011}
}
@inproceedings{Liao_2013,
abstract = {Recently, Software as a Service (SaaS), a cloud-enabled business model, has received a lot of attention in the software industry. Among various facets of SaaS, the data layer design issues, such as schema customization and schema mapping, have been identified as one of the most important challenges for realizing economically scalable multi-tenant SaaS applications. In this paper, we propose an aspect-driven approach to deal with this challenge. After pre- senting the motivation and rationale of our work, we sketch the overall approach based on an example SaaS application. Copyright {\textcopyright} 2013 ACM.},
author = {Liao, Chun Feng and Chen, Kung and Chen, Jiu Jye},
booktitle = {AOAsia 2013: Proceedings of the 8th International Workshop on Advanced Modularization Techniques - AOAsia/Pacific},
doi = {10.1145/2451469.2451473},
isbn = {9781450318617},
keywords = {Multi-tenant,SaaS,Schema-mapping},
pages = {9--11},
publisher = {{\{}ACM{\}} Press},
title = {{Modularizing tenant-specific schema customization in SaaS applications}},
url = {https://doi.org/10.1145{\%}2F2451469.2451473},
year = {2013}
}
@inproceedings{Nuthula_2014,
abstract = {With the emergence of Cloud Computing technology many enterprises started moving their applications to the cloud to gain the benefits of hosting applications online versus having to have physical hardware or build out infrastructure. This new technology trend presents new challenges to application developers to enable applications in the cloud. Building applications for the cloud requires a major paradigm shift and new thinking about the application design, system architecture and needs an emphasis on leveraging massive scale. Building scalable applications for the cloud requires solid engineering and design by addressing the Statelessness, Redundancy, Resiliency, Server failures, New database approach, security, fast-changing platforms and dealing with different frameworks. While cloud deployments can abstract developers from having to deal with infrastructure issues, developers can focus on innovation and business logic instead of worrying about plumbing and infrastructure such as the operating systems, hardware etc. This paper is targeted towards cloud application developers and architects who are responsible for developing brand new cloud applications as well as migrating existing applications to clouds. The focus of this paper is to highlight design principles and best practices applicable to application development in cloud environment.},
author = {Nuthula, Venkatesh and Challa, Narsimha Reddy},
booktitle = {2014 IEEE International Conference on Cloud Computing in Emerging Markets, CCEM 2014},
doi = {10.1109/CCEM.2014.7015487},
isbn = {9781479961412},
keywords = {Application,Cloud,Compute,Database,Design,Elastic,File System,IaaS,Load Balancing,PaaS,Resilient,SaaS,Scalability,Security,Stateless,Storage,VM,Virtual Machine Image,Virtualization},
publisher = {IEEE},
title = {{Cloudifying apps - A study of design and architectural considerations for developing cloudenabled applications with case study}},
url = {https://doi.org/10.1109{\%}2Fccem.2014.7015487},
year = {2015}
}
@inproceedings{Gao_2012,
abstract = {With the fast advancements in cloud computing and software-as-a-service (SaaS), testing and evaluation of cloud-based software and SaaS applications became an important task for engineers. Since most existing tools are not developed to support cloud-based software testing and SaaS evaluation, there is a strong demand for a new cloud-based testing infrastructure and evaluation environment for SaaS applications. This paper proposes a testing-as-service (TaaS) infrastructure and reports a cloud-based TaaS environment with tools (known as CTaaS) developed to meet the needs in SaaS testing, performance and scalability evaluation. The paper presents TaaS concepts and CTaaS, including their infrastructure, design and implementation. In addition, the paper demonstrates the application results of our previously proposed graphic models and metrics for SaaS performance and scalability evaluation. Moreover, the paper reports one case study for a selected SaaS (OrangeHRM) using the developed TaaS environment. {\textcopyright} 2012 IEEE.},
author = {Gao, Jerry and Manjula, K. and Roopa, P. and Sumalatha, E. and Bai, Xiaoying and Tsai, W. T. and Uehara, Tadahiro},
booktitle = {CloudCom 2012 - Proceedings: 2012 4th IEEE International Conference on Cloud Computing Technology and Science},
doi = {10.1109/CloudCom.2012.6427555},
isbn = {9781467345095},
keywords = {Software-as-a-Service (SaaS),Testing-as-a-Service (TaaS),cloud testing,performance evaluation,scalability measurement},
pages = {464--471},
publisher = {IEEE},
title = {{A cloud-based TaaS infrastructure with tools for SaaS validation, performance and scalability evaluation}},
url = {https://doi.org/10.1109{\%}2Fcloudcom.2012.6427555},
year = {2012}
}
@inproceedings{Mietzner_2008,
abstract = {Software as a Service (SaaS) is a new delivery model for software. Software in a SaaS model is no longer run exclusively for one customer at a customer's premise but run at a service provider and accessed via the Internet. A provider of Software as a Service exploits economies of scale by hosting and providing the same application for several different customers. However, each individual customer has different requirements for the same basic application. In order to allow each customer to customize the process layer and related artifacts of a SaaS application to their specific needs the application needs to provide a set of variability points that can be modified by customers. In this paper we describe the notion of a variability descriptor that defines variability points for the process layer and related artifacts of process-based, service-oriented SaaS applications. Furthermore we describe how these variability descriptors can be transformed into a WS-BPEL process model that can then be used to guide a customer through the customization of the SaaS application. {\textcopyright}2008 IEEE.},
author = {Mietzner, Ralph and Leymann, Frank},
booktitle = {Proceedings - 2008 IEEE International Conference on Services Computing, SCC 2008},
doi = {10.1109/SCC.2008.85},
isbn = {9780769532837},
month = {jul},
pages = {359--366},
publisher = {IEEE},
title = {{Generation of BPEL customization processes for SaaS applications from variability descriptors}},
url = {https://doi.org/10.1109{\%}2Fscc.2008.85},
volume = {2},
year = {2008}
}
@article{Tsai_2014,
abstract = {Software-as-a-service (SaaS) has received significant attention recently as one of three principal components of cloud computing, and it often deals with applications that run on top of a platform-as-a-service (PaaS) that in turn runs on top of infrastructure-as-a-service (IaaS). This paper provides an overview of SaaS including its architecture and major technical issues such as customization, multi-tenancy architecture, redundancy and recovery mechanisms, and scalability. Specifically, a SaaS system can have architecture relating to a database-oriented approach, middleware-oriented approach, service-oriented approach, or PaaS-oriented approach. Various SaaS customization strategies can be used from light customization with manual coding to heavy customization where the SaaS system and its underlying PaaS systems are customized together. Multi-tenancy architecture is an important feature of a SaaS and various trade-offs including security isolation, performance, and engineering effort need to be considered. It is important for a SaaS system to have multi-level redundancy and recovery mechanisms, and the SaaS system needs to coordinate these with the underlying PaaS system. Finally, SaaS scalability mechanisms include a multi-level architecture with load balancers, automated data migration, and software design strategies. {\textcopyright} 2014 Science China Press and Springer-Verlag Berlin Heidelberg.},
author = {Tsai, Wei Tek and Bai, Xiao Ying and Huang, Yu},
doi = {10.1007/s11432-013-5050-z},
issn = {1674733X},
journal = {Science China Information Sciences},
keywords = {SaaS architecture,customization,multi-tenancy architecture,redundancy and recovery,scalability,software-as-a-service},
month = {mar},
number = {5},
pages = {1--15},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Software-as-a-service (SaaS): Perspectives and challenges}},
url = {https://doi.org/10.1007{\%}2Fs11432-013-5050-z},
volume = {57},
year = {2014}
}
@article{2014,
doi = {10.1002/adem.201470050},
journal = {Advanced Engineering Materials},
number = {12},
pages = {1409--1412},
publisher = {Wiley},
title = {{Contents: Adv. Eng. Mater. 12∕2014}},
url = {https://doi.org/10.1002{\%}2Fadem.201470050},
volume = {16},
year = {2014}
}
@inproceedings{Jumagaliyev_2016,
abstract = {Cloud computing allows development of multi-tenant applications by sharing computing and storage resources. Cloud computing and model driven engineering (MDE) approaches can be mutually beneficial. With MDE, developers can focus on designing the structure, functionality and behaviour of software systems without considering specific implementation and platform details. In this poster paper, we examine opportunities of exploiting MDE by analysing variability challenges during a multi-tenant application development.},
author = {Jumagaliyev, Assylbek and Whittle, Jon},
booktitle = {3rd Workshop on CrossCloud Infrastructures and Platforms, CrossCloud 2016 - Colocated with EuroSys 2016},
doi = {10.1145/2904111.2904120},
isbn = {9781450342940},
keywords = {Cloud computing,MDE,Multi-tenancy,Software engineering,Variability},
publisher = {{\{}ACM{\}} Press},
title = {{Model-driven engineering for multi-tenant SaaS application development}},
url = {https://doi.org/10.1145{\%}2F2904111.2904120},
year = {2016}
}
@article{Eisenhardt_1989,
abstract = {Traditional, hierarchical views of leadership are less and less useful given the complexities of our modern world. Leadership theory must transition to new perspectives that account for the complex adaptive needs of organizations. In this paper, we propose that leadership (as opposed to leaders) can be seen as a complex dynamic process that emerges in the interactive "spaces between" people and ideas. That is, leadership is a dynamic that transcends the capabilities of individuals alone; it is the product of interaction, tension, and exchange rules governing changes in perceptions and understanding. We label this a dynamic of adaptive leadership, and we show how this dynamic provides important insights about the nature of leadership and its outcomes in organizational fields. We define a leadership event as a perceived segment of action whose meaning is created by the interactions of actors involved in producing it, and we present a set of innovative methods for capturing and analyzing these contextually driven processes. We provide theoretical and practical implications of these ideas for organizational behavior and organization and management theory.},
author = {Lichtenstein, Benyamin B. and Uhl-Bien, Mary and Marion, Russ and Seers, Anson and Orton, James Douglas and Schreiber, Craig},
doi = {10.5465/AMR.1989.4308385},
issn = {15213250},
journal = {E:CO Emergence: Complexity and Organization},
number = {4},
pages = {2--12},
publisher = {Academy of Management},
title = {{Complexity leadership theory: An interactive perspective on leading in complex adaptive systems}},
url = {https://doi.org/10.5465{\%}2Famr.1989.4308385},
volume = {8},
year = {2006}
}
@inproceedings{Chen_2013,
abstract = {SaaS (Software as a Service) is widely used as a model for selling software. SaaS applications are on the software provider and can be accessed via the Internet. The SaaS applications have the same basic functions in the template file and the template file can be configured by tenant administrators to meet the individual demands. Workflow is used in SaaS applications and business processes need to be customized to adapt individual requirement. This paper represents a process customization framework that can customize and configure processes while guarantee the tenancy isolation. After the customization, there must be multiple versions of processes based on one basic template process. The collection of customized processes is necessary for ISVs because customized processes reflect demanding information of tenants. {\textcopyright} 2013 IEEE.},
author = {Chen, Dapeng and Li, Qingzhong and Kong, Lanju},
booktitle = {Proceedings - 2013 10th Web Information System and Application Conference, WISA 2013},
doi = {10.1109/WISA.2013.94},
keywords = {SaaS,customization,workflow},
month = {nov},
pages = {471--474},
publisher = {IEEE},
title = {{Process customization framework in SaaS applications}},
url = {https://doi.org/10.1109{\%}2Fwisa.2013.94},
year = {2013}
}
@inproceedings{Fehling_2010,
abstract = {To be successful a cloud service provider has to target a preferably large customer group to leverage economies of scale. Therefore an application offered as a service in the cloud is often configurable regarding non-functional qualities, such as location or availability. Since many of these qualities depend on the resources on which the service is hosted, a large number of computing environments has to be managed by the service provider. This paper analyses the challenges arising from such a scenario and identifies several optimization opportunities originating from an intelligent distribution of users among the functionally equal resources with different quality of services. A framework enabling the development of distribution strategies exploiting these opportunities is defined. It allows modeling of resources, their deployment dependencies, and users with specific demands. An architecture and prototype of a management system is introduced to handle the required resource provisioning and user request routing. Several optimization strategies are defined and their performance is evaluated using statistical data of an existing cloud service provider. {\textcopyright} 2010 IEEE.},
author = {Fehling, Christoph and Leymann, Frank and Mietzner, Ralph},
booktitle = {Proceedings - 2010 IEEE 3rd International Conference on Cloud Computing, CLOUD 2010},
doi = {10.1109/CLOUD.2010.33},
isbn = {9780769541303},
keywords = {Cloud,Multi-tenancy,Provisioning,SaaS},
month = {jul},
pages = {252--259},
publisher = {IEEE},
title = {{A framework for optimized distribution of tenants in cloud applications}},
url = {https://doi.org/10.1109{\%}2Fcloud.2010.33},
year = {2010}
}
@article{1998,
doi = {10.1016/s0737-6782(98)90099-6},
issn = {07376782},
journal = {Journal of Product Innovation Management},
month = {mar},
number = {2},
pages = {191--193},
publisher = {Wiley},
title = {{The four faces of mass customization James H. Gilmore and B. Joseph Pine II, Harvard Business Review (January?February 1997), pp. 91?101}},
url = {https://doi.org/10.1016{\%}2Fs0737-6782{\%}2898{\%}2990099-6},
volume = {15},
year = {1998}
}
@inproceedings{Maenhaut_2014,
abstract = {Multi-tenancy leads to improved efficiency, improved scalability, and lower costs. With the recent evolution of Cloud Computing and Software-as-a-Service (SaaS) in particular, a flexible and scalable multi-tenant architecture is becoming highly important. In multi-tenant applications, each tenant has its own users and administrators and tenants even tend to be divided into multiple subtenants. As the number of tenants grows, the number of users and amount of data grows, thus a scalable architecture for the access control system is needed. The question arises how to distribute the users and data over multiple database instances. In this paper we present a hierarchical data management approach, taking performance metrics into account, for structuring the storage of tenant data in large multi-tenant environments. We introduce a logical representation of the tenants, the tenant tree, and make a mapping to the physical storage by introducing three models for load-balancing. Next, we focus on how to efficiently locate the required data and introduce multiple search approaches. We characterize the impact on the performance both theoretically and experimentally. Experiments confirm that the theoretical analysis is in line with the experimental results. When the amount of data increases significantly, dividing the data over multiple datastores in an efficient way will eliminate the overhead and lead to a performance gain, especially if most of the data is located at the leaf nodes of the tenant tree. {\textcopyright} 2014 IEEE.},
author = {Maenhaut, Pieter Jan and Moens, Hendrik and Decat, Maarten and Bogaerts, Jasper and Lagaisse, Bert and Joosen, Wouter and Ongenae, Veerle and {De Turck}, Filip},
booktitle = {IEEE/IFIP NOMS 2014 - IEEE/IFIP Network Operations and Management Symposium: Management in a Software Defined World},
doi = {10.1109/NOMS.2014.6838232},
isbn = {9781479909131},
publisher = {IEEE},
title = {{Characterizing the performance of tenant data management in multi-tenant cloud authorization systems}},
url = {https://doi.org/10.1109{\%}2Fnoms.2014.6838232},
year = {2014}
}
@article{Liao_2015,
abstract = {In Software as a Service (SaaS) environments, designing and realizing multitenant schema-mapping that supports a shared database with custom extensions is a non-trivial task. Universal Table is one promising schema-mapping technique that is commonly used. However, there has been little research devoted to the design and realization of a query rewriting scheme for Universal Table. In this paper, we present a collection of general query rewriting schemes for Universal Table that can transparently transform tenant-specific logical queries into corresponding physical queries. Based on the design, we have developed a Java-based schema-mapping and query rewriting middleware for Universal Table and a sample online shopping SaaS application to verify its feasibility. Additionally, analytical results that can be used to predict the overhead of our schemes are also reported. Finally, we conduct a series of experiments and find that the results not only agree well with our analytical predictions but also show that our schemes are scalable to the number of tenants and the number of concurrent database connections.},
author = {Liao, Chun Feng and Chen, Kung and Tan, Deik Hoong and Chen, Jiu Jye},
doi = {10.1007/s10515-015-0178-2},
issn = {15737535},
journal = {Automated Software Engineering},
keywords = {Multitenant,Query rewriting,SaaS,Schema-mapping},
month = {mar},
number = {4},
pages = {535--568},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Automatic query rewriting schemes for multitenant SaaS applications}},
url = {https://doi.org/10.1007{\%}2Fs10515-015-0178-2},
volume = {23},
year = {2016}
}
@incollection{1,
author = {Veglis, Andreas and Giomelakis, Dimitrios},
booktitle = {Future Internet},
doi = {10.3390/fi12010006},
issn = {19995903},
number = {1},
pages = {189--220},
publisher = {Apress},
title = {{Search engine optimization}},
url = {https://doi.org/10.1007{\%}2F978-1-4302-0291-2{\_}7},
volume = {12},
year = {2020}
}
@inproceedings{Kong_2010,
abstract = {In SaaS model, a single instance of a SaaS application can serve multiple tenants who have different specific business needs. In many cases a tenant demands to customize with a SaaS application out of more than one virtualized application and run multiple business applications simultaneously, and moreover these different business applications have many common customization features. According to the traditional way, the tenant performs customization separately for different business applications, which brings about many repeated custom operations and much duplication of custom metadata. In this paper, we propose a novel multi-level customization model for SaaS applications which supports customization sharing among different virtualized applications in a tenant area. And then we design a metadata-driven schema-sharing multi-tenant data storage architecture which implements multi-level customization model. This paper also presents an experimental comparison of the new strategy with the old approach. {\textcopyright} 2010 IEEE.},
author = {Kong, Lanju and Li, Qingzhong and Zheng, Xuxu},
booktitle = {Proceedings - 2010 2nd International Conference on Multimedia Information Networking and Security, MINES 2010},
doi = {10.1109/MINES.2010.57},
isbn = {9780769542584},
keywords = {Customization-sharing,Multi-level,Multi-tenancy,SaaS,Schema-sharing,Virtualized application},
pages = {225--229},
publisher = {IEEE},
title = {{A novel model supporting customization sharing in saas applications}},
url = {https://doi.org/10.1109{\%}2Fmines.2010.57},
year = {2010}
}
@incollection{Rimal_2010,
abstract = {Cloud computing has emerged as a popular computing model to support processing of volumetric data using clusters of commodity computers. Nowadays, the computational world is opting for pay-for-use models. Hype and discussion aside, there remains no concrete definition of cloud computing. This chapter describes a comprehensive taxonomy for cloud computing architecture, aiming at a better understanding of the categories of applications that could benefit from cloudification and that will address the landscape of enterprise IT, management services, data governance, and many more. Then, this taxonomy is used to survey several cloud computing services such as Google, Force.com, and Amazon. The usages of taxonomy and survey results are not only to identify similarities and differences of the architectural approaches of cloud computing, but also to identify the areas requiring further research.},
author = {Rimal, Bhaskar Prasad and Choi, Eunmi and Lumb, Ian},
booktitle = {Computer Communications and Networks},
doi = {10.1007/978-1-84996-241-4_2},
pages = {21--46},
publisher = {Springer London},
title = {{A Taxonomy, Survey, and Issues of Cloud Computing Ecosystems}},
url = {https://doi.org/10.1007{\%}2F978-1-84996-241-4{\_}2},
year = {2010}
}
@article{Iacovou_1995,
abstract = {Many EDI researchers and practitioners have recognized the importance of high penetration levels for the success of EDI. Unfortunately, such penetration is partly impeded by the resistance of small companies to become EDI capable. To investigate this issue, three major factors are identified that influence the EDI adoption practices of small firms. These factors are: organizational readiness (because of the low levels of IT sophistication and resource availability of small firms), external pressures to adopt (because of the weak market positions of small firms and the network nature of the technology), and perceived benefits (because of the limited impact that IT has on small firms due to under-utilization and lack of integration). By combining the anticipated effects of these factors, we developed a framework of EDI adoption by small businesses. The applicability of this framework is empirically demonstrated using the results of seven case studies. Finally, recommendations are made for the development of successful EDI partner expansion plans. These include the development of a long-term EDI partner expansion plan from the very beginning, the individual assessment of each partner's EDI preparedness level, and the selection of appropriate influence tactics to expedite adoption by small partners. Specifically, it is suggested that EDI initiators pursue promotional efforts to improve partners' perceptions of EDI benefits, provide financial and technological assistance to partners with low organizational readiness, and carefully select and enact influence strategies to reduce resistance.},
author = {Iacovou, Charalambos L. and Benbasat, Izak and Dexter, Albert S.},
doi = {10.2307/249629},
issn = {02767783},
journal = {MIS Quarterly: Management Information Systems},
keywords = {Electronic commerce,Electronic data interchange,Interorganizational systems,Small business},
number = {4},
pages = {465--485},
publisher = {JSTOR},
title = {{Electronic data interchange and small organizations: Adoption and impact of technology}},
url = {https://doi.org/10.2307{\%}2F249629},
volume = {19},
year = {1995}
}
@article{Ferri_2017,
abstract = {The aim of this study is to analyze the reasons behind the adoption of cloud computing and its implementation process in startup firms as well as to verify the advantages and disadvantages deriving from the adoption of this tool and how it could increase entrepreneurial activities. We applied a research framework developed by previous scholars on cloud adoption within SMEs in an attempt to adapt it to startup firms. In particular, we conducted a case study in an Italian technological startup.Our results show that cloud technology supports and facilitates entrepreneurial activity, especially reducing several entry barriers for new entrepreneurs. This study contributes to the existing literature on cloud computing, and it has several managerial implications. First, it shows that setting up the organizational model on cloud computing allows entrepreneurs to reduce organizational efforts and ICT investments. Furthermore, this technology can reduce diversification costs by eliminating entry barriers, thus opening new markets and opportunities for entrepreneurs.},
author = {Ferri, Luca and Maffei, Marco and Mangia, Gianluigi and Tomo, Andrea},
doi = {10.5539/ibr.v10n5p73},
issn = {1913-9004},
journal = {International Business Research},
number = {5},
pages = {73},
publisher = {Canadian Center of Science and Education},
title = {{Analyzing Cloud-based Startups: Evidence from a Case Study in Italy}},
url = {https://doi.org/10.5539{\%}2Fibr.v10n5p73},
volume = {10},
year = {2017}
}
@article{Hartmann_2016,
abstract = {Purpose: The purpose of this paper is to derive a taxonomy of business models used by start-up firms that rely on data as a key resource for business, namely data-driven business models (DDBMs). By providing a framework to systematically analyse DDBMs, the study provides an introduction to DDBM as a field of study. Design/methodology/approach: To develop the taxonomy of DDBMs, business model descriptions of 100 randomly chosen start-up firms were coded using a DDBM framework derived from literature, comprising six dimensions with 35 features. Subsequent application of clustering algorithms produced six different types of DDBM, validated by case studies from the study's sample. Findings: The taxonomy derived from the research consists of six different types of DDBM among start-ups. These types are characterised by a subset of six of nine clustering variables from the DDBM framework. Practical implications: A major contribution of the paper is the designed framework, which stimulates thinking about the nature and future of DDBMs. The proposed taxonomy will help organisations to position their activities in the current DDBM landscape. Moreover, framework and taxonomy may lead to a DDBM design toolbox. Originality/value: This paper develops a basis for understanding how start-ups build business models capture value from data as a key resource, adding a business perspective to the discussion of big data. By offering the scientific community a specific framework of business model features and a subsequent taxonomy, the paper provides reference points and serves as a foundation for future studies of DDBMs.},
author = {Hartmann, Philipp Max and Zaki, Mohamed and Feldmann, Niels and Neely, Andy},
doi = {10.1108/IJOPM-02-2014-0098},
issn = {17586593},
journal = {International Journal of Operations and Production Management},
keywords = {Big data,Business model,Data-driven business model,Start-up business model},
number = {10},
pages = {1382--1406},
publisher = {Emerald},
title = {{Capturing value from big data – a taxonomy of data-driven business models used by start-up firms}},
url = {https://doi.org/10.1108{\%}2Fijopm-02-2014-0098},
volume = {36},
year = {2016}
}
@article{Kangarlou_2011,
abstract = {Infrastructure as a Service (IaaS) has become an increasingly popular type of service for both private and public clouds. The virtual infrastructures that enable IaaS support multitenancy by multiplexing the computational resources of data centers and result in substantial reductions in operational costs. Since hardware and software failures occur on a routine basis in large-scale systems, it is imperative for cloud providers to offer various failure recovery options for distributed services hosted on such infrastructures. In this article we present GENI-VIOLIN, a new cloud capability that can checkpoint a stateful distributed service while incurring very low overhead. The unique aspect of GENI-VIOLIN compared to previous work is that GENI-VIOLIN exploits programmable OpenFlow switches to provide checkpointing services in the network, thereby requiring minimal changes to the end host virtualization framework. We have developed a prototype of GENI-VIOLIN using the GENI infrastructure, and have demonstrated GENI-VIOLINAs checkpoint and restore capability across multiple GENI sites. {\textcopyright} 2011 IEEE.},
author = {Kangarlou, Ardalan and Xu, Dongyan and Kozat, Ulas C. and Padala, Pradeep and Lantz, Bob and Igarashi, Ken},
doi = {10.1109/MNET.2011.5958003},
issn = {08908044},
journal = {IEEE Network},
number = {4},
pages = {12--19},
publisher = {Institute of Electrical and Electronics Engineers ({\{}IEEE{\}})},
title = {{In-network live snapshot service for recovering virtual infrastructures}},
url = {https://doi.org/10.1109{\%}2Fmnet.2011.5958003},
volume = {25},
year = {2011}
}
@inproceedings{Almorsy_2011,
abstract = {Although the cloud computing model is considered to be a very promising internet-based computing platform, it results in a loss of security control over the cloud-hosted assets. This is due to the outsourcing of enterprise IT assets hosted on third-party cloud computing platforms. Moreover, the lack of security constraints in the Service Level Agreements between the cloud providers and consumers results in a loss of trust as well. Obtaining a security certificate such as ISO 27000 or NIST-FISMA would help cloud providers improve consumers trust in their cloud platforms' security. However, such standards are still far from covering the full complexity of the cloud computing model. We introduce a new cloud security management framework based on aligning the FISMA standard to fit with the cloud computing model, enabling cloud providers and consumers to be security certified. Our framework is based on improving collaboration between cloud providers, service providers and service consumers in managing the security of the cloud platform and the hosted services. It is built on top of a number of security standards that assist in automating the security management process. We have developed a proof of concept of our framework using .NET and deployed it on a testbed cloud platform. We evaluated the framework by managing the security of a multi-tenant SaaS application exemplar. {\textcopyright} 2011 IEEE.},
author = {Almorsy, Mohemed and Grundy, John and Ibrahim, Amani S.},
booktitle = {Proceedings - 2011 IEEE 4th International Conference on Cloud Computing, CLOUD 2011},
doi = {10.1109/CLOUD.2011.9},
isbn = {9780769544601},
keywords = {Cloud computing,Cloud computing security,Cloud computing security management},
month = {jul},
pages = {364--371},
publisher = {IEEE},
title = {{Collaboration-based cloud computing security management framework}},
url = {https://doi.org/10.1109{\%}2Fcloud.2011.9},
year = {2011}
}
@inproceedings{Cheng_2012,
abstract = {As more and more mobile devices are emerging in the market, we are rapidly entering a multi-device digital world where we expect to have a seamless cross-device experience, e.g., moving elements and functionalities from one device to another device without any interruption, controlling one device from another device remotely, or sharing and synchronizing content and user interactions on multiple devices simultaneously. These cross-device operations are highly desirable to users in web applications, but unfortunately they are not supported by existing application frameworks. In this paper, we propose a virtual browser which can facilitate cross-device operations according to a pre-defined hint file for enabling multi-device web applications. By splitting a single DOM tree into multiple sub-DOM trees, our proposed virtual browser is able to dynamically manage sub-views on multiple devices and logically link them into a single virtual page environment. As compared to existing frameworks, our virtual browser allows developers to build new multi-device web applications or port their existing web applications into a multi-device environment with much less effort. {\textcopyright} 2012 ACM.},
author = {Cheng, Bin},
booktitle = {Proceedings of the International Workshop on Multi-Device App Middleware 2012, Multi-Device 2012 - Co-located with ACM/IFIP/USENIX 13th International Conference on Middleware},
doi = {10.1145/2405172.2405175},
isbn = {9781450316170},
keywords = {DOM splitting,multi-device,multi-screen,state and event synchronization,virtual browser,web application},
publisher = {{\{}ACM{\}} Press},
title = {{Virtual browser for enabling multi-device web applications}},
url = {https://doi.org/10.1145{\%}2F2405172.2405175},
year = {2012}
}
@inproceedings{Guo_2007,
abstract = {Multi-tenancy technology is one of key competencies for network delivery services to achieve higher profit margin by leveraging the economic of scale. This paper explores the requirements and challenges of the native multi-tenancy pattern which have the potential of serving a large volume of clients simultaneously. We provide a framework with a set of multi-tenancy common services to help people design and implement a high quality native multi-tenant application more efficiently. Due to the essential requirement to guarantee service quality with high share efficiency, we present approaches and principles to support better isolations among tenants in many aspects such as security, performance, availability, administration etc. We have already achieved many hand on experiences by applying parts of the design and principles into a real multi-tenant application, and identified some future research points to better safeguard the quality of service for each tenant. {\textcopyright} 2007 IEEE.},
author = {Chang, Jie Guo and Sun, Wei and Huang, Ying and Zhi, Hu Wang and Gao, Bo},
booktitle = {Proceedings - The 9th IEEE International Conference on E-Commerce Technology; The 4th IEEE International Conference on Enterprise Computing, E-Commerce and E-Services, CEC/EEE 2007},
doi = {10.1109/CEC-EEE.2007.4},
isbn = {0769529135},
month = {jul},
pages = {551--558},
publisher = {IEEE},
title = {{A framework for native multi-tenancy application development and management}},
url = {https://doi.org/10.1109{\%}2Fcec-eee.2007.4},
year = {2007}
}
@article{Kranz_2016,
abstract = {The increasing popularity of Software as a Service has strongly affected the established business model of on-premise enterprise software. Software as a Service has distinctive characteristics of disruptive innovations that typically create several difficulties for incumbent firms, in particular with regard to adapting business models. To date, however, little empirical understanding exists regarding the dynamics of business model change – a topic of special importance to the highly dynamic software industry, which is characterised by rapid and regular emergence of disruptive innovations. As disruptive innovations require gathering distant knowledge and experimenting with new ideas, this study addresses theoretical gaps regarding the role of absorptive capacity and organisational ambidexterity in the process of business model change owing to the emergence of a disruptive innovation. Drawing on evidence from multiple case studies of six incumbent vendors of enterprise resource-planning software and informed by a thorough review of related secondary data, we investigate the pace and path of incumbents' business model adaptations. We propose a theoretical model that refines prior literature on absorptive capacity and organisational ambidexterity, particularly with regard to the process of business model change. This study identifies further technological factors that determine how and why incumbents change business models. In addition, our study provides in-depth insights on the technological trajectory of enterprise resource-planning software switching from on-premise to on-demand software services. {\textcopyright} 2016 Blackwell Publishing Ltd.},
author = {Kranz, Johann J. and Hanelt, Andr{\'{e}} and Kolbe, Lutz M.},
doi = {10.1111/isj.12102},
issn = {13652575},
journal = {Information Systems Journal},
keywords = {Software as a Service,absorptive capacity,business model change,cloud computing,disruptive innovation,organisational ambidexterity},
number = {5},
pages = {477--517},
publisher = {Wiley},
title = {{Understanding the influence of absorptive capacity and ambidexterity on the process of business model change – the case of on-premise and cloud-computing software}},
url = {https://doi.org/10.1111{\%}2Fisj.12102},
volume = {26},
year = {2016}
}
@inproceedings{Samrajesh_2013,
abstract = {Today as software applications tend to move towards cloud computing infrastructure, the energy requirements at datacenter also tend to rise significantly. Multi-tenancy enables SaaS providers offer a single application to multiple different tenants (i.e. organizations) simultaneously. Multi-tenancy has various advantages including effective version control, cost control and much more. However, the energy consumption at datacenter is still a challenge, in modern CPU, dynamic voltage/frequency scaling is used as a standard to achieve energy efficiency in processors. However, an idle server utilizes up to 70{\%} of its peak energy requirement to run system software and maintain essential hardware devices. In this paper, we propose an energy-aware application component migration method that computes the load of the datacenter servers by considering the number of components attached to the servers, count of tenant users accessing the application components; components strike rate and various other vital factors in choosing components to migrate. When all components of the underutilized servers are migrated the server is powered off to conserve energy. We evaluate our proposed algorithm using discrete event simulation. Our evaluation and discussion exhibits the usefulness of the proposed solution by reducing the number of server up and reducing energy consumption at datacenter. {\textcopyright} 2013 IEEE.},
author = {Samrajesh, M. D. and Gopalan, N. P.},
booktitle = {2013 15th International Conference on Advanced Computing Technologies, ICACT 2013},
doi = {10.1109/ICACT.2013.6710502},
isbn = {9781467328180},
keywords = {Cloud Computing,Energy,Green Computing,Multi-tenancy,SaaS},
publisher = {IEEE},
title = {{Component based energy aware multi-tenant application in software as-a service}},
url = {https://doi.org/10.1109{\%}2Ficact.2013.6710502},
year = {2013}
}
@article{Lishko_2013,
abstract = {Current knowledge of the mechanisms of blood coagulation does not provide an answer to one pivotal question: why is, in contrast to a pathological thrombus, the growth of normal hemostatic clot after blood vessel injury suddenly terminated? In the present paper, we summarize the results of our investigations that give an answer to this question. We show that the surface of fibrin clot in the circulation is coated with a thin metastable layer of fibrinogen which is not able to support adhesion of blood cells. Consequently, platelets and leukocytes, the cells expressing adhesive integrins, are incapable of consolidatingtheir grip on the surface and washed away by blood flow, thereby preventing the thrombus propagation. The cells that escaped this fibrinogen shield and reached a solid fibrin matrix use an additional mechanism -the ability to activate plasminogen bound either to the surface of cells or to fibrin. Plasmin formed at the interface between the cells and the clot locally degrades fibrin resulting in the fragmentation of the surface rendering it unstable, non-adhesive and therefore non-thrombogenic. Thus, the growth of hemostatic thrombus is halted by two mechanisms, fibrinogen-and plasminogen-dependent, both of which are based on the same principle -the generation of the mechanically unstable, non-adhesive surface.},
author = {Lishko, V. K. and Yermolenko, I. S. and Podolnikova, N. P. and Ugarova, T. P.},
doi = {10.15407/ubj85.06.094},
issn = {02018470},
journal = {Ukrain'skyi Biokhimichnyi Zhurnal},
keywords = {Fibrin,Fibrinogen,Mechanical vascular injury,Plasmin,Plasminogen,Plasminogen activation},
number = {6},
pages = {94--105},
publisher = {National Academy of Sciences of Ukraine (Co. {\{}LTD{\}} Ukrinformnauka)},
title = {{A novel mechanism cont rolling the growth of hemostatic thrombi}},
url = {https://doi.org/10.15407{\%}2Fubj85.06.094},
volume = {85},
year = {2013}
}
@inproceedings{Xiaojun_2013,
abstract = {SaaS (Software as a Service) applications need to be customizable to fulfill the various specific business needs of individual tenants. A tenant may customize with the same application more than once, which commonly occur with changed functional and quality requirements as time goes. Preservation of history tenancy metadata can contribute to the tenant mistakes recovery or as a starting point for next customization. If SaaS applications maintain only the latest customization content for each tenant, it will be very inconvenience. In particular, tenancy history metadata can be used to adjust templates. Therefore, we propose importance of preservation for tenancy history metadata. In order to improve the convenience of on-demand customization and user experience, shorten the tenants' customization time, improved QoS; we also propose a method for adjusting template objects dynamically based on XML structured features for tenancy metadata. This method can adjust according to the update of tenancy history metadata, when the requirements of tenants change, the template update accordingly by analyzing tenancy history metadata from Graphic User Interface (GUI), workflow, service, and data layer. The updated templates will support customization in a cost effective way, in addition, can be provided to the Independent Software Developers (ISV) as a reference in next application upgrade. Finally, experiments show that template adjustment algorithm in the application is feasible and efficient. {\textcopyright} 2012 IEEE.},
author = {Xiaojun, Ren and Yongqing, Zheng and Lanju, Kong},
booktitle = {Proceedings of the 2013 3rd International Conference on Intelligent System Design and Engineering Applications, ISDEA 2013},
doi = {10.1109/ISDEA.2012.293},
isbn = {9780769549231},
keywords = {Adjust template objects dynamically,Customization,ISV,SaaS,Templates,Tenancy history metadata},
month = {jan},
pages = {1242--1247},
publisher = {IEEE},
title = {{SaaS template evolution model based on tenancy history}},
url = {https://doi.org/10.1109{\%}2Fisdea.2012.293},
year = {2013}
}
@article{Kriouile_2019,
abstract = {Software as a Service cloud computing model favorites the Multi-Tenancy as a key factor to exploit economies of scale. However Multi-Tenancy present several disadvantages. Therein, our approach comes to optimize instances assigned to multi-tenants with a solution using rich-variant components while ensuring more economies of scale and avoiding tenants hesitation to share resources. The paper present the theoretical and pragmatic cases of a user-aware multi-tenancy SaaS approach focused on graph-based algorithms. The theoretical case consists in having a set of tenants while the pragmatic case consists in adding a new tenants to a set of tenants.},
author = {Kriouile, Houda and {El Asri}, Bouchra},
doi = {10.5539/cis.v12n1p1},
issn = {1913-8989},
journal = {Computer and Information Science},
month = {jan},
number = {1},
pages = {1},
publisher = {Canadian Center of Science and Education},
title = {{Theoretical and Pragmatic Cases of a Rich-Variant Approach for a User-Aware Multi-Tenant SaaS Applications}},
url = {https://doi.org/10.5539{\%}2Fcis.v12n1p1},
volume = {12},
year = {2019}
}
@inproceedings{Gao_2013,
abstract = {With the fast advance of cloud computing, developing software-as-a-service (SaaS) is becoming a hot topic in cloud computing and engineering. Due to new features of SaaS applications, SaaS testing becomes an interesting hot topic for both industry and research communities. Although there are a number of published papers discussing cloud testing, there is a lack of research papers addressing new issues, challenges, and needs in SaaS testing. This paper provides a tutorial to discuss SaaS testing, including its concepts, focuses and objective, test process, test environments, and requirements. Moreover, the paper discusses the special SaaS features, and examines the related issues and challenges and needs in SaaS testing. {\textcopyright} 2012 IEEE.},
author = {Gao, Jerry and Bai, Xiaoying and Tsai, W. T. and Uehara, Tadahiro},
booktitle = {Proceedings - 2013 IEEE 7th International Symposium on Service-Oriented System Engineering, SOSE 2013},
doi = {10.1109/SOSE.2013.98},
isbn = {9780769549446},
keywords = {Cloud engineering,Cloud testing,SaaS engineering,SaaS testing,Software testing,Software-as-a- Service (SaaS)},
month = {mar},
pages = {409--415},
publisher = {IEEE},
title = {{SaaS testing on clouds - Issues, challenges, and needs}},
url = {https://doi.org/10.1109{\%}2Fsose.2013.98},
year = {2013}
}
@article{Al_Shardan_2015,
abstract = {Enterprise resource planning (ERP) systems are the organizations tickets to the global market. Thus, organizations can manage and coordinate all functions, processes, resources and data from different departments by a single software. However, many organizations consider the cost of traditional ERP is expensive and look for alternative affordable solutions within their budget. One of these alternative solutions is providing ERP over a software as a service (SaaS) model. A key feature of any SaaS system is the multi-tenancy architecture where multiple customers (tenants) share the system software. However, the SaaS developers accommodate each tenant's unique requirements by allowing tenant-level customization or configuration. While customization requires source code changes and in most cases a programming experience, the configuration process allows user to change many features within a pre-defined scope in an easy and controlled manner. Although literature provides many techniques to accomplish the configuration process in different SaaS systems, the nature and complexity of SaaS ERP are merely described in previous researches. Thus, this research is built on strong knowledge regarding the configuration in SaaS to define specifically the configuration borders in SaaS ERP and to design a configuration service with the consideration of the different configuration aspects. Index Terms-Configuration, software as a service, multi-tenancy, ERP.},
author = {Al-Shardan, Mona Misfer and Ziani, Djamal},
doi = {10.7763/lnse.2015.v3.173},
issn = {23013559},
journal = {Lecture Notes on Software Engineering},
number = {2},
pages = {95--100},
publisher = {{\{}EJournal{\}} Publishing},
title = {{Configuration as a Service in Multi-Tenant Enterprise Resource Planning System}},
url = {https://doi.org/10.7763{\%}2Flnse.2015.v3.173},
volume = {3},
year = {2015}
}
@incollection{M_ller_2009,
abstract = {Since the emerge of Salesforce.com, more and more business applications tend to move towards Software as a Service. In order to target Small and Medium-sized Enterprises, platform providers need to lower their operational costs and establish an ecosystem of partners, customizing their generic solution, to push their products into spot markets. This paper categorizes customization options, identifies cornerstones of a customizable, multi-tenancy aware infrastructure, proposes a framework that encapsulates multi-tenancy, and introduces a technique for partner back-end customizations with regard to a given real-world scenario. {\textcopyright} 2009 Springer Berlin Heidelberg.},
author = {M{\"{u}}ller, J{\"{u}}rgen and Kr{\"{u}}ger, Jens and Enderlein, Sebastian and Helmich, Marco and Zeier, Alexander},
booktitle = {Lecture Notes in Business Information Processing},
doi = {10.1007/978-3-642-01347-8_6},
isbn = {9783642013461},
issn = {18651348},
keywords = {Design,Enterprise resource planning,Multi-tenancy,Software as a service},
pages = {66--77},
publisher = {Springer Berlin Heidelberg},
title = {{Customizing enterprise software as a service applications: Back-end extension in a multi-tenancy environment}},
url = {https://doi.org/10.1007{\%}2F978-3-642-01347-8{\_}6},
volume = {24 LNBIP},
year = {2009}
}
@incollection{ARCHITECTURE_TECHNOLOGY_CORPORATION_1991,
author = {{ARCHITECTURE TECHNOLOGY CORPORATION}},
booktitle = {Personal Computer Local Networks Report},
doi = {10.1016/b978-1-85617-093-2.50021-3},
pages = {145--150},
publisher = {Elsevier},
title = {{Microsoft LAN Manager Version 2.0}},
url = {https://doi.org/10.1016{\%}2Fb978-1-85617-093-2.50021-3},
year = {1991}
}
@inproceedings{Manduca_2014,
abstract = {In the Software as a Service (SaaS) distribution model, the software belongs to the service provider and clients act as tenants who pay to use the software. However, sparse documentation and problem-specific solutions imply that building a scalable, secure and configurable Software as a Service is not an easy task. This paper describes a reusable approach for implementing Single Database, Multitenant Software as a Service from existing Web Applications by adding mul-titenancy as an aspect of the Software. The approach uses architectural components, design patterns and current mainstream programming language functionality without requiring extensive changes to the original Web application. We used our approach to develop both a real-world use case, built in Ruby on Rails, and a reference application, built in Java, which is freely available. Copyright 2014 ACM.},
author = {Manduca, Alexandre Michetti and Munson, Ethan V. and Fortes, Renata P.M. and Pimentel, Mariada Gra{\c{c}}a C.},
booktitle = {Proceedings of the ACM Symposium on Applied Computing},
doi = {10.1145/2554850.2555072},
isbn = {9781450324694},
keywords = {Architecture,Components,Multi Tenancy,Reuse,SaaS,Software as a Service},
pages = {751--756},
publisher = {{\{}ACM{\}} Press},
title = {{A nonintrusive approach for implementing single database, multitenant services from Web Applications}},
url = {https://doi.org/10.1145{\%}2F2554850.2555072},
year = {2014}
}
@incollection{M_kil__2010,
abstract = {Software-as-a-Service (SaaS) is a relatively new and much hyped model of software delivery where the software is procured as a service over the Internet. We found that there were several different definitions of SaaS. Based on these definitions, we distilled a list of five characteristics that are required for a firm to be considered a SaaS provider. Using survey data from the Finnish software industry, we tested the proposed criteria. Closer examination of the survey indicated the criteria were necessary but not sufficient. Therefore, we extended the criteria to better grasp the phenomenon and tested the changes through a qualitative validation. Also, we found that while a large number of firms are producing software that is technically SaaS, pure SaaS-based business models are much more rare in Finland. {\textcopyright} 2010 Springer-Verlag Berlin Heidelberg.},
author = {M{\"{a}}kil{\"{a}}, Tuomas and J{\"{a}}rvi, Antero and R{\"{o}}nkk{\"{o}}, Mikko and Nissil{\"{a}}, Jussi},
booktitle = {Lecture Notes in Business Information Processing},
doi = {10.1007/978-3-642-13633-7_10},
isbn = {9783642136320},
issn = {18651348},
keywords = {Qualitative study,Software as a service,Survey},
pages = {115--124},
publisher = {Springer Berlin Heidelberg},
title = {{How to define Software-as-a-Service - An empirical study of Finnish SaaS providers}},
url = {https://doi.org/10.1007{\%}2F978-3-642-13633-7{\_}10},
volume = {51 LNBIP},
year = {2010}
}
@inproceedings{Tsai_2010,
abstract = {Software as a Service (SaaS) with multi-tenancy architecture is a popular approach. To support a significant number of tenants, SaaS applications need be customizable to fulfill the various functional and quality requirements of individual tenants. This paper presents a unified and innovative multi-layered customization framework, to support and manage the variability of SaaS applications and tenants-specific requirements. Ontology is used to derive customization and deployment information for tenants cross layers. This framework also has an intelligent recommendation engine to support new tenants to deploy using information from existing deployed SaaS applications. A case study in mortgage application is used to demonstrate the proposed model.},
author = {Tsai, Wei Tek and Shao, Qihong and Li, Wu},
booktitle = {Proceedings - 2010 IEEE International Conference on Service-Oriented Computing and Applications, SOCA 2010},
doi = {10.1109/SOCA.2010.5707139},
isbn = {9781424498017},
publisher = {IEEE},
title = {{OIC: Ontology-based intelligent customization framework for SaaS}},
url = {https://doi.org/10.1109{\%}2Fsoca.2010.5707139},
year = {2010}
}
@article{Aleem_2016,
abstract = {Software game is a kind of application that is used not only for entertainment, but also for serious purposes that can be applicable to different domains such as education, business, and health care. Multidisciplinary nature of the game development processes that combine sound, art, control systems, artificial intelligence (AI), and human factors, makes the software game development practice different from traditional software development. However, the underline software engineering techniques help game development to achieve maintainability, flexibility, lower effort and cost, and better design. The purpose of this study is to assesses the state of the art research on the game development software engineering process and highlight areas that need further consideration by researchers. In the study, we used a systematic literature review methodology based on well-known digital libraries. The largest number of studies have been reported in the production phase of the game development software engineering process life cycle, followed by the pre-production phase. By contrast, the post-production phase has received much less research activity than the pre-production and production phases. The results of this study suggest that the game development software engineering process has many aspects that need further attention from researchers; that especially includes the postproduction phase.},
author = {Aleem, Saiqa and Capretz, Luiz Fernando and Ahmed, Faheem},
doi = {10.1186/s40411-016-0032-7},
issn = {2195-1721},
journal = {Journal of Software Engineering Research and Development},
month = {nov},
number = {1},
publisher = {Sociedade Brasileira de Computacao - {\{}SB{\}}},
title = {{Game development software engineering process life cycle: a systematic review}},
url = {https://doi.org/10.1186{\%}2Fs40411-016-0032-7},
volume = {4},
year = {2016}
}
@inproceedings{Liu_2010,
abstract = {SaaS is a new delivery model for the software development and application. Providers tend to make their SaaS products achieve higher level of maturity, serves more people, satisfy more different individual requirements, while maintaining efficiency and flexibility. This paper introduces a new SaaS application model called SaaS with tenancy agency. It adds two new layers: tenancy process layer and tenancy agency layer, to traditional SOA architecture. First, the system proposed in this paper splits the business process into unified elements, and handles these elements in the same actuator. The actuator focusing on repeated work reduces processes switching time and promotes efficiency. Second, the system combines these elements to tenancy processes to achieve customization of the process. Third, the system sets one tenancy agency for each group of tenants with similar requirements. In such architecture, agencies avoid being too huge and work with noninterference. Platform has been made to produce and run SaaS in this architecture. SaaS with tenancy agency is proved to be feasible. {\textcopyright} 2010 IEEE.},
author = {Liu, Wenyu and Zhang, Bin and Liu, Ying and Wang, Deshuai and Zhang, Yichuan},
booktitle = {Proceedings - 2nd IEEE International Conference on Advanced Computer Control, ICACC 2010},
doi = {10.1109/ICACC.2010.5486635},
isbn = {9781424458462},
keywords = {Customizable,Maturity,SaaS,Tenancy},
pages = {463--466},
publisher = {IEEE},
title = {{New model of SaaS: SaaS with tenancy agency}},
url = {https://doi.org/10.1109{\%}2Ficacc.2010.5486635},
volume = {2},
year = {2010}
}
@inproceedings{Saleh_2014,
abstract = {Software-as-a-Service (SaaS) is emerging as a new software delivery model, where the application and its associated data are hosted in the cloud. Due to the nature of SaaS and the cloud in general, where the data and the computation are beyond the control of the user, data privacy and security becomes a vital factor in this new paradigm. In multi-tenant SaaS applications, the tenants (i.e., Companies) become concerned about the confidentiality of their data since several tenants are consolidated onto a shared infrastructure (i.e., Databases). Consequently, two main questions raise. First, how to prohibit a tenant from accessing other's data? Second, how to avoid the security threats from co-located competing tenants? In this paper, we address the second question. We present Sec Place, a resource allocation model designed to increase the level of security for tenants sharing the same infrastructure. Sec Place avoids hosting competing companies on the same database instance. We minimize the risk of co-resident tenants by preventing any two tenants of the same business type to be hosted on the same database server. Sec Place utilizes the usage of tenant subscription data, such as business type and tenant size and place the tenant accordingly. We conduct extensive experiments to validate our approach. The results show that our approach is practical, achieves its goal, and have a moderate complexity.},
author = {Saleh, Eyad and Sianipar, Johannes and Takouna, Ibrahim and Meinel, Christoph},
booktitle = {Proceedings - 2014 IEEE International Conference on Ubiquitous Intelligence and Computing, 2014 IEEE International Conference on Autonomic and Trusted Computing, 2014 IEEE International Conference on Scalable Computing and Communications and Associated Sy},
doi = {10.1109/UIC-ATC-ScalCom.2014.31},
isbn = {9781479976461},
keywords = {Cloud Computing,Isolation,Multi-tenancy,SaaS,Security},
pages = {596--602},
publisher = {IEEE},
title = {{SecPlace: A Security-Aware Placement Model for Multi-tenant SaaS Environments}},
url = {https://doi.org/10.1109{\%}2Fuic-atc-scalcom.2014.31},
year = {2014}
}
@inproceedings{Wei_Chen_2010,
abstract = {As a global rise of new model of software service, SaaS (Software as a Service) is becoming a new direction of software industry in the next decade. SaaS eliminates the demand for enterprises to purchase, construct, and maintain the infrastructure and software. They can pay only a little money to rent applications from SaaS vendors. However, it has brought new challenges for the techniques and methods of software development, including customization, security and scalability. This paper proposes a flexible business logic customization framework for SaaS applications, using domain engineering based business rule template approach. Both of the usability and performance are taken into account. Finally an example has been conducted to show the practicability of the framework. {\textcopyright}2010 IEEE.},
author = {Chen, Wei and Shen, Beijun and Qi, Zhengwei},
booktitle = {Proceedings of the 2010 IEEE International Conference on Progress in Informatics and Computing, PIC 2010},
doi = {10.1109/PIC.2010.5687477},
isbn = {9781424467860},
keywords = {Business logic,Business rule template,Domain engineering,SaaS,Software customization},
pages = {584--588},
publisher = {IEEE},
title = {{Template-based business logic customization for SaaS applications}},
url = {https://doi.org/10.1109{\%}2Fpic.2010.5687477},
volume = {1},
year = {2010}
}
@inproceedings{Sunikka_2008,
abstract = {Personalization is a phenomenon that intrigues and confuses. Personalized offerings promise customer attention, loyalty and safe haven against commoditization. However, these promises do not materialize unless customers accept personalization as a means to enhance their consuming experience. Three points of views are offered to personalization in this paper. An analysis of various personalization concepts shows that the basic concept of personalization is reaching maturity even though fresh views are added to it, e.g. context-based personalization. Secondly, a text-mining based approach profiles the personalization research based on bibliometric data on nearly 800 articles, and indicates that the research field is fairly fragmented, and that mass customization and customization research clearly diverges from personalization research. Based on a selection of articles, a further analysis classifies the type of research and research contexts that are the most common. Finally, this research also suggests a conceptualization of personalization. {\textcopyright} 2008 IEEE.},
author = {Sunikka, Anne and Bragge, Johanna},
booktitle = {Proceedings of the Annual Hawaii International Conference on System Sciences},
doi = {10.1109/HICSS.2008.500},
isbn = {0769530753},
issn = {15301605},
month = {jan},
publisher = {IEEE},
title = {{What, who and where: Insights into personalization}},
url = {https://doi.org/10.1109{\%}2Fhicss.2008.500},
year = {2008}
}
@inproceedings{Wei_Tek_Tsai_2013,
abstract = {Cloud computing often uses the multi-tenancy architecture where tenants share system software. It is one of the key features of Software as a Service (SaaS) that enables higher profit margin by leveraging the economics of scale [1]. Tenants residing on a multi-tenant application appear to be the sole owner of the application and not aware of the existence of others. A multi-tenant SaaS application accommodates each tenant's unique requirements by allowing tenant-level customization. A complex SaaS application that supports hundreds, even thousands of tenants could have hundreds of customization points with each of them providing multiple options, and this could result in a huge number of ways to customize the application. This paper proposes an innovative customization approach that studies similar tenants' customization choices and provides guided semi-automated customization process for the future tenants. A semi-automated customization process could enable tenants to quickly implement the customization that best suits their business needs. {\textcopyright} 2012 IEEE.},
author = {Tsai, Wei Tek and Sun, Xin},
booktitle = {Proceedings - 2013 IEEE 7th International Symposium on Service-Oriented System Engineering, SOSE 2013},
doi = {10.1109/SOSE.2013.44},
isbn = {9780769549446},
month = {mar},
pages = {1--12},
publisher = {IEEE},
title = {{SaaS multi-tenant application customization}},
url = {https://doi.org/10.1109{\%}2Fsose.2013.44},
year = {2013}
}
@article{Mathiassen_2014,
abstract = {International software firms face particular software process challenges in terms of competing interests and process variations across organizational units and geographical sites. To address this, Ericsson developers applied a general industrial approach to mass customization that focused on four key tactics: adaptive, cosmetic, transparent, and collaborative mass customization. On the basis of this experience, they discovered the strengths, weaknesses, and best deployment conditions for each tactic, and learned several lessons along the way.},
author = {Mathiassen, Lars and Sandberg, Anna Borjesson},
doi = {10.1109/MS.2014.21},
issn = {07407459},
journal = {IEEE Software},
keywords = {mass customization,software engineering,software processes,software tailoring},
month = {nov},
number = {6},
pages = {62--69},
publisher = {Institute of Electrical and Electronics Engineers ({\{}IEEE{\}})},
title = {{Process mass customization in a global software firm}},
url = {https://doi.org/10.1109{\%}2Fms.2014.21},
volume = {31},
year = {2014}
}
@incollection{Kapuruge_2011,
abstract = {With the emergence of Cloud Computing and maturity of Service Oriented Architecture (SOA), the Software-as-a-Service (SaaS) delivery model has gained popularity, due to advantages such as lower startup cost and reduced time to market. A SaaS vendor owns and takes the responsibility of maintaining a single application for multiple clients/tenants who may have similar but also varying requirements. Business process modeling (BPM) approaches can be used to package service offerings to meet these varying requirements on a shared basis. However the customizations in those business processes can be challenging. In this paper we discuss the challenges arising from single-instance multi-tenancy, and present our approach to defining business processes in SaaS applications to address those challenges. {\textcopyright} 2011 Springer-Verlag.},
author = {Kapuruge, Malinda and Colman, Alan and Han, Jun},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-24434-6_11},
isbn = {9783642244339},
issn = {03029743},
keywords = {BPM,Cloud,Multi-tenancy,SOA,SaaS},
pages = {143--157},
publisher = {Springer Berlin Heidelberg},
title = {{Achieving multi-tenanted business processes in SaaS applications}},
url = {https://doi.org/10.1007{\%}2F978-3-642-24434-6{\_}11},
volume = {6997 LNCS},
year = {2011}
}
@article{Aulkemeier_2015,
abstract = {In the beginning of the e-commerce era, retailers mostly adopted vertically integrated solutions to control the entire e-commerce value chain. However, they began to realize that to achieve agility, a better approach would be to focus on certain core capabilities and then create a partner ecosystem around them. From a technical point of view, this means it is advised to have a lightweight platform architecture with small core e-commerce functionality which can be extended by additional services from third party providers. In a typical e-commerce ecosystem with diverse information systems of network partners, integration and interoperability become critical factors to enable seamless coordination among the partners. Furthermore an increasing adoption of cloud computing technology could be observed resulting in more challenging integration scenarios involving cloud services. Thus, an e-commerce platform is required that suites the advanced needs for flexible and agile service integration. Therefore, this paper aims to present a reference architecture of a novel pluggable service platform for e-commerce. We investigate on currently available online shop platform solutions and integration platforms in the market. Based on the findings and motivated by literature on service-oriented design, we develop an architecture of a service-based pluggable platform for online retailers. This design is then instantiated by means of a prototype for an e-commerce returns handling scenario to demonstrate the feasibility of our architecture design.},
author = {Aulkemeier, Fabian and Paramartha, Mohammad Anggasta and Iacob, Maria Eugenia and van Hillegersberg, Jos},
doi = {10.1007/s10257-015-0291-6},
issn = {16179854},
journal = {Information Systems and e-Business Management},
keywords = {Cloud integration,E-commerce platform,Pluggability,Reference architecture,SOA},
number = {3},
pages = {469--489},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{A pluggable service platform architecture for e-commerce}},
url = {https://doi.org/10.1007{\%}2Fs10257-015-0291-6},
volume = {14},
year = {2016}
}
@article{Dsouza_2012,
abstract = {Many software organizations are currently transitioning from an on-premises deployment model to the Software as a Service (SaaS) model. If a company restricts changes only in the business or technical perspective, the transition leads to higher costs, poor adoption of the SaaS model, and in the worst case, the company can lose its business. Much literature focuses on changes within one domain and is generally also limited to one perspective. This paper provides stakeholders (i.e. product managers, and business managers) an integrated perspective (business and technological) with a comprehensive framework that covers changes in four domains: business/product structure, revenue logic, customer relationships, and partnerships. The applicability of the proposed framework is assessed with a case study of a large software product vendor. The paper also contributes by providing a new avenue to study SaaS, with an integrated perspective for the organizational transition period. For the industry, this paper suggests a way to assess the impacts of organizational transition towards the SaaS model. With this overview in hand, softwareproducing organizations can use the comprehensive framework to successfully transition to become SaaS vendors.},
author = {D'souza, Austin and Kabbedijk, Jaap and Seo, Dong Back and Jansen, Slinger and Brinkkemper, Sjaak},
doi = {10.2139/ssrn.2400363},
journal = {Proceedings - Pacific Asia Conference on Information Systems, PACIS 2012},
keywords = {Business models transition,Deployment models transition,On-premises software,Software vendors,Software-as-a-service},
publisher = {Elsevier {\{}BV{\}}},
title = {{Software-as-A-service: Implications for business and technology in product software companies}},
url = {https://doi.org/10.2139{\%}2Fssrn.2400363},
year = {2012}
}
@inproceedings{Cai_2009,
abstract = {Software as a Service (SaaS) is an important technology innovation as well as a business model innovation to bring new opportunities to Small and Medium Enterprises (SME). There are different SaaS provisioning methods, depending on the customer profile, the cost of the required resources, and the price that customers are willing to pay. The core technology of SaaS-ization focuses on multi-tenancy, which means supporting multiple customers over the SaaS platform at the same time. In this paper, we describe an end-to-end methodology, together with a toolkit that supports the fine granularity multi-tenancy mechanism. This means using one single application instance to support multiple tenants, an approach that could save the Cloud infrastructure resources required to support high volumes of customers. Further, the methodology could lower the entry level of SaaS operators, as well as the user subscription fees. {\textcopyright} 2009 IEEE.},
author = {Cai, Hong and Zhang, Ke and Zhou, Ming Jun and Gong, Wei and Cai, Jun Jie and Mao, Xin Sheng},
booktitle = {CLOUD 2009 - 2009 IEEE International Conference on Cloud Computing},
doi = {10.1109/CLOUD.2009.63},
isbn = {9780769538402},
keywords = {Cloud computing,Multi-tenancy,SaaSization,Software as a Service (SaaS)},
pages = {101--108},
publisher = {IEEE},
title = {{An end-to-end methodology and toolkit for fine granularity SaaS-ization}},
url = {https://doi.org/10.1109{\%}2Fcloud.2009.63},
year = {2009}
}
@inproceedings{Vetro_2012,
abstract = {Background: Existing software defect classification schemes support multiple tasks, such as root cause analysis and process improvement guidance. However, existing schemes do not assist in assigning defects to a broad range of high level software goals, such as software quality characteristics like functionality, maintainability, and usability. Aim: We investigate whether a classification based on the ISO/IEC 9126 software product quality model is reliable and useful to link defects to quality aspects impacted. Method: Six different subjects, divided in two groups with respect to their expertise, classified 78 defects from an industrial web application using the ISO/IEC 9126 quality main characteristics and sub-characteristics, and a set of proposed extended guidelines. Results: The ISO/IEC 9126 model is reasonably reliable when used to classify defects, even using incomplete defect reports. Reliability and variability is better for the six high level main characteristics of the model than for the 22 subcharacteristics. Conclusions: The ISO/IEC 9126 software quality model provides a solid foundation for defect classification. We also recommend, based on the follow up qualitative analysis performed, to use more complete defect reports and tailor the quality model to the context of use.},
author = {Vetro, Antonio and Zazworka, Nico and Seaman, Carolyn and Shull, Forrest},
booktitle = {IET Seminar Digest},
doi = {10.1049/ic.2012.0025},
isbn = {9781849195416},
keywords = {defect classification,software quality},
number = {1},
pages = {187--196},
publisher = {IET},
title = {{Using the ISO/IEC 9126 product quality model to classify defects: A controlled experiment}},
url = {https://doi.org/10.1049{\%}2Fic.2012.0025},
volume = {2012},
year = {2012}
}
@inproceedings{Song_2018,
abstract = {Enterprise software needs to be customizable, and the customization needs from a customer are often beyond what the software vendor can predict in advance. In the on-premises era, customers do deep customizations beyond vendor's prediction by directly modifying the vendor's source code and then build and operate it on their own premises. When enterprise software is moving to cloud-based multi-tenant SaaS (Software as a Service), it is no longer possible for customers to directly modify the vendor's source code, because the same instance of code is shared by multiple customers at runtime. Therefore, the question is whether it is still possible to do deep customization on multi-tenant SaaS. In this paper, we give an answer to this question with a novel architecture style to realize deep customization of SaaS using intrusive microservices. We evaluate the approach on an open source online commercial system, and discuss the further research questions to make deep customization applicable in practice.},
author = {Song, Hui and Chauvel, Franck and Solberg, Arnor},
booktitle = {Proceedings - International Conference on Software Engineering},
doi = {10.1145/3183399.3183407},
isbn = {9781450356626},
issn = {02705257},
keywords = {Architecture style,Customization,Multi-tenancy,SaaS},
pages = {97--100},
publisher = {{\{}ACM{\}} Press},
title = {{Deep customization of multi-tenant SaaS using intrusive microservices}},
url = {https://doi.org/10.1145{\%}2F3183399.3183407},
year = {2018}
}
@inproceedings{Mietzner_2008,
abstract = {Currently, several vendors and projects are building proprietary SaaS platforms where more and more applications are hosted in a Software as a Service business model. However, these proprietary platforms prevent that applications offered by different SaaS application vendors can be easily reused on the platforms offered by the different SaaS hosting providers. In this paper we describe a package format for composite configurable SaaS application packages for applications developed following a service oriented architecture. We show how the service component architecture (SCA) can be extended with variability descriptors and SaaS multi-tenancy patterns to package and deploy multitenant aware configurable composite SaaS applications. {\textcopyright} 2008 IEEE.},
author = {Mietzner, Ralph and Leymann, Frank and Papazoglou, Mike P.},
booktitle = {Proceedings - 3rd International Conference on Internet and Web Applications and Services, ICIW 2008},
doi = {10.1109/ICIW.2008.68},
isbn = {9780769531632},
month = {jun},
pages = {156--161},
publisher = {IEEE},
title = {{Defining composite configurable SaaS application packages using SCA, variability descriptors and multi-tenancy patterns}},
url = {https://doi.org/10.1109{\%}2Ficiw.2008.68},
year = {2008}
}
@inproceedings{Sengupta_2011,
abstract = {Increasingly, Software-as-a-Service (SaaS) is becoming a dominant mechanism for the consumption of software by end users. From a vendor's perspective, the benefits of SaaS arise from leveraging economies of scale, by serving a large number of customers ("tenants") through a shared instance of a centrally hosted software service. Consequently, a SaaS provider would, in general, try to drive commonality amongst the requirements of different tenants, and at best, offer a fixed set of customization options. However, many tenants would also come with custom requirements, which may be a pre-requisite for them to adopt the SaaS system. These requirements should then be addressed by evolving the SaaS system in a controlled manner, while still supporting the needs of existing tenants. This need to balance tenant variability and commonality, and to optimize on development and testing effort, can make the evolution of multi-tenant SaaS systems an interesting engineering challenge; this has strong economic undertones as well, given the "pay-per-use" subscription model of SaaS, and the cost of incremental development and maintenance to cater to new tenant needs. In this paper, we outline a set of research issues in the design, testing and maintenance of multi-tenant SaaS systems, and highlight some of the interesting optimization questions that arise in the process. Presenting specific technical solutions is beyond the scope of this paper - instead, our goal is to help shape a research agenda for multi-tenant SaaS that can provide stimulus for further investigation into this area by the software and service engineering research community. {\textcopyright} 2011 ACM.},
author = {Sengupta, Bikram and Roychoudhury, Abhik},
booktitle = {Proceedings - International Conference on Software Engineering},
doi = {10.1145/1985394.1985397},
isbn = {9781450305914},
issn = {02705257},
keywords = {Cloud computing,Multi-tenancy,Refinement,Semantics,Software-as-a-Service,Testing},
pages = {15--21},
publisher = {{\{}ACM{\}} Press},
title = {{Engineering multi-tenant Software-as-a-Service systems}},
url = {https://doi.org/10.1145{\%}2F1985394.1985397},
year = {2011}
}
@inproceedings{Mietzner_2009,
abstract = {Software as a service (SaaS) providers exploit economies of scale by offering the same instance of an application to multiple customers typically in a single-instance multitenant architecture model. Therefore the applications must be scalable, multi-tenant aware and configurable. In this paper we show how the services in a service-oriented SaaS application can be deployed using different multi-tenancy patterns. We describe how the chosen patterns influence the customizability, multi-tenant awareness and scalability of the application. Using the patterns we describe how individual services in a multitenant aware application can be not multi-tenant aware while maintaining the overall multi-tenant awareness of the application. We show based on a real-world example how the patterns can be used in practice and show how existing applications already use these patterns. {\textcopyright} 2009 IEEE.},
author = {Mietzner, Ralph and Unger, Tobias and Titze, Robert and Leymann, Frank},
booktitle = {Proceedings - 13th IEEE International Enterprise Distributed Object Computing Conference, EDOC 2009},
doi = {10.1109/EDOC.2009.13},
isbn = {9780769537856},
keywords = {Composite applications,Multi-tenancy,SOA,SaaS,Services},
pages = {131--140},
publisher = {IEEE},
title = {{Combining different multi-tenancy patterns in service-oriented applications}},
url = {https://doi.org/10.1109{\%}2Fedoc.2009.13},
year = {2009}
}
@inproceedings{Morakos_2014,
abstract = {The Cloud Computing model has imposed a number of attractive features into the infrastructure and software architectures. Software enterprises strive to exploit these features in order to grow their competitiveness and economic profits in the market. This work identifies key features of Cloud Computing, such as high availability, extensibility, customizability, synchronization, consistency and multi-tenancy. A Software-as-a-Service (SaaS) framework is presented for the realization of Multi-Tenant services and applications onto an experimental cloud infrastructure. The proposed framework provides services which make the development and management process of Multi-Tenant applications easier. Essentially, the goal of this paper is to highlight important Cloud and clustering features and show methods to realize a SaaS framework for the creation and accommodation of cloud multi-tenant applications. {\textcopyright} 2014 IEEE.},
author = {Morakos, Petros and Meliones, Apostolos},
booktitle = {IISA 2014 - 5th International Conference on Information, Intelligence, Systems and Applications},
doi = {10.1109/IISA.2014.6878755},
isbn = {9781479961719},
keywords = {Cloud Computing,Distributed Systems,Multi-Tenancy,SaaS framework,Web IDE},
month = {jul},
pages = {273--278},
publisher = {IEEE},
title = {{Design and implementation of a Cloud SaaS framework for Multi-Tenant applications}},
url = {https://doi.org/10.1109{\%}2Fiisa.2014.6878755},
year = {2014}
}
@inproceedings{Cai_2010,
abstract = {It has become more and more obvious that in Cloud Computing, applications are key drivers to make Cloud business a success. Multi-tenancy is a critical technology to allow one instance of application serving multiple customers at the same time to share Cloud resources and achieve high operational efficiency. There are different options of realizing multi-tenancy, in this paper we describe a transparent approach of making existing Web applications to support multi-tenancy and run in the public Cloud. Our approach includes intercepting the Web requests and deriving the tenant context, carrying the tenant context with a thread in the Web container, manipulating the isolation points (application artifacts that need to be isolated) in a Web application, and propagating tenant context to remote Cloud resources (such as database server, and message queue server) when necessary. With this approach, volumes of existing Web applications could quickly be provisioned through a public Cloud platform without rewriting the original source code. We have also implement a real system based on the common multi-tenancy model that separate the concerns of application developer, SaaS operator, tenant administrator, and tenant user. We finally integrate the SaaS multi-tenancy technique with Cloud platform services. {\textcopyright} 2010 IEEE.},
author = {Cai, Hong and Wang, Ning and Zhou, Ming Jun},
booktitle = {Proceedings - 2010 6th World Congress on Services, Services-1 2010},
doi = {10.1109/SERVICES.2010.48},
isbn = {9780769541297},
keywords = {Cloud computing,Multi-tenancy,Public cloud,SaaS},
month = {jul},
pages = {40--47},
publisher = {IEEE},
title = {{A transparent approach of enabling saas multi-tenancy in the cloud}},
url = {https://doi.org/10.1109{\%}2Fservices.2010.48},
year = {2010}
}
@inproceedings{Joachim_2011,
abstract = {Recent research results and practitioner experience both posit that Service-Oriented Architecture (SOA) governance is critical to successfully implement and utilize SOA. We investigate the impact of different SOA governance and management mechanisms (structures, processes, and employees) for leveraging SOA's potential to increase an organization's IT infrastructure flexibility. The results based on data from 73 SOA using organizations reveal • a negative impact of implementing new decision-making bodies on 2 dimensions of IT flexibility (IT modularity and integration) • a positive impact of the SOA management processes service management and service development on 2 dimensions of IT flexibility (modularity and integration of IT infrastructure) • a positive impact of business units collaboratively identifying jointly utilizable services on modularity • and a particularly strong impact of standards, and also of employee qualification, on all dimensions of IT infrastructure flexibility. {\textcopyright} 2011 IEEE.},
author = {Joachim, Nils and Beimborn, Daniel and Weitzel, Tim},
booktitle = {Proceedings of the Annual Hawaii International Conference on System Sciences},
doi = {10.1109/HICSS.2011.489},
isbn = {9780769542829},
issn = {15301605},
month = {jan},
publisher = {IEEE},
title = {{What are important governance and management mechanisms to achieve it flexibility in Service-Oriented Architectures (SOA)?: An empirical exploration}},
url = {https://doi.org/10.1109{\%}2Fhicss.2011.489},
year = {2011}
}
@inproceedings{Grund_2008,
abstract = {With the rise of applications in the area of software as a service it becomes crucial to operate profitable even with small profit margins. The possibility of customers to switch between different hosted solutions makes the calculation of the total cost of ownership even more important. Not only the application design is an important factor in this calculation but as well the employed storage techniques used to create and maintain thousands of instances of the same application play one of the most important roles in this game. None of the well-known commercial of the shelf databases like MySQL, PostgreSQL, etc. provides an optimized solution for multi-tenancy problems. In this paper we analyze typical operations in the area of multi-tenant databases and show how they are wired together. Based on the analysis we propose an architecture for a multi-tenant storage engine capable to overcome the problems of typical relational databases in this area. {\textcopyright} 2008 IEEE.},
author = {Grund, Martin and Schapranow, Matthieu and Krueger, Jens and Schaffner, Jan and Bog, Anja},
booktitle = {2008 IEEE Symposium on Advanced Management of Information for Globalized Enterprises, AMIGE 2008 - Proceedings},
doi = {10.1109/AMIGE.2008.ECP.37},
isbn = {9781424429721},
pages = {146--150},
publisher = {IEEE},
title = {{Shared table access pattern analysis for multi-tenant applications}},
url = {https://doi.org/10.1109{\%}2Famige.2008.ecp.37},
year = {2009}
}
@incollection{1982,
abstract = {This chapter describes R[G] modules (R is a commutative ring and G is a group). It also describes F[G] modules where F is a field. Vo(G) denotes the F[G] module consisting of invariant elements with dimF, Vo(G) = 1. All F[G] modules are F-free. The chapter discusses two corollaries—if H ⊲ G and G/H is a p-group (H is a subgroup of G). If V is an absolutely indecomposable R [G] module, then V+ is absolutely indecomposable. {\textcopyright} 1982, North-Holland Publishing Company},
booktitle = {North-Holland Mathematical Library},
doi = {10.1016/S0924-6509(08)70428-8},
issn = {09246509},
number = {C},
pages = {97--139},
publisher = {Elsevier},
title = {{Chapter III}},
url = {https://doi.org/10.1016{\%}2Fs0924-6509{\%}2808{\%}2970428-8},
volume = {25},
year = {1982}
}
@inproceedings{Kwok_2008,
abstract = {In most commercial electronic contract management applications available today, different customized code base has to be developed, deployed and operated to support each tenant. Few advanced commercial electronic contract management applications use a single code base with configuration options to support multitenants. However, a separate instance of the code base still has to be deployed and operated for each tenant even in these applications. The business model of having to support a single application instance for each tenant makes an electronic contract management application and other critical business applications out of reach for most small and medium businesses (SMBs), in particular, the very small businesses (SVBs) because of its high development and maintenance cost. Recently, a new business model of a single application instance supporting multi-tenancy based on Software as a Service (SaaS) has emerged making expensive business applications more affordable for SMBs and SVBs for multi-tenancy [1]. In this paper, we present the first of a kind multitenancy SaaS electronic contract management application. We also describe several novel methods used in the metadata, security and shared services, as well as customization and tenant extensions modules to support multi-tenancy SaaS in this application. This multi-tenancy SaaS application has shown to benefit both the application service providers as well as their tenants. This new multi-tenancy SaaS model can reduce the application hosting cost and make the application more affordable to the tenants because of its capabilities in customization and scalability while continuing to support an increasing number of tenants. It furthers benefits tenants by saving their money and time with immediate access to the latest IT innovations and infrastructure improvements on a single application code base. Most end users of tenants have found their productivities increased, the contract transaction time accelerated, contractual errors reduced in using this multi-tenancy SaaS electronic contract management application as demonstrated in several ongoing IBM pilot programs serving more than ten tenants with over 3000 end users. {\textcopyright} 2008 IEEE.},
author = {Kwok, Thomas and Nguyen, Thao and Lam, Linh},
booktitle = {Proceedings - 2008 IEEE International Conference on Services Computing, SCC 2008},
doi = {10.1109/SCC.2008.138},
isbn = {9780769532837},
month = {jul},
pages = {179--186},
publisher = {IEEE},
title = {{A software as a service with multi-tenancy support for an electronic contract management application}},
url = {https://doi.org/10.1109{\%}2Fscc.2008.138},
volume = {2},
year = {2008}
}
@article{YING_2017,
author = {YING, Shi and WANG, Rui and LI, Lin and DONG, Bo},
doi = {10.1360/n112016-00200},
issn = {1674-7267},
journal = {SCIENTIA SINICA Informationis},
month = {jun},
number = {6},
pages = {715},
publisher = {Science China Press., Co. Ltd.},
title = {{Evolutionary deployment optimization for service-oriented software in cloud{\}}{\{}Evolutionary deployment optimization for service-oriented software in cloud}},
url = {https://doi.org/10.1360{\%}2Fn112016-00200},
volume = {47},
year = {2017}
}
@inproceedings{Chen_Weiliang_2010,
abstract = {The sparse table approach is an effective storage solution for multi-tenant data in SaaS. However in the sparse table, because of the shared data storage of different tenants that have different schemas, there are so many nulls which result in a waste of storage space and query efficiency problems. We analyze the difference between the multi-tenant sparse data and the traditional sparse one such as e-commerce data and propose a multiple sparse tables approach, in which the tables have gradient columns. We carry out experiments and the results figure out that the approach can effectively reduce the space waste and improve the query performance. {\textcopyright} 2010 IEEE.},
author = {Weiliang, Chen and Shidong, Zhang and Lanju, Kong},
booktitle = {2010 2nd International Conference on Industrial and Information Systems, IIS 2010},
doi = {10.1109/INDUSIS.2010.5565824},
isbn = {9781424482177},
keywords = {Multi-tenant,Null,Sparse table},
month = {jul},
pages = {413--416},
publisher = {IEEE},
title = {{A multiple sparse tables approach for multi-tenant data storage in SaaS}},
url = {https://doi.org/10.1109{\%}2Findusis.2010.5565824},
volume = {1},
year = {2010}
}
@inproceedings{Wen_2013,
abstract = {Software-as-a-Service (SaaS) is a new service delivery model which allows customers to use the provider's applications running on a cloud infrastructure, SaaS is commonly utilized and it provides benefits to service providers and customers. As more and more SaaS service emerges, how to select qualified provider is a key problem to customers. Current quality model do not consider key features of SaaS such as security and quality of service (QoS). In this paper, a new quality model is proposed which measure the security, quality of service, and software quality of the SaaS service, from the perspective of platform, provider and customer separately. Base the quality model we proposed an evaluating model which classify the SaaS service into four level, including basic level, standard level, optimized level and integrated level. By using the quality model and evaluating model, customer can evaluate the provider and the provider can use it for quality management. {\textcopyright} 2013 IEEE.},
author = {Wen, Pang Xiong and Dong, Li},
booktitle = {Proceedings - 4th International Conference on Emerging Intelligent Data and Web Technologies, EIDWT 2013},
doi = {10.1109/EIDWT.2013.19},
isbn = {9780769550442},
keywords = {Software-as-a-Service (SaaS),evaluating model,qualiity of service (QoS),qualtiy model},
pages = {83--87},
publisher = {IEEE},
title = {{Quality model for evaluating SaaS service}},
url = {https://doi.org/10.1109{\%}2Feidwt.2013.19},
year = {2013}
}
@inproceedings{Holdaway_2009,
abstract = {Frames, which are cognitive metaphors for structuring our experiences and understanding of the world, can be transferred to others to structure their experiences, and thus to influence their understanding of the world. Though the process of developing and transferring frames is usually applied to the political and marketing worlds, it also applies to any domain where we want to influence others. As applied to best practices for reviews of technical documentation, this process can be used to change attitudes about technical reviews to benefit reviewers, information developers, and ultimately customers who rely on technical documentation to learn about technologies and complete tasks with software products. This paper discusses framing in general and how it can be applied to several areas of the technical review process. {\textcopyright}2009 IEEE.},
author = {Holdaway, Jill},
booktitle = {IEEE International Professional Communication Conference},
doi = {10.1109/IPCC.2009.5208713},
isbn = {9781424443581},
keywords = {Branding,Framing,Technical reviews},
month = {jul},
publisher = {IEEE},
title = {{Technical reviews: Framing the best of the best practices}},
url = {https://doi.org/10.1109{\%}2Fipcc.2009.5208713},
year = {2009}
}
@article{Singh_2017,
abstract = {In the present scenario, the transfer of data is an important thing between one user to another. Data is mainly sent by the distributors which are generally the owner of data to the user which wants the information mainly the trusted third parties. The information sent by the distributor must be confidential and must be shared by a secure way. Some times during sharing of data, multiple copies of information is generated by different parties which cause a huge amount of loss, this is known as data leakage. To prevent this leakage of data one must put measures in order to detect the leakage in an early stage. The purpose of this paper to discuss data leakage and its prevention by various watermarking techniques.},
author = {Singh, Abhijeet},
doi = {10.18535/ijecs/v6i4.59},
journal = {International Journal Of Engineering And Computer Science},
publisher = {Valley International},
title = {{Data Leakage Detection Using Cloud Computing}},
url = {https://doi.org/10.18535{\%}2Fijecs{\%}2Fv6i4.59},
year = {2017}
}
@inproceedings{6046201,
abstract = {Software product management (SPM) offers tools and practices for achieving business goals of a company as well as for increasing the predictability and profitability of software product development. Despite the importance of this topic, the studies of SPM have this far been fragmented. The goal of the present study is to summarize the existing knowledge in software product management and identify the areas which need further research. The paper reports the conduct and the results of a systematic mapping study which identified 25 studies on SPM. Still, most of the papers had only hypotheses and theories that were not empirically confirmed or the confirmation was based on a small set of cases. The existing knowledge of software product management consists of small and unconnected pieces. In addition to this, our specific interest, software product management in the cloud environment has not been studied at all. However, since both researchers and practitioners find research in SPM important, this area needs more research in the future. {\textcopyright} 2011 IEEE.},
author = {Maglyas, Andrey and Nikula, Uolevi and Smolander, Kari},
booktitle = {2011 5th International Workshop on Software Product Management, IWSPM 2011 - Part of the 19th IEEE International Requirements Engineering Conference},
doi = {10.1109/IWSPM.2011.6046201},
isbn = {9781457711473},
issn = {null},
keywords = {cloud environment,services,software product management,systematic literature review,systematic mapping study},
pages = {26--35},
title = {{What do we know about software product management? A systematic mapping study}},
year = {2011}
}
@article{NGUYEN201562,
abstract = {Context: Model-Driven Security (MDS) is as a specialised Model-Driven Engineering research area for supporting the development of secure systems. Over a decade of research on MDS has resulted in a large number of publications. Objective: To provide a detailed analysis of the state of the art in MDS, a systematic literature review (SLR) is essential. Method: We conducted an extensive SLR on MDS. Derived from our research questions, we designed a rigorous, extensive search and selection process to identify a set of primary MDS studies that is as complete as possible. Our three-pronged search process consists of automatic searching, manual searching, and snowballing. After discovering and considering more than thousand relevant papers, we identified, strictly selected, and reviewed 108 MDS publications. Results: The results of our SLR show the overall status of the key artefacts of MDS, and the identified primary MDS studies. For example, regarding security modelling artefact, we found that developing domain-specific languages plays a key role in many MDS approaches. The current limitations in each MDS artefact are pointed out and corresponding potential research directions are suggested. Moreover, we categorise the identified primary MDS studies into 5 significant MDS studies, and other emerging or less common MDS studies. Finally, some trend analyses of MDS research are given. Conclusion: Our results suggest the need for addressing multiple security concerns more systematically and simultaneously, for tool chains supporting the MDS development cycle, and for more empirical studies on the application of MDS methodologies. To the best of our knowledge, this SLR is the first in the field of Software Engineering that combines a snowballing strategy with database searching. This combination has delivered an extensive literature study on MDS.},
author = {Nguyen, Phu H. and Kramer, Max and Klein, Jacques and Traon, Yves Le},
doi = {10.1016/j.infsof.2015.08.006},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {MDE,MDS,Model-Driven Engineering,Model-Driven Security,Software security engineering,Systematic review},
pages = {62--81},
title = {{An extensive systematic review on the Model-Driven Development of secure systems}},
url = {http://www.sciencedirect.com/science/article/pii/S0950584915001482},
volume = {68},
year = {2015}
}
@incollection{Klerkx_2017,
abstract = {??????????????????????????????????????????????????????????????????????????????????????? ?????????????????????????????????????????????????????????????????????????????????????????? ???????????????????????????????????????????????????????????????????????????????????????????????? guidelines on how to get started with the development of learning analytics dashboards are presented for practitioners and researchers.},
author = {Klerkx, Joris and Verbert, Katrien and Duval, Erik},
booktitle = {Handbook of Learning Analytics},
doi = {10.18608/hla17.012},
pages = {143--150},
publisher = {Society for Learning Analytics Research ({\{}SoLAR{\}})},
title = {{Learning Analytics Dashboards}},
url = {https://doi.org/10.18608{\%}2Fhla17.012},
year = {2017}
}
@inproceedings{Zhu_2009,
abstract = {Software-as-a-Service (SaaS) is changing the way enterprises develop and deploy information systems. With the rapid development and successful implementations of the model-driven architecure(MDA) and service-oriented architecture (SOA), SaaS has become the focus of research. This paper describes the design and implementation of a service template markup language (STML) and its integrated development tools, which provide a comprehensive solution to the customization of applications over SaaS platforms for individual users on an asneeded basis. In the paper, we first analyze and point out the limitations of current software customization approaches in SaaS platforms, then propose a framework for a MDA-based approach to software customization in a SaaS platform, next present a series of SaaS service models and an XML-based service template markup language, finally conclude by an example showing the practicability of the STML tools. {\textcopyright}2009 IEEE.},
author = {Xiyong, Zhu and Shixiong, Wang},
booktitle = {Proceedings - International Conference on Management and Service Science, MASS 2009},
doi = {10.1109/ICMSS.2009.5300967},
isbn = {9781424446391},
keywords = {MDA,STML,SaaS,Software customization},
publisher = {IEEE},
title = {{Software customization based on model-driven architecture over SaaS platforms}},
url = {https://doi.org/10.1109{\%}2Ficmss.2009.5300967},
year = {2009}
}
@inproceedings{Schroeter_2012,
abstract = {Cloud-based applications are multi-tenant aware, whereas customers (i.e. tenants) share hardware and software resources. Offering highly configurable applications to thousands of tenants in a shared cloud environment demands for scalable configuration management. Based on an example scenario taken from the Indenica project, we identify requirements for applying methods from software product line (SPL) engineering to configure cloud-based multi-tenant aware applications. Using an extended feature model (EFM) to express variability of functionality and service qualities, we propose a concept for dynamic configuration management to address the identified requirements. Our proposed configuration management includes an adaptive staged configuration process that is capable of adding and removing stakeholders dynamically and that allows for reconfiguration of variants as stakeholders' objectives change. Copyright 2012 ACM.},
author = {Schroeter, Julia and Mucha, Peter and Muth, Marcel and Jugel, Kay and Lochau, Malte},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/2364412.2364441},
isbn = {9781450310956},
keywords = {Cloud computing,Extended feature model,Multi-tenancy,Staged configuration},
pages = {171--178},
publisher = {{\{}ACM{\}} Press},
title = {{Dynamic configuration management of cloud-based applications}},
url = {https://doi.org/10.1145{\%}2F2364412.2364441},
volume = {2},
year = {2012}
}
@inproceedings{Yao_2011,
abstract = {In this paper, some researches have been done on the customization method of SaaS user interface. A method based on Portlet and relevant technology is used to construct the presentation layer of SaaS and the customization of user interface can be fulfilled. It makes the construction of SaaS presentation layer have the loosely coupled and service-oriented characteristics and can realize the expansion of different levels.},
author = {Yao, Peng and Wen, Hao-yu and Dai, Qiong-jie},
booktitle = {2011 {\{}IEEE{\}} 18th International Conference on Industrial Engineering and Engineering Management},
doi = {10.1109/icieem.2011.6035174},
pages = {352--354},
publisher = {IEEE},
title = {{Study on presentation layer structure of multi-tenant e-business systems}},
url = {https://doi.org/10.1109{\%}2Ficieem.2011.6035174},
year = {2011}
}
@inproceedings{Yoon_2015,
abstract = {IPTV brought a new digital era in the broadcasting domain. The main change of digital broadcasting is an advent of a bi-directional interactive service feature. Using that bi-directionality, IPTV provides various kinds of convergence service such as information providing, advertisement, and e-commerce. But the number of services required to be developed and to be provided to users geometrically increases and the lifetime of services is shortened requiring services to be developed within a short period. To support the market demand for a massive service delivery, the IPTV platform based on service delivery platform (SDP) is essential. The SDP is a technique developed to meet the variation in communication and information technology convergence environments, allows service providers to rapidly create and deliver convergence services. This paper describes an Open IPTV service delivery platform structure and method for supporting rapid service creation by reusing pre-defined IPTV service components. We describe key components and functionalities of SDP, IPTV Enablers and its combination for service convergence. We show customer targeted mobile advertisement for Open IPTV convergence service example.},
author = {Yoon, Changwoo},
booktitle = {International Conference on Advanced Communication Technology, ICACT},
doi = {10.1109/ICACT.2015.7224930},
isbn = {9788996865056},
issn = {17389445},
keywords = {ACAP,IPTV,Open IPTV Platform,SDP,SOA},
month = {jul},
pages = {607--613},
publisher = {IEEE},
title = {{Open IPTV convergence service creation and management using service delivery platform}},
url = {https://doi.org/10.1109{\%}2Ficact.2015.7224930},
volume = {2015-Augus},
year = {2015}
}
@incollection{Kapuruge_2011,
abstract = {With the emergence of Cloud Computing and maturity of Service Oriented Architecture (SOA), the Software-as-a-Service (SaaS) delivery model has gained popularity, due to advantages such as lower startup cost and reduced time to market. A SaaS vendor owns and takes the responsibility of maintaining a single application for multiple clients/tenants who may have similar but also varying requirements. Business process modeling (BPM) approaches can be used to package service offerings to meet these varying requirements on a shared basis. However the customizations in those business processes can be challenging. In this paper we discuss the challenges arising from single-instance multi-tenancy, and present our approach to defining business processes in SaaS applications to address those challenges. {\textcopyright} 2011 Springer-Verlag.},
author = {Kapuruge, Malinda and Colman, Alan and Han, Jun},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-24434-6_11},
isbn = {9783642244339},
issn = {03029743},
keywords = {BPM,Cloud,Multi-tenancy,SOA,SaaS},
pages = {143--157},
publisher = {Springer Berlin Heidelberg},
title = {{Achieving multi-tenanted business processes in SaaS applications}},
url = {https://doi.org/10.1007{\%}2F978-3-642-24434-6{\_}11},
volume = {6997 LNCS},
year = {2011}
}
@inproceedings{Sun_2014,
abstract = {Cloud computing aims at providing services on the basis of a shared pool of underpinning resources and load balancing is of paramount importance in such an environment. At the same time, multi-tenancy is widely adopted in cloud computing to reduce the costs of service provisioning and to improve resource utilization. Multi-tenancy brings new challenges to load balancing, since it incurs resource competition and different QoS requirements of hosted applications. Therefore, servers with multiple deployed applications need a proper request scheduling policy to guarantee their quality of service, e.g., response time. However, most of the QoS-aware load balancing algorithms do not concern about the mutual intervention among applications deployed on the same server. When under heavy loads, mean response time of some applications may become too high to be acceptable. In this work, we propose a new load balancing algorithm, 'Server Throughput Restriction(STR)', based on M/G/s/s+r queueing model, in order to guarantee each application's mean response time and also achieve better server throughput. In addition, we conduct several experiments to analyze the performance of STR in comparison with Round-Robin and Least-Work-Remaining. {\textcopyright} 2014 IEEE.},
author = {Sun, Hailong and Zhao, Tao and Tang, Yu and Liu, Xudong},
booktitle = {Proceedings - IEEE 8th International Symposium on Service Oriented System Engineering, SOSE 2014},
doi = {10.1109/SOSE.2014.21},
isbn = {9781479925049},
pages = {140--147},
publisher = {IEEE},
title = {{A QoS-aware load balancing policy in multi-tenancy environment}},
url = {https://doi.org/10.1109{\%}2Fsose.2014.21},
year = {2014}
}
@article{Chwelos_2001,
abstract = {This paper is the first test of a parsimonious model that posits three factors as determinants of the adoption of electronic data interchange (EDI): readiness, perceived benefits, and external pressure. To construct the model, we identified and organized the factors that were found to be influential in prior EDI research. By testing all these factors together in one model, we are able to investigate their relative contributions to EDI adoption decisions. Senior purchasing managers, chosen for their experience with EDI and proximity to the EDI adoption decision, were surveyed and their responses analyzed using structural equation modeling. All three determinants were found to be significant predictors of intent to adopt EDI, with external pressure and readiness being considerably more important than perceived benefits. We show that the constructs in this model can be categorized into three levels: technological, organizational, and interorganizational. We hypothesize that these categories of influence will also be determinants of the adoption of other emerging forms of interorganizational systems (IOS).1.},
author = {Chwelos, Paul and Benbasat, Izak and Dexter, Albert S.},
doi = {10.1287/isre.12.3.304.9708},
issn = {10477047},
journal = {Information Systems Research},
keywords = {Adoption of IT,Electronic Commerce,Electronic Data Interchange,Empirical Research,Interorganizational Systems,Partial Least Squares},
number = {3},
pages = {304--321},
publisher = {Institute for Operations Research and the Management Sciences ({\{}INFORMS{\}})},
title = {{Research Report: Empirical Test of an EDI Adoption Model}},
url = {https://doi.org/10.1287{\%}2Fisre.12.3.304.9708},
volume = {12},
year = {2001}
}
@article{Vaquero_2008,
abstract = {This paper discusses the concept of Cloud Computing to achieve a complete definition of what a Cloud is, using the main characteristics typically associated with this paradigm in the literature. More than 20 definitions have been studied allowing for the extraction of a consensus definition as well as a minimum definition containing the essential characteristics. This paper pays much attention to the Grid paradigm, as it is often confused with Cloud technologies. We also describe the relationships and distinctions between the Grid and Cloud approaches.},
author = {Vaquero, Luis M. and Rodero-Merino, Luis and Caceres, Juan and Lindner, Maik},
doi = {10.1145/1496091.1496100},
issn = {0146-4833},
journal = {ACM SIGCOMM Computer Communication Review},
number = {1},
pages = {50--55},
publisher = {Association for Computing Machinery ({\{}ACM{\}})},
title = {{A break in the clouds}},
url = {https://doi.org/10.1145{\%}2F1496091.1496100},
volume = {39},
year = {2008}
}
@incollection{Wu_2011,
abstract = {Cloud computing is a type of computing in which scalable and virtualized resources are provided as a service. Cloud computing boasts dynamic IT infrastructure, on-demand provisioning and consumption-based pricing; however, security risks and immature technology prevent widespread adoption of clouds. This paper provides an overview of cloud computing development in the enterprise and academic community research including the following: the concept and technology background, technical obstacles, opportunities, research issues and challenges, growth prospects, and appropriate use recommendations. {\textcopyright} 2011 Springer-Verlag.},
author = {Wu, Min},
booktitle = {Communications in Computer and Information Science},
doi = {10.1007/978-3-642-23226-8_45},
isbn = {9783642232251},
issn = {18650929},
keywords = {Cloud computing,research issues,security},
number = {PART 4},
pages = {346--353},
publisher = {Springer Berlin Heidelberg},
title = {{Cloud computing: Hype or vision}},
url = {https://doi.org/10.1007{\%}2F978-3-642-23226-8{\_}45},
volume = {227 CCIS},
year = {2011}
}
@incollection{Soliman_2015,
abstract = {Cloud systems could help companies to optimize the structure and operation of supply chain and improve organizational performance into a higher level. In this chapter, the advantages and basic operation methods of cloud computing are analyzed, and the essential factors that contribute to the success of the cloud system are evaluated through some business examples. Supply chain firms rely on cloud system to share resources and to achieve integration through the Internet. Cloud systems could transform customer relationship and internal operation to achieve sustainable competitive advantages. Cloud services are providing the ability to share information to the supply chain at any time anywhere. This chapter explores the relationship between supply chain organization and cloud computing. This chapter also discusses the benefits and advantage to evaluate of cloud system in successful factors.},
author = {Soliman, Fawzy},
booktitle = {Business Transformation and Sustainability through Cloud System Implementation},
doi = {10.4018/978-1-4666-6445-6.ch007},
isbn = {9781466664463},
pages = {90--104},
publisher = {{\{}IGI{\}} Global},
title = {{Evaluation of cloud system success factors in supply-demand chains}},
url = {https://doi.org/10.4018{\%}2F978-1-4666-6445-6.ch007},
year = {2014}
}
@inproceedings{Mohamed_2014,
abstract = {Cloud computing is an emerging paradigm that provides scalable computing and storage capabilities where resources are accessed on a pay-as-you-go basis. Software as a Service (SaaS) applications are hosted in the cloud and made available as services for tenants' organizations over a network. To achieve reusability in cloud computing, software and hardware resources are shared among multiple tenants. Conventional multitenant SaaS applications provide the same set of services for all tenants thus resulting in one-size-fits-all applications. However, as tenants may have different requirements, customizable SaaS solutions are needed. To accommodate evolving tenants' requirements, the SaaS instance should evolve systematically. In this paper, we present a multitenant single instance SaaS evolution platform based on Software Product Lines (SPLs). The platform specifies a set of evolution rules, based on feature modeling, that govern evolution decisions. We also present the early implementation phases of the proposed approach based on SPLs and Model Driven Architecture (MDA) concepts.},
author = {Mohamed, Fatma and Abu-Matar, Mohammad and Mizouni, Rabeb and Al-Qutayri, Mahmoud and Mahmoud, Zaid Al},
booktitle = {Proceedings of the International Conference on Cloud Computing Technology and Science, CloudCom},
doi = {10.1109/CloudCom.2014.131},
isbn = {9781479940936},
issn = {23302186},
keywords = {Dynamic evolution,Model driven engineering,Multitenant applications,Saas,Software product lines},
number = {February},
pages = {292--299},
publisher = {IEEE},
title = {{SaaS dynamic evolution based on model-driven software product lines}},
url = {https://doi.org/10.1109{\%}2Fcloudcom.2014.131},
volume = {2015-Febru},
year = {2015}
}
@article{Kim_2012,
abstract = {Recently the main trend in providing software services has been shifting from an ASP (application service provider)-oriented to a SaaS (software as a service). ASP is a software service model in which the service is provided on a one by one basis according its ownership, while SaaS is a software service model in which the service is provided virtually on a one by one basis, but physically all at once. In a SaaS environment, all users can access the system via Internet without any software installation - examples include Google and Amazon. Now, more companies are shifting their business software service from ASP to SaaS. However effecting the transition of the existing software and data from ASP to SaaS is not an easy task. First, we have to solve the problem of the integration of data for different forms of software, because each data set consists of different data types. Second, the software integration must support a user customizing interface for various users on the Web. Almost all users want customized services, but those require high costs. In this paper we propose a novel method for transferring the existing business software to integrated software that can be used in the SaaS environment. We use a master table and master code to implement the integrated system. The master table is based on the project master table, and other user information tables are connected to collect the necessary information. All information about the project is stored in each column of the project master table. The master table can integrate various software databases. By using this novel methodology, the existing ASP-based software and data can be effectively transferred to the SaaS environment. {\textcopyright} 2011 Elsevier Ltd. All rights reserved.},
author = {Kim, Wonil and Lee, Joo Hwan and Hong, Chuleui and Han, Changhee and Lee, Hanku and Jang, Bongshik},
doi = {10.1016/j.camwa.2012.03.069},
issn = {08981221},
journal = {Computers and Mathematics with Applications},
keywords = {Cloud computing,Data integration,Master table introduction,SaaS,Software integration},
number = {5},
pages = {1252--1258},
publisher = {Elsevier {\{}BV{\}}},
title = {{An innovative method for data and software integration in SaaS}},
url = {https://doi.org/10.1016{\%}2Fj.camwa.2012.03.069},
volume = {64},
year = {2012}
}
@inproceedings{Mietzner_2009,
abstract = {More and more companies are offering their software by following the Software as a Service (SaaS) model. The promise of the SaaS model is to exploit economies of scale on the provider side by hosting multiple customers (or tenants) on the same hardware and software infrastructure. However, to attract a significant number of tenants, SaaS applications have to be customizable to fulfill the varying functional and quality requirements of individual tenants. In this paper, we describe how variability modeling techniques from software product line engineering can support SaaS providers in managing the variability of SaaS applications and their requirements. Specifically, we propose using explicit variability models to systematically derive customization and deployment information for individual SaaS tenants. We also demonstrate how variability models could be used to systematically consider information about already deployed SaaS applications for efficiently deploying SaaS applications for new tenants. We illustrate our approach by a running example for a meeting planning application. {\textcopyright} 2009 IEEE.},
author = {Mietzner, Ralph and Metzger, Andreas and Leymann, Frank and Pohl, Klaus},
booktitle = {Proceedings of the 2009 ICSE Workshop on Principles of Engineering Service Oriented Systems, PESOS 2009},
doi = {10.1109/PESOS.2009.5068815},
isbn = {9781424437160},
pages = {18--25},
publisher = {IEEE},
title = {{Variability modeling to support customization and deployment of multi-tenant-aware software as a service applications}},
url = {https://doi.org/10.1109{\%}2Fpesos.2009.5068815},
year = {2009}
}
@inproceedings{Liu_2009,
abstract = {Software-as-a-Service (SaaS) is an emerging software application delivery model. It has gained an increasing momentum, and it is being adopted at a very fast pace. However, the integration of SaaS applications with enterprise on-premise applications has become a major factor for the success of its adoption. There is a critical need for methods and communication infrastructures that can enable distributed SaaS applications over the data network. This paper presents an approach and a realization of communications enablement of SaaS applications. It focuses on three areas: 1) an approach to enabling communications as a service; 2) a SaaS adaptor framework for integrating SaaS applications with on-premise communications services; and 3) methods and communication middleware for two-way web services crossing enterprise domains. A communication enabled sales opportunity management SaaS application is implemented to verify the proposed approach. Experimental results indicated that the proposed approach is feasible and effective to communication enable SaaS applications in distributed environment that connects both cloud computing and enterprise on-premises systems.},
author = {Liu, Feng and Li, Li and Chou, Wu},
booktitle = {GLOBECOM - IEEE Global Telecommunications Conference},
doi = {10.1109/GLOCOM.2009.5425403},
isbn = {9781424441488},
keywords = {Communications,Internet,Software-as-a-Service,Web services},
month = {nov},
publisher = {IEEE},
title = {{Communications enablement of Software-as-a-Service (SaaS) applications}},
url = {https://doi.org/10.1109{\%}2Fglocom.2009.5425403},
year = {2009}
}
@inproceedings{Arrieta_2012,
abstract = {Summary form only given. The speed of change in Internet Technologies continues to be impressive and the current “Future Internet” based society increasingly relies on software at all levels. Nevertheless, software systems continue to suffer from aging symptoms caused by the inherent factors of the software modernization process: inevitable; unpredictable; costly; difficult; time- and resource-consuming; poorly supported by tools, techniques or formalisms; poorly understood and maintained; undervalued in traditional software development processes, etc. Furthermore, current technological and business innovations (such as Cloud Computing and Software as a Service (SaaS) concepts) are changing the way in which software is designed, developed, tested, delivered and consumed. All this means that new requirements, never seen before in software development, have to be faced (scalability, multi-tenancy support, usage monitoring, security, SLA compliance, etc.). These challenges are even greater when adapting previously developed software to this new landscape. Different approaches (reverse engineering, ADM, or service-oriented-architecture modernization) have to be analyzed depending on the source language, architecture, target market or available resources. As a result, the complete software life cycle, from requirements to runtime and delivery, has to be re-adapted to the new technological and business conditions, needs and challenges, thus increasing the need of advanced means to support software evolution and adaptation as a key value for the next-generation service-based software modernization. One particular example of complex system modernization is the exposure of legacy systems as SaaS. Model-driven techniques have been used for several years to cope with the challenge of transformation of legacy systems as SaaS. Regardless of the positive features of these techniques, for legacy systems there are many challenges such as are the availability of arc- itectural models describing the system (typically unavailable for legacy systems), the ability to transform the original system into new ones compatible with targeted infrastructures and frameworks, and the support for adaptive deployment. All these features are particular relevant when deploying legacy applications as SaaS on the Web, for instance using different Cloud offerings. Desirable solutions are those that can automate the transformation of existing legacy systems that require being transformed into modern ones exposed as services (SaaS) compatible with modern technology frameworks. This keynote will present the challenges and needs, as well as the results obtained so far in this novel architecture and business model based on the cloud.},
author = {Arrieta, Leire Orue-Echevarria},
booktitle = {2012 {\{}IEEE{\}} 6th International Workshop on the Maintenance and Evolution of Service-Oriented and Cloud-Based Systems ({\{}MESOCA{\}})},
doi = {10.1109/mesoca.2012.6392595},
pages = {58--59},
publisher = {IEEE},
title = {{From Software as a good to software as a service: Preparing the evolution of software products into the cloud}},
url = {https://doi.org/10.1109{\%}2Fmesoca.2012.6392595},
year = {2013}
}
@inproceedings{Chouhan_2015,
abstract = {Our life has been significantly enhanced and improved by a wide range of multifarious software services. Technological advancements and availability of high speed Internet connection has enabled software providers to transform traditional on-premise software deployment model to off-premise centralized deployment model. Providers and users are attracted by the software as a service (SaaS) paradigm due to the appealing features such as pay-as-you-go and optimal hardware utilization it can offer. However, lots of enterprises are still reluctant to move their business into SaaS because of the security concerns. Security issues plaguing the SaaS environment cuts across various areas which could lead to increased attack surface for potential security threats. This article first introduces the architecture of SaaS and highlights its utility and applicability in different environments like cloud computing, mobile cloud computing, software defined network and Internet of things. Then elaborate the SaaS security challenges spanning across data security, application security to SaaS deployment security and how security issues might affect different layers in the SaaS architecture.},
author = {Chouhan, Pushpinder Kaur and Yao, Feng and Sezer, Sakir},
booktitle = {Proceedings of the 2015 Science and Information Conference, SAI 2015},
doi = {10.1109/SAI.2015.7237140},
isbn = {9781479985470},
keywords = {Cloud security,SaaS Architecture,SaaS security,Software-as-a-Service},
month = {jul},
pages = {162--170},
publisher = {IEEE},
title = {{Software as a service: Understanding security issues}},
url = {https://doi.org/10.1109{\%}2Fsai.2015.7237140},
year = {2015}
}
@inproceedings{Ying_2010,
abstract = {Software as a service (SaaS) is an emerging software framework in which business data and logic typically integrate with other applications. It requires a unified subscriber to describe SaaS to make for easy integration; however, SaaS provides services to different tenants by running only one instance. In order to satisfy personalized needs from different tenants, the business logic becomes correspondingly complex. As this logic is cumbersome to reveal to every individual tenant, we propose the use of Web Services Conversation Language (WSCL) to express the views of tenant and provider separately. To overcome deficiencies in WCSL for expressing heterogeneous data, process rules, and business rules, we extend the syntax of WSCL. We also put forward a new modeling method for constructing SaaS Service, describing the modeling process and the algorithm for obtaining the tenant model from the business model. In conclusion, we describe the modeling tools and validation methods. {\textcopyright} 2010 IEEE.},
author = {Liu, Ying and Zhang, Bin and Liu, Guoqi and Wang, Deshuai and Gao, Yan},
booktitle = {Proceedings - 2010 IEEE Asia-Pacific Services Computing Conference, APSCC 2010},
doi = {10.1109/APSCC.2010.38},
isbn = {9780769543055},
keywords = {Business model,Multi-Tenant,SaaS service,Tenant model,ex-WSCL},
pages = {355--362},
publisher = {IEEE},
title = {{Personalized modeling for SaaS based on extended WSCL}},
url = {https://doi.org/10.1109{\%}2Fapscc.2010.38},
year = {2010}
}
@incollection{WILKES_1995,
author = {WILKES, MAURICE V.},
booktitle = {Computing Perspectives},
doi = {10.1016/b978-0-08-050268-7.50020-6},
pages = {167--173},
publisher = {Elsevier},
title = {{Computer Security in Business World—Time-Sharing Systems}},
url = {https://doi.org/10.1016{\%}2Fb978-0-08-050268-7.50020-6},
year = {1995}
}
@inproceedings{Du_2010,
abstract = {A multi-tenant cloud system allows multiple users to share a common physical computing infrastructure in a cost-effective way. Component sharing is highly desired in such a shared computing infrastructure, where different tenants can leverage each other's information and expertise to fulfill their own tasks. However, it is challenging to maintain the availability of sharable component resources in a large-scale cloud infrastructure, as cloud tenants are fully autonomous and highly dynamic. In this paper, we present a novel highly available component sharing system for large-scale multi-tenant cloud systems. We describe a component availability prediction scheme to identify endangered components (i.e., components at risk of extinction) within the infrastructure. The system then performs predictive replication based on the availability prediction results to preserve those endangered components. Thus, our system can preserve the availability of all component resources with low cost. Theoretical analysis and large-scale simulation are used to quantify the accuracy of our component availability prediction, and the efficiency of predictive replication. Experimental results show that our scheme can predict endangered components with high accuracy, and achieve up to 99{\%} availability with about 15{\%} of the full replication cost. Copyright 2010 ACM.},
author = {Du, Juan and Gu, Xiaohui and Reeves, Douglas S.},
booktitle = {HPDC 2010 - Proceedings of the 19th ACM International Symposium on High Performance Distributed Computing},
doi = {10.1145/1851476.1851487},
isbn = {9781605589428},
keywords = {Cloud computing,Component sharing,High availability},
pages = {85--94},
publisher = {{\{}ACM{\}} Press},
title = {{Highly available component sharing in large-scale multi-tenant cloud systems}},
url = {https://doi.org/10.1145{\%}2F1851476.1851487},
year = {2010}
}
@inproceedings{de_Paula_2016,
abstract = {Context: Cloud computing has been one of the most promising computing paradigms in industry to provide a customizable and resourceful platform to deploy software. There are a number of competing providers and available services that allows organizations to access computing services without owning the corresponding infrastructure. Goal: Identify the main characteristics of opportunities to migrate to the cloud, the respective challenges and difficulties as well as factors that affect the cost-benefit relationship of such adoption. Method: This paper presents a systematic literature review to compare reported strategies of organizations to migrate and adopt cloud computing and their perception of the cost-benefit of this adoption. Results: The overall data collected from these studies depicts that a significant part of the companies perceived inclination towards for the innovation adoption process influenced by technological, organizational and environmental contexts. Conclusion: Due to the variety of strategies, approaches and tools reported in the primary studies, it is expected that the results in this systematic literature review would help in establishing knowledge on how the companies should adopt and migrate to the cloud, how the cost-benefit relationship can be evaluated as well as providers can be selected. These findings can be a useful reference to develop guidelines for an effective use of cloud computing.},
author = {{De Paula}, Antonio Carlos Marcelino and {De Figueiredo Carneiro}, Glauco},
booktitle = {ENASE 2016 - Proceedings of the 11th International Conference on Evaluation of Novel Software Approaches to Software Engineering},
doi = {10.5220/0005872700270039},
isbn = {9789897581892},
keywords = {Cloud computing,Cloud migration,Cost-benefit relationship,Provider selection,Systematic literature review},
pages = {27--39},
publisher = {{\{}SCITEPRESS{\}} - Science and and Technology Publications},
title = {{Cloud computing adoption, cost-benefit relationship and strategies for selecting providers: A systematic review}},
url = {https://doi.org/10.5220{\%}2F0005872700270039},
year = {2016}
}
@article{Misra_2011,
abstract = {Internet has become pervasive in our daily life and cloud computing is the newest offering as service over the ubiquitous Web. Cloud computing has been considered as a much hyped phenomenon in the IT and business world promising to deliver a host of benefits. Companies need to look beyond this hype and seriously consider the real value of incorporating the Cloud in their own businesses. This paper is aimed at helping companies analyze several characteristics of their own business as well as pre-existing IT resources to identify their favorability in the migration to the Cloud Architecture. A general Return on Investment (ROI) model has also been developed here taking into consideration various intangible impacts of Cloud Computing, apart from the cost. The analysis presented herein provides a much broader perspective and insight into Cloud Computing to its prospective adopters. {\textcopyright} 2010 Elsevier Ltd.},
author = {Misra, Subhas Chandra and Mondal, Arka},
doi = {10.1016/j.mcm.2010.03.037},
issn = {08957177},
journal = {Mathematical and Computer Modelling},
keywords = {Benefits of cloud computing,Cloud computing,Cost of cloud computing,Return on Investment (ROI)},
number = {3-4},
pages = {504--521},
publisher = {Elsevier {\{}BV{\}}},
title = {{Identification of a company's suitability for the adoption of cloud computing and modelling its corresponding Return on Investment}},
url = {https://doi.org/10.1016{\%}2Fj.mcm.2010.03.037},
volume = {53},
year = {2011}
}
@article{Moens_2015,
abstract = {Multi-tenancy, where multiple end users make use of the same application instance, is often used in clouds to reduce hosting costs. A disadvantage of multi-tenancy is however that it makes it difficult to create customizable applications, as all end users use the same application instance. In this article, we describe an approach for the development and management of highly customizable multi-tenant cloud applications. We apply software product line engineering techniques to cloud applications, and use an approach where applications are composed of multiple interacting components, referred to as application features. Using this approach, multiple features can be shared between different applications. Allocating resources for these feature-based applications is complex, as relations between components must be taken into account, and is referred to as the feature placement problem. In this article, we describe dynamic feature placement algorithms that minimize migrations between subsequent invocations, and evaluate them in dynamic scenarios where applications are added and removed throughout the evaluation scenario. We find that the developed algorithm achieves a low cost, while resulting in few resource migrations. In our evaluations, we observe that adding migration-awareness to the management algorithms reduces the number of instance migrations by more than 77{\%} and reduces the load moved between instances by more than 96{\%} when compared to a static management approach. Despite this reduction in number of migrations, a cost that is on average less than 3{\%} more than the optimal cost is achieved.},
author = {Moens, Hendrik and Dhoedt, Bart and {De Turck}, Filip},
doi = {10.1016/j.future.2015.05.017},
issn = {0167739X},
journal = {Future Generation Computer Systems},
keywords = {Cloud resource management,Dynamic application placement,Feature placement,Software product line engineering},
pages = {63--76},
publisher = {Elsevier {\{}BV{\}}},
title = {{Allocating resources for customizable multi-tenant applications in clouds using dynamic feature placement}},
url = {https://doi.org/10.1016{\%}2Fj.future.2015.05.017},
volume = {53},
year = {2015}
}
@inproceedings{Yao_2011,
abstract = {In this paper, some researches have been done on the customization method of SaaS user interface. A method based on Portlet and relevant technology is used to construct the presentation layer of SaaS and the customization of user interface can be fulfilled. It makes the construction of SaaS presentation layer have the loosely coupled and service-oriented characteristics and can realize the expansion of different levels.},
author = {Yao, Peng and Wen, Hao-yu and Dai, Qiong-jie},
booktitle = {2011 {\{}IEEE{\}} 18th International Conference on Industrial Engineering and Engineering Management},
doi = {10.1109/icieem.2011.6035174},
pages = {352--354},
publisher = {IEEE},
title = {{Study on presentation layer structure of multi-tenant e-business systems}},
url = {https://doi.org/10.1109{\%}2Ficieem.2011.6035174},
year = {2011}
}
@inproceedings{Du_2010,
abstract = {A multi-tenant cloud system allows multiple users to share a common physical computing infrastructure in a cost-effective way. Component sharing is highly desired in such a shared computing infrastructure, where different tenants can leverage each other's information and expertise to fulfill their own tasks. However, it is challenging to maintain the availability of sharable component resources in a large-scale cloud infrastructure, as cloud tenants are fully autonomous and highly dynamic. In this paper, we present a novel highly available component sharing system for large-scale multi-tenant cloud systems. We describe a component availability prediction scheme to identify endangered components (i.e., components at risk of extinction) within the infrastructure. The system then performs predictive replication based on the availability prediction results to preserve those endangered components. Thus, our system can preserve the availability of all component resources with low cost. Theoretical analysis and large-scale simulation are used to quantify the accuracy of our component availability prediction, and the efficiency of predictive replication. Experimental results show that our scheme can predict endangered components with high accuracy, and achieve up to 99{\%} availability with about 15{\%} of the full replication cost. Copyright 2010 ACM.},
author = {Du, Juan and Gu, Xiaohui and Reeves, Douglas S.},
booktitle = {HPDC 2010 - Proceedings of the 19th ACM International Symposium on High Performance Distributed Computing},
doi = {10.1145/1851476.1851487},
isbn = {9781605589428},
keywords = {Cloud computing,Component sharing,High availability},
pages = {85--94},
publisher = {{\{}ACM{\}} Press},
title = {{Highly available component sharing in large-scale multi-tenant cloud systems}},
url = {https://doi.org/10.1145{\%}2F1851476.1851487},
year = {2010}
}
@incollection{Loske_2015,
author = {Loske, Andr{\'{e}} and Loske, Andr{\'{e}}},
booktitle = {IT Security Risk Management in the Context of Cloud Computing},
doi = {10.1007/978-3-658-11340-7_4},
pages = {93--118},
publisher = {Springer Fachmedien Wiesbaden},
title = {{Part II: Perceptual Incongruences regarding the IT Security Risks as a Barrier to Cloud Adoption}},
url = {https://doi.org/10.1007{\%}2F978-3-658-11340-7{\_}4},
year = {2015}
}
@inproceedings{Tsai_2013,
abstract = {SaaS (Software-as-a-Service) often uses multi-tenancy architecture (MTA) where tenant developers compose their applications online using the components stored in the SaaS database. Tenant applications need to be tested, and combinatorial testing can be used. While numerous combinatorial testing techniques are available, most of them produce static sequences of test configurations and their goal is often to provide sufficient coverage such as 2-way interaction coverage. But the goal of SaaS testing is to identify those compositions that are faulty for tenant applications. This paper proposes an adaptive test configuration generation algorithm AR (Adaptive Reasoning) that can rapidly identify those faulty combinations so that those faulty combinations cannot be selected by tenant developers for composition. The AR algorithm has been evaluated by both simulation and real experimentation using a MTA SaaS sample running on GAE (Google App Engine). Both the simulation and experiment showed show that the AR algorithm can identify those faulty combinations rapidly. Whenever a new component is submitted to the SaaS database, the AR algorithm can be applied so that any faulty interactions with new components can be identified to continue to support future tenant applications. {\textcopyright} 2013 IEEE.},
author = {Tsai, W. T. and Li, Qingyang and Colbourn, Charles J. and Bai, Xiaoying},
booktitle = {Proceedings of the IEEE International Conference on Cloud Engineering, IC2E 2013},
doi = {10.1109/IC2E.2013.44},
isbn = {9780769549453},
keywords = {Adpative testing,Combinatorial testing,SaaS (Software-as-a-Service),Testing tenant applications},
month = {mar},
pages = {183--192},
publisher = {IEEE},
title = {{Adaptive fault detection for testing tenant applications in multi-tenancy SaaS systems}},
url = {https://doi.org/10.1109{\%}2Fic2e.2013.44},
year = {2013}
}
@article{Kupiainen_2015,
abstract = {Context: Software industry has widely adopted Agile software development methods. Agile literature proposes a few key metrics but little is known of the actual metrics use in Agile teams. Objective: The objective of this paper is to increase knowledge of the reasons for and effects of using metrics in industrial Agile development. We focus on the metrics that Agile teams use, rather than the ones used from outside by software engineering researchers. In addition, we analyse the influence of the used metrics. Method: This paper presents a systematic literature review (SLR) on using metrics in industrial Agile software development. We identified 774 papers, which we reduced to 30 primary studies through our paper selection process. Results: The results indicate that the reasons for and the effects of using metrics are focused on the following areas: sprint planning, progress tracking, software quality measurement, fixing software process problems, and motivating people. Additionally, we show that although Agile teams use many metrics suggested in the Agile literature, they also use many custom metrics. Finally, the most influential metrics in the primary studies are Velocity and Effort estimate. Conclusion: The use of metrics in Agile software development is similar to Traditional software development. Projects and sprints need to be planned and tracked. Quality needs to be measured. Problems in the process need to be identified and fixed. Future work should focus on metrics that had high importance but low prevalence in our study, as they can offer the largest impact to the software industry.},
author = {Kupiainen, Eetu and M{\"{a}}ntyl{\"{a}}, Mika V. and Itkonen, Juha},
doi = {10.1016/j.infsof.2015.02.005},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Agile,Lean,Measurement,Metrics,Software engineering,Systematic literature review},
month = {jun},
number = {1},
pages = {143--163},
publisher = {Elsevier {\{}BV{\}}},
title = {{Using metrics in Agile and Lean software development - A systematic literature review of industrial studies}},
url = {https://doi.org/10.1016{\%}2Fj.infsof.2015.02.005},
volume = {62},
year = {2015}
}
@inproceedings{Bezemer_2010,
abstract = {Multi-tenancy is a relatively new software architecture principle in the realm of the Software as a Service (SaaS) business model. It allows to make full use of the economy of scale, as multiple customers - "tenants" - share the same application and database instance. All the while, the tenants enjoy a highly configurable application, making it appear that the application is deployed on a dedicated server. The major benefits of multi-tenancy are increased utilization of hardware resources and improved ease of maintenance, resulting in lower overall application costs, making the technology attractive for service providers targeting small and medium enterprises (SME). Therefore, migrating existing single-tenant to multi-tenant applications can be interesting for SaaS software companies. In this paper we report on our experiences with reengineering an existing industrial, single-tenant software system into a multitenant one using a lightweight reengineering approach. {\textcopyright} 2010 IEEE.},
author = {Bezemer, Cor Paul and Zaidman, Andy and Platzbeecker, Bart and Hurkmans, Toine and Hart, Aad},
booktitle = {IEEE International Conference on Software Maintenance, ICSM},
doi = {10.1109/ICSM.2010.5609735},
isbn = {9781424486298},
publisher = {IEEE},
title = {{Enabling multi-tenancy: An industrial experience report}},
url = {https://doi.org/10.1109{\%}2Ficsm.2010.5609735},
year = {2010}
}
@inproceedings{10.1007/978-3-662-43459-8_14,
abstract = {Cloud computing has received increasing interest from enterprises since its inception. With its innovative information technology (IT) services delivery model, cloud computing could add technical and strategic business value to enterprises. However, cloud computing poses highly concerning internal (e.g., Top management and experience) and external issues (e.g., regulations and standards). This paper presents a systematic literature review to explore the current key issues related to cloud computing adoption. This is achieved by reviewing 51 articles published about cloud computing adoption. Using the grounded theory approach, articles are classified into eight main categories: internal, external, evaluation, proof of concept, adoption decision, implementation and integration, IT governance, and confirmation. Then, the eight categories are divided into two abstract categories: cloud computing adoption factors and processes, where the former affects the latter. The results of this review indicate that enterprises face serious issues before they decide to adopt cloud computing. Based on the findings, the paper provides a future information systems (IS) research agenda to explore the previously under-investigated areas regarding cloud computing adoption factors and processes. This paper calls for further theoretical, methodological, and empirical contributions to the research area of cloud computing adoption by enterprises.},
address = {Berlin, Heidelberg},
author = {El-Gazzar, Rania Fahim},
booktitle = {IFIP Advances in Information and Communication Technology},
editor = {Bergvall-K{\aa}reborn, Birgitta and Nielsen, Peter Axel},
isbn = {9783662434581},
issn = {18684238},
keywords = {Adoption,Cloud computing,Enterprise},
pages = {214--242},
publisher = {Springer Berlin Heidelberg},
title = {{A literature review on cloud computing adoption issues in enterprises}},
volume = {429},
year = {2014}
}
@inproceedings{Parhizkar_2016,
abstract = {Competitive environments cause an inevitable change in business requirements, which encourages postimplementation modifications of ERP systems. Understanding and managing the impact of these changes on implemented ERP systems is a challenging task for most enterprises. Change impact analysis is a strategic approach to analyzing modifications in large and complex software systems, such as ERP. In this paper, we present an impact analysis framework for ERP postimplementation modifications. Our framework builds an analogy with Engineering Change Requests in product lifecycle management. It defines a conceptual model of ERP system entities and their dependencies to support change specification, a set of mechanisms to evaluate the impact of modifications, and an analysis of strategies to implement the change. Our method serves as an aid to business analysts and practitioners to assess the feasibility and impact of post-implementation requirements in ERP systems.},
author = {Parhizkar, Minou and Comuzzi, Marco},
booktitle = {Proceedings of 2016 SAI Computing Conference, SAI 2016},
doi = {10.1109/SAI.2016.7556059},
isbn = {9781467384605},
keywords = {Change Impact Analysis,Conceptual Model,ERP Modification,Enterprise resource planning (ERP)},
month = {jul},
pages = {706--714},
publisher = {IEEE},
title = {{A framework for impact analysis of post-implementation enterprise resource planning modifications}},
url = {https://doi.org/10.1109{\%}2Fsai.2016.7556059},
year = {2016}
}
@incollection{2010,
abstract = {With research into the combination of knowledge management and SaaS model, this paper aims to provide small- and medium-sized manufacturing enterprises with a new model-SaaS model in implementing knowledge management system and provide enterprises with application strategy in using SaaS model-based knowledge management system.},
author = {Xie, Hao},
booktitle = {Proceedings of the International Conference on Technology Management and Innovation},
doi = {10.1115/1.859612.paper14},
pages = {61--64},
publisher = {{\{}ASME{\}} Press},
title = {{Application SaaS Model in Knowledge Management}},
url = {https://doi.org/10.1115{\%}2F1.859612.paper14},
year = {2010}
}
@article{Vaquero_2011,
abstract = {Scalability is said to be one of the major advantages brought by the cloud paradigm and, more specifically, the one that makes it different to an advanced outsourcing solution. However, there are some important pending issues before making the dreamed automated scaling for applications come true. In this paper, the most notable initiatives towards whole application scalability in cloud environments are presented. We present relevant efforts at the edge of state of the art technology, providing an encompassing overview of the trends they each follow. We also highlight pending challenges that will likely be addressed in new research efforts and present an ideal scalable cloud system.},
author = {Vaquero, Luis M. and Rodero-Merino, Luis and Buyya, Rajkumar},
doi = {10.1145/1925861.1925869},
issn = {01464833},
journal = {Computer Communication Review},
keywords = {Cloud computing,Scalability},
month = {jan},
number = {1},
pages = {45--52},
publisher = {Association for Computing Machinery ({\{}ACM{\}})},
title = {{Dynamically scaling applications in the cloud}},
url = {https://doi.org/10.1145{\%}2F1925861.1925869},
volume = {41},
year = {2011}
}
@article{Cartwright_2001,
author = {Cartwright, Michelle},
doi = {10.1002/stvr.230},
issn = {0960-0833},
journal = {Software Testing, Verification and Reliability},
number = {3},
pages = {198--199},
publisher = {Wiley},
title = {{Experimentation in Software Engineering: An Introduction. By Claes Wohlin, Per Runeson, Martin H�st, Magnus C. Ohlsson, Bj�rn Regnell and Anders Wessl�n. Published by Kluwer Academic Publishers, Norwell, Massachusetts, U.S.A., 1999. ISBN: 0-7923-8682-5, 2}},
url = {https://doi.org/10.1002{\%}2Fstvr.230},
volume = {11},
year = {2001}
}
@inproceedings{Van_Landuyt_2015,
abstract = {Software product line engineering (SPLE) and variability enforcement techniques have been applied to run-time adaptive systems for quite some years, also in the context of multitenant Software-as-a-Service (SaaS) applications. The focus has been mainly on (1) the pre-deployment phases of the development life cycle and (2) fine-grained (tenant-level), run-time activation of specific variants. However, with upcoming trends such as DevOps and continuous delivery and deployment, operational aspects become increasingly important. In this paper, we present our integrated vision on the positive interplay between SPLE and adaptive middleware for multi-tenant SaaS applications, focusing on the operational aspects of running and maintaining a successful SaaS offering. This vision, called Service Lines, is based on and motivated by our experience and frequent interactions with a number of Belgian SaaS providers. We concretely highlight and motivate a number of operational use cases that require advanced variability support in middleware and have promising added value for the economic feasibility of SaaS offerings. In addition, we provide a gap analysis of what is currently lacking from the perspectives of variability modeling and management techniques and middleware support, and as such sketch a concrete roadmap for continued research in this area.},
author = {{Van Landuyt}, Dimitri and Walraven, Stefan and Joosen, Wouter},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/2791060.2791080},
isbn = {9781450336130},
keywords = {Models at run time,Multi-tenant saas,Operational support,Run-time variability,Service lines,Variability middleware},
pages = {211--215},
publisher = {{\{}ACM{\}} Press},
title = {{Variability middleware for multi-tenant saas applications: A research roadmap for service lines}},
url = {https://doi.org/10.1145{\%}2F2791060.2791080},
volume = {20-24-July},
year = {2015}
}
@inproceedings{Han_2016,
abstract = {With the rapid development of internet and software technology, SaaS model has become the wise choice of more and more enterprises. As an on-demand software, how to adaptively configure the SaaS model according to the customized business processes becomes an important issue for both industrial and academics. To address this issue, this paper proposes a layer based configuration architecture. In the proposed architecture, a business process is logically divided into three layers: business layer, service layer, and data layer. According to the characteristics of each layer, we propose different configuration strategies which are effectively and independently conducted. Thus, the configuration architecture can be flexibly and conveniently applied in SaaS application model to meet the customized requirements of tenants.},
author = {Han, Chunyan and Wu, Chenni and Gong, Wanqi},
booktitle = {Proceedings - 2016 9th International Symposium on Computational Intelligence and Design, ISCID 2016},
doi = {10.1109/ISCID.2016.2103},
isbn = {9781509035588},
keywords = {Business process,Customized configuration,Layered structure,SaaS(Software as a service)},
pages = {412--416},
publisher = {IEEE},
title = {{Research on SaaS oriented business process customization method}},
url = {https://doi.org/10.1109{\%}2Fiscid.2016.2103},
volume = {2},
year = {2016}
}
@inproceedings{Cao_2015,
abstract = {Software-as-a-service (SaaS) is becoming more important as a software delivery and service model. However, multi-tenancy, which promises to provide a high degree of resource sharing among a large number of tenants (customers or organizations), can significantly complicate SaaS development, deployment, and management due to potential explosion of co-existing tenant-specific variations. Manually configuring those tenant-specific variations for multi-tenant SaaS systems cannot satisfy scalability and flexibility. In this paper, we propose a novel approach in support of multi-tenant SaaS systems using feature modeling and XML filtering techniques. Feature modeling is used to capture functional, non-functional requirements and constraints. The features of a cloud system and tenant-specific requirements are encoded with XPath feature representations and XML document, respectively. We adopt Yfilter, an established XML filtering technique, and tailor it to match cloud configurations that satisfy tenant-specific requirements and constraints. The experimental results demonstrate that our approach can automatically and correctly identify cloud system configurations that match tenant-specific requirements. In addition, the execution time in our approach is only a small fraction compared to the existing approaches (e.g., Fama) and the configuration space is also smaller.},
author = {Cao, Yang and Lung, Chung Horng and Ajila, Samuel A.},
booktitle = {Proceedings - International Computer Software and Applications Conference},
doi = {10.1109/COMPSAC.2015.255},
isbn = {9781467365635},
issn = {07303157},
keywords = {Cloud Computing,Feature Modelling,Software-as-a-Service,XML Filtering,Yfilter},
month = {jul},
pages = {454--459},
publisher = {IEEE},
title = {{Constraint-based multi-tenant SaaS deployment using feature modeling and XML filtering techniques}},
url = {https://doi.org/10.1109{\%}2Fcompsac.2015.255},
volume = {3},
year = {2015}
}
@inproceedings{Grati_2015,
abstract = {The new mode of inter-enterprise cooperation based on the paradigm of composite SaaS keeps promising an ease and a fast implementation of an on demand cooperation. These collaborations called often, on demand cooperation, arising to meet a business opportunity over the Internet. However, this new paradigm poses a certain number of challenges for us. The main one is the lack of a management framework for the cloud provider while covering the different layers IaaS-PaaS-SaaS. To tackle this challenge, we propose a management framework for a cloud provider to define the typical concepts related to the intern management of a composite SaaS provider. The proposed concepts are related to the stakeholders' definition and the presentation of the different management features to consider while specifying the dependence between the cloud layers.},
author = {Grati, Rima and Boukadi, Khouloud and Ben-Abdallah, Han{\^{e}}ne},
booktitle = {ICE-B 2015 - 12th International Conference on e-Business, Proceedings; Part of 12th International Joint Conference on e-Business and Telecommunications, ICETE 2015},
doi = {10.5220/0005550402210228},
isbn = {9789897581137},
keywords = {Cloud computing,SaaS cloud provider,Service},
pages = {221--228},
publisher = {{\{}SCITEPRESS{\}} - Science and and Technology Publications},
title = {{SaaS cloud provider management framework}},
url = {https://doi.org/10.5220{\%}2F0005550402210228},
year = {2015}
}
@article{Goode_2015,
abstract = {Despite the conceptual importance of security perceptions in contributing to client satisfaction, no study has yet provided empirical evidence of the link. We argue that because security perceptions are highly subjective and depend on the client's experiences, it is necessary to identify the perceived value of security in order to explain its effect on security. We adapt a recent model of SaaS satisfaction to include security and perceived value, and test the model on a sample of 135 SaaS clients. We find a significant positive relationship between security and satisfaction when mediated by perceived value. We also present an unmediated model in which security is not significant.},
author = {Goode, Sigi and Lin, Chinho and Tsai, Jacob C. and Jiang, James J.},
doi = {10.1016/j.dss.2014.12.005},
issn = {01679236},
journal = {Decision Support Systems},
keywords = {Perceived Value,Satisfaction,Security,Software-as-a-Service},
pages = {73--85},
publisher = {Elsevier {\{}BV{\}}},
title = {{Rethinking the role of security in client satisfaction with Software-as-a-Service (SaaS) providers}},
url = {https://doi.org/10.1016{\%}2Fj.dss.2014.12.005},
volume = {70},
year = {2015}
}
@incollection{Walraven_2011,
abstract = {Application-level multi-tenancy is an architectural design principle for Software-as-a-Service applications to enable the hosting of multiple customers (or tenants) by a single application instance. Despite the operational cost and maintenance benefits of application-level multi-tenancy, the current middleware component models for multi-tenant application design are inflexible with respect to providing different software variations to different customers. In this paper we show that this limitation can be solved by a multi-tenancy support layer that combines dependency injection with middleware support for tenant data isolation. Dependency injection enables injecting different software variations on a per tenant basis, while dedicated middleware support facilitates the separation of data and configuration metadata between tenants. We implemented a prototype on top of Google App Engine and we evaluated by means of a case study that the improved flexibility of our approach has little impact on operational costs and upfront application engineering costs. {\textcopyright} 2011 IFIP International Federation for Information Processing.},
author = {Walraven, Stefan and Truyen, Eddy and Joosen, Wouter},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-25821-3_19},
isbn = {9783642258206},
issn = {03029743},
keywords = {Dependency injection,Google App Engine,Multi-tenancy,Software-as-a-Service},
pages = {370--389},
publisher = {Springer Berlin Heidelberg},
title = {{A middleware layer for flexible and cost-efficient multi-tenant applications}},
url = {https://doi.org/10.1007{\%}2F978-3-642-25821-3{\_}19},
volume = {7049 LNCS},
year = {2011}
}
@article{Badidi_2018,
abstract = {Cloud service providers typically compose their services from a number of elementary services, which are developed in-house or built by third-party providers. Personalization of composite services in mobile environments is an interesting and challenging issue to address, given the opportunity to factor-in diverse user preferences and the plethora of mobile devices at use in multiple contexts. This work proposes a framework to address personalization in mobile cloud-service provisioning. Service personalization and adaptation may be considered at different levels, including the user profile, the mobile device in use, the context of the user and the composition specification. The user's mobile device and external services are typical sources of context information, used in our proposed algorithm to elicit context-aware services. The selection process is guided by quality-of-context criteria that combine cloud-service provider requirements and user preferences. Hence, the paper proposes an integrated framework for enhancing personalized mobile cloud-services, based on a composition approach that adapts context information using a common model of service metadata specification.},
author = {Badidi, Elarbi and Atif, Yacine and Sheng, Quan Z. and Maheswaran, Muthucumaru},
doi = {10.1007/s00607-018-0631-8},
issn = {0010485X},
journal = {Computing},
keywords = {Adaptive services,Composed services,Mobile cloud computing,Personalization,Quality of context},
month = {jun},
number = {4},
pages = {291--318},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{On personalized cloud service provisioning for mobile users using adaptive and context-aware service composition}},
url = {https://doi.org/10.1007{\%}2Fs00607-018-0631-8},
volume = {101},
year = {2019}
}
@inproceedings{Wood_2011,
abstract = {The purpose of this paper is to explore the challenges and complexity of multi-tenancy issues that have emerged though the development and adoption of cloud computing. The paper will focus specifically around cloud deployment and data storage, in particular relation to privacy concerns due to multi-tenancy. The reason for this lies with the identification of Software as a Service (SaaS) as the most likely adopted service model, particularly for those who are teleworking, as this relies on the service provider adopting a multi-tenancy environment within the data centre. The paper takes the perspective that, for both legal reasons and as part of shared obligation, it is necessary for users to recognise the need for common standards of policy and procedure. For example, this may be in levels of protection to prevent data protection and privacy laws being compromised. Both cloud service providers and legislative bodies need to acknowledge the impact that multi-tenancy can have on user privacy and act accordingly in regulatory steps and in encouraging a culture of adhering to common user standards. Such matters must be addressed at the earliest levels of growth in user demand to be optimally effective, especially when scalability is a fundamental driver for the adoption of cloud computing. {\textcopyright} 2011 IEEE.},
author = {Wood, Katie and Anderson, Mark},
booktitle = {Proceedings - 2011 8th IEEE International Conference on e-Business Engineering, ICEBE 2011},
doi = {10.1109/ICEBE.2011.68},
isbn = {9780769545189},
keywords = {Data Protection and Privacy Laws,Multi-tenancy,SaaS,Scalability,Security,teleworking},
pages = {119--124},
publisher = {IEEE},
title = {{Understanding the complexity surrounding multitenancy in cloud computing}},
url = {https://doi.org/10.1109{\%}2Ficebe.2011.68},
year = {2011}
}
@article{Gopalakrishnan_1994,
abstract = {This study addresses the debate over the occurrence and the applicability of unitary sequence and multiple sequence patterns in the innovation process in organizations. Our general argument is that each pattern's explanatory power hinges on identifiable contingencies. These influencing factors can and should be taken into account by both theorists and managers. Focusing on two types of innovation processes, generation and adoption, we use two innovation attributes-complexity and type-to determine the suitability of each pattern to a specific innovation process. It is proposed that generation and adoption of simple innovations, generation of technical innovations, and adoption of administrative innovations is adequately explained by the unitary sequence pattern. However, generation and adoption of complex innovations, generation of administrative innovations, and adoption of technical innovations is better described by the multiple sequence pattern. Implications for theory development and management practice are then discussed. {\textcopyright} 1994.},
author = {Gopalakrishnan, Shanthi and Damanpour, Fariborz},
doi = {10.1016/0923-4748(94)90001-9},
issn = {09234748},
journal = {Journal of Engineering and Technology Management},
keywords = {Administrative and technical innovations,Generation and adoption of innovations,Innovation complexity,Organizational innovation,Patterns in the innovation process},
month = {jun},
number = {2},
pages = {95--116},
publisher = {Elsevier {\{}BV{\}}},
title = {{Patterns of generation and adoption of innovation in organizations: Contingency models of innovation attributes}},
url = {https://doi.org/10.1016{\%}2F0923-4748{\%}2894{\%}2990001-9},
volume = {11},
year = {1994}
}
@inproceedings{Shwartz_2009,
abstract = {The very competitive business climate dictates efficient and cost effective delivery and support of IT services. Compounded by complexity of IT environments and criticality of IT to business success, IT service providers seek multi-tenant solutions to reduce operational cost and improve service quality. In this paper we consider a multi-tenant solution for IT service management and examine its critical aspects for realizing business benefits. We conduct a quantitative study of its benefits using a complexity based value assessment methodology. By regarding complexity as a substitute for potential labor cost, we estimate the business value of the multi-tenant solution before its actual deployment. {\textcopyright} 2009 IEEE.},
author = {Shwartz, Larisa and Diao, Yixin and Grabarnik, Genady Ya},
booktitle = {2009 IFIP/IEEE International Symposium on Integrated Network Management, IM 2009},
doi = {10.1109/INM.2009.5188879},
isbn = {9781424434879},
month = {jun},
pages = {721--731},
publisher = {IEEE},
title = {{Multi-tenant solution for IT service management: A quantitative study of benefits}},
url = {https://doi.org/10.1109{\%}2Finm.2009.5188879},
year = {2009}
}
@article{Benlian_2011,
abstract = {IT providers have heralded software-as-a-service (SaaS) as an excellent complement to on-premises software addressing the shortcomings of previous on-demand software solutions such as application service provision (ASP). However, although some practitioners and academics emphasize the opportunities that SaaS offers companies, others already predict its decline due to the considerable risk involved in its deployment. Ours is the first study to analyze the opportunities and risks associated with adopting SaaS as perceived by IT executives at adopter and non-adopter firms. We first developed a research model grounded in an opportunity-risk framework, which is theoretically embedded in the theory of reasoned action. Subsequently, we analyzed the data collected through a survey of 349 IT executives at German companies. Our findings suggest that in respect to both SaaS adopters and non-adopters, security threats are the dominant factor influencing IT executives' overall risk perceptions. On the other hand, cost advantages are the strongest driver affecting IT executives' perceptions of SaaS opportunities. Furthermore, we find significant differences between adopters' and non-adopters' perceptions of specific SaaS risks and opportunities, such as performance and economic risks as well as quality improvements, and access to specialized resources. Our study provides relevant findings to improve companies' assessment of SaaS offerings. It also offers SaaS providers insights into the factors that should be prioritized or avoided when offering SaaS services to companies at different stages of their technology adoption lifecycle. {\textcopyright} 2011 Elsevier B.V. All rights reserved.},
author = {Benlian, Alexander and Hess, Thomas},
doi = {10.1016/j.dss.2011.07.007},
issn = {01679236},
journal = {Decision Support Systems},
keywords = {Cloud computing,IT outsourcing,SaaS opportunities,SaaS risks,Software-as-a-service (SaaS),Technology adoption,Theory of reasoned action},
number = {1},
pages = {232--246},
publisher = {Elsevier {\{}BV{\}}},
title = {{Opportunities and risks of software-as-a-service: Findings from a survey of IT executives}},
url = {https://doi.org/10.1016{\%}2Fj.dss.2011.07.007},
volume = {52},
year = {2011}
}
@article{Duraisamy_2018,
abstract = {Cloud computing has become most trending and emerging technology in recent years and has changed the way of computation and services delivered to customer. Despite all the advantages that cloud provides, users still feel insecure to adopt cloud computing and having major concern over the data security and privacy. This is due to the data of numerous tenants are being located in the same location or database. In this environment data access by unauthorized user is possible. To overcome this issue, there should be a clear boundary for each tenant. Access control model is used to grant the right level of permission to the user in order to carry out their duties, to prevent unauthorized access and to protect assets of organizations and systems. Access control model also can prevent unauthorized user from accessing protected data, ensure authorized users can access protected data and prevent authorized users from performing illegal actions on protected data. There are many types of access control model available in the industry. However, not all the models can be applied in cloud environment due to various reasons. This paper presents an analysis of existing role based access control models. We use evaluation criteria that outlined by NIST for access control system. First, we identified a list of criteria that are suitable to apply in cloud environment specifically on data security and privacy of multi-tenant SaaS application in public cloud. Then, we analysed the existing access control models against the identified evaluation criteria. The analysis outlines the important gaps and missing elements of an access control model that can be extended into an access control model based testing.},
author = {Duraisamy, Gunavathi and Ghani, Abdul Azim Abd and Zulzalil, Hazura and Abdullah, Azizol},
doi = {10.1166/asl.2018.11122},
issn = {1936-6612},
journal = {Advanced Science Letters},
month = {mar},
number = {3},
pages = {1619--1622},
publisher = {American Scientific Publishers},
title = {{Analysis of Access Control Model for Data Security and Privacy on Multi-Tenant SaaS}},
url = {https://doi.org/10.1166{\%}2Fasl.2018.11122},
volume = {24},
year = {2018}
}
@book{2008,
abstract = {Exploring the increasing involvement of the private sector in social policy, this collection examines the complex relationship between the public and private sectors from an international perspective, focusing on health and pension policies.},
author = {B{\'{e}}land, Daniel and Gran, Brian},
booktitle = {Public and Private Social Policy: Health and Pension Policies in a New Era},
doi = {10.1057/9780230228771},
editor = {B{\'{e}}land, Daniel and Gran, Brian},
isbn = {9780230228771},
pages = {1--298},
publisher = {Palgrave Macmillan {\{}UK{\}}},
title = {{Public and private social policy: Health and pension policies in a New Era}},
url = {https://doi.org/10.1057{\%}2F9780230228771},
year = {2008}
}
@inproceedings{2013,
abstract = {Traditional software applications are typically customized before being delivered to a client. This customization was a paid service delivered by software development organisations. With the growing demand of applications delivered with a SaaS model, software development organisations are increasingly responding with the migration of traditional applications to a multi-tenant SaaS deployment model. This makes them face themselves with the problem of customizing a shared application, with a shared database, for each tenant that subscribes their deployed service. After overviewing existing solutions for application customizability, this paper addresses the customization of the business logic layer of multi-tenant applications by proposing a solution, which has been used in a multi-tenant WMS application deployed with a SaaS service model. Copyright {\textcopyright} 2013 SCITEPRESS.},
author = {Correia, Andr{\'{e}} and Penha, Jorge Renato and {Da Cruz}, Ant{\'{o}}nio Miguel Rosado},
booktitle = {ICSOFT 2013 - Proceedings of the 8th International Joint Conference on Software Technologies},
doi = {10.5220/0004490401620168},
isbn = {9789898565686},
keywords = {Business logic configurability,Customizability,Extensibility,Multi-tenancy,SaaS,Software as a service},
pages = {162--168},
publisher = {{\{}SciTePress{\}} - Science and and Technology Publications},
title = {{An architectural model for customizing the business logic of SaaS applications}},
url = {https://doi.org/10.5220{\%}2F0004490401620168},
year = {2013}
}
@inproceedings{Schroeter_2012,
abstract = {A widespread business model in cloud computing is to offer software as a service (SaaS) over the Internet. Such applications are often multi-tenant aware, which means that multiple tenants share hardware and software resources of the same application instance. However, SaaS stakeholders have different or even contradictious requirements and interests: For a user, the application's quality and non-functional properties have to be maximized (e.g., choosing the fastest available algorithm for a computation at runtime). In contrast, a resource or application provider is interested in minimizing the operating costs while maximizing his profit. Finally, tenants are interested in offering a customized functionality to their users. To identify an optimal compromise for all these objectives, multiple levels of variability have to be supported by reference architectures for multi-tenant SaaS applications. In this paper, we identify requirements for such a runtime architecture addressing the individual interests of all involved stakeholders. Furthermore, we show how our existing architecture for dynamically adaptive applications can be extended for the development and operation of multi-tenant applications. Copyright 2012 ACM.},
author = {Schroeter, Julia and Cech, Sebastian and G{\"{o}}tz, Sebastian and Wilke, Claas and A{\ss}mann, Uwe},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/2110147.2110160},
isbn = {9781450310581},
keywords = {Auto-tuning,Multi-tenancy,Self-optimization,Software-as-a-service,Variability modeling},
pages = {111--120},
publisher = {{\{}ACM{\}} Press},
title = {{Towards modeling a variable architecture for multi-tenant SaaS-applications}},
url = {https://doi.org/10.1145{\%}2F2110147.2110160},
year = {2012}
}
@inproceedings{Kalra_2017,
abstract = {Multi-tenant architectural principle for cloud applications is a relatively new principle as compared to others such as multi- user and multi-instance. It allows to share a single instance of an application among multiple tenants with a high degree of customization. In this paper, we present a collection of patterns to design a multi-tenant application such that it can manage its tenants efficiently. The patterns described here are - multi-tenant, tenant manager, tenant observability, tenant separability and tenant elasticity. Each pattern covers the different aspects of systematic tenant management.},
author = {Kalra, Sumit and Prabhakar, T. V.},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/3147704.3147722},
isbn = {9781450348485},
keywords = {Elasticity,Multi-tenant,Observability,Separability},
month = {jul},
publisher = {ACM},
title = {{Patterns for managing tenants in a multi-tenant application}},
url = {https://doi.org/10.1145{\%}2F3147704.3147722},
volume = {Part F1320},
year = {2017}
}
@incollection{Lechesa_2012,
abstract = {Within the cloud computing hype, ERP SaaS is receiving more focus from ERP vendors such as ERP market leader SAP announcing SAP by Design, their new ERP SaaS solution. SaaS is a new approach to deliver software and has had proven success with CRM systems such as Salesforce.com. The appeal of SaaS is driven by amongst other things, lower Total Cost of Ownership and faster implementation periods. However, the rate at which ERP SaaS is being adopted is low in comparison to other SaaS applications such as CRM or Human Resource systems. Hence the need to establish the reasons for this low adoption. Consequently the purpose of this research was to determine barriers that affect the adoption of ERP SaaS in South Africa. Using interviews and qualitative data analysis, this study developed a model that explains the factors that affect the adoption of ERP SaaS. Network limitations, customisation, security and cost concerns were raised as dominant factors affecting the adoption of ERP SaaS. The research concludes by suggesting that over time the adoption of ERP SaaS should increase as the technology matures. {\textcopyright} 2012 IFIP International Federation for Information Processing.},
author = {Lechesa, Motheo and Seymour, Lisa and Schuler, Joachim},
booktitle = {Lecture Notes in Business Information Processing},
doi = {10.1007/978-3-642-28827-2_11},
isbn = {9783642288265},
issn = {18651348},
keywords = {ERP adoption,SaaS,South Africa,cloud computing},
pages = {152--167},
publisher = {Springer Berlin Heidelberg},
title = {{ERP software as service (SaaS): Factors affecting adoption in South Africa}},
url = {https://doi.org/10.1007{\%}2F978-3-642-28827-2{\_}11},
volume = {105 LNBIP},
year = {2012}
}
@article{Alkhatib_2015,
abstract = {Over the last two years, nine IEEE Computer Society tech leaders collaborated to identify important industry advances that promise to change the world by 2022. The 23 technologies provide new insights into the emergence of "seamless intelligence.".},
author = {Alkhatib, Hasan and Faraboschi, Paolo and Frachtenberg, Eitan and Kasahara, Hironori and Lange, Danny and Laplante, Phil and Merchant, Arif and Milojicic, Dejan and Schwan, Karsten},
doi = {10.1109/MC.2015.92},
issn = {00189162},
journal = {Computer},
keywords = {IEEE CS 2022 report,IEEE Computer Society,seamless intelligence,societal implications of technology,technology disruptors,technology drivers,technology forecasting},
month = {mar},
number = {3},
pages = {68--76},
publisher = {Institute of Electrical and Electronics Engineers ({\{}IEEE{\}})},
title = {{What Will 2022 Look Like? The IEEE CS 2022 Report}},
url = {https://doi.org/10.1109{\%}2Fmc.2015.92},
volume = {48},
year = {2015}
}
@inproceedings{Bennett,
abstract = {For the past 40 years, the techniques, processes and methods of software development have been dominated by supply-side issues, giving rise to a software industry oriented towards developers rather than users. To achieve the levels of functionality, flexibility and time-to-market required by users, a radical shift is required in the development of software, with a more demand-centric view, leading to software which will be delivered as a service within the framework of an open marketplace. Already, there are some signs that this approach is being adopted by industry, but in a very limited way. We summarise research and a research method which has resulted in a long-term strategic view of software engineering innovation. Based on this foundation, we describe more recent work, which has resulted in an innovative demand-side model for the future of software. We propose a service architecture in which components may be bound instantly, just at the time they are needed, and then the binding may be discarded. A major benefit of this approach is that it leads to highly flexible and agile software that should be able to meet rapidly changing business needs.},
author = {Bennett, K. and Layzell, P. and Budgen, D. and Brereton, P. and Macaulay, L. and Munro, M.},
booktitle = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
doi = {10.1109/APSEC.2000.896702},
isbn = {0769509150},
issn = {15301362},
keywords = {Computer architecture,Computer industry,Computer science,Failure analysis,Marine vehicles,Programming,Software engineering,Software quality,Technological innovation,Time to market},
pages = {214--221},
publisher = {{\{}IEEE{\}} Comput. Soc},
title = {{Service-based software: The future for flexible software}},
url = {https://doi.org/10.1109{\%}2Fapsec.2000.896702},
volume = {2000-Janua},
year = {2000}
}
@incollection{Fruin_1994,
author = {Fruin, W. Mark and Fruin, W. Mark},
booktitle = {The Japanese Enterprise System},
doi = {10.1093/0198288980.003.0004},
month = {jun},
pages = {89--121},
publisher = {Oxford University Press},
title = {{Inventing the Enterprise System}},
url = {https://doi.org/10.1093{\%}2F0198288980.003.0004},
year = {2003}
}
@inproceedings{Kitchenham_2010,
abstract = {Background: We are strong advocates of evidence-based software engineering (EBSE) in general and systematic literature reviews (SLRs) in particular. We believe it is essential that the SLR methodology is being used constructively to support software engineering research. Aim: This study aims to assess the value of mapping studies which are a form of SLR that aims to identify and categorise the available research on a specific topic. Methods: We use a multi-case, participant observer case study using five examples of studies that were based on preceding mapping studies. Results: We identified 13 unique benefits that can accrue from basing research on a preceding mapping study of which only 2 were case specific. We also identified 9 problems associated with using preceding mapping studies of which two were case specific. Conclusions: Mapping studies can save time and effort for researchers and provide baselines to assist new research efforts. However, they must be of high quality in terms of completeness and rigour if they are to be a reliable basis for follow-on research.},
author = {Kitchenham, Barbara A. and Budgen, David and Brereton, O. Pearl},
doi = {10.14236/ewic/ease2010.4},
publisher = {{\{}BCS{\}} Learning {\&} Development},
title = {{The value of mapping studies – A participant-observer case study}},
url = {https://doi.org/10.14236{\%}2Fewic{\%}2Fease2010.4},
year = {2010}
}
@inproceedings{Mourao_2017,
abstract = {[Background] Systematic Literature Reviews (SLRs) are one of the important pillars when employing an evidence-based paradigm in Software Engineering. To date most SLRs have been conducted using a search strategy involving several digital libraries. However, significant issues have been reported for digital libraries and applying such search strategy requires substantial effort. On the other hand, snowballing has recently arisen as a potentially more efficient alternative or complementary solution. Nevertheless, it requires a relevant seed set of papers. [Aims] This paper proposes and evaluates a hybrid search strategy combining searching in a specific digital library (Scopus) with backward and forward snowballing. [Method] The proposed hybrid strategy was applied to two previously published SLRs that adopted database searches. We investigate whether it is able to retrieve the same included papers with lower effort in terms of the number of analysed papers. The two selected SLRs relate respectively to elicitation techniques (not confined to Software Engineering (SE)) and to a specific SE topic on cost estimation. [Results] Our results provide preliminary support for the proposed hybrid search strategy as being suitable for SLRs investigating a specific research topic within the SE domain. Furthermore, it helps overcoming existing issues with using digital libraries in SE. [Conclusions] The hybrid search strategy provides competitive results, similar to using several digital libraries. However, further investigation is needed to evaluate the hybrid search strategy.},
author = {Mourao, Erica and Kalinowski, Marcos and Murta, Leonardo and Mendes, Emilia and Wohlin, Claes},
booktitle = {International Symposium on Empirical Software Engineering and Measurement},
doi = {10.1109/ESEM.2017.30},
isbn = {9781509040391},
issn = {19493789},
keywords = {hybrid strategy,search strategy,snowballing,systematic review},
month = {nov},
pages = {193--198},
publisher = {IEEE},
title = {{Investigating the Use of a Hybrid Search Strategy for Systematic Reviews}},
url = {https://doi.org/10.1109{\%}2Fesem.2017.30},
volume = {2017-Novem},
year = {2017}
}
@inproceedings{Baliyan_2014,
abstract = {The Software as a Service model of Cloud Computing offers economies of scale through the pay per use model; however, it renders the modern software very different from traditional software. Hence, there is a need to adapt Software Engineering approach in a manner that will make the development process and delivery of Software as a Service more efficient and of high quality. After performing literature review, a classification of ongoing research in this direction of adaptation is presented. Various research gaps in the areas of software development process, software reengineering, measurement, metrics, and quality models targeted at Software as a Service are identified, which can be a first step towards the definition of standards and guidelines for Software as a Service development.},
author = {Baliyan, Niyati and Kumar, Sandeep},
booktitle = {2014 7th International Conference on Contemporary Computing, IC3 2014},
doi = {10.1109/IC3.2014.6897195},
isbn = {9781479951734},
keywords = {cloud computing,quality,reengineering,software as a service,software engineering,web engineering},
pages = {329--333},
publisher = {IEEE},
title = {{Towards software engineering paradigm for software as a service}},
url = {https://doi.org/10.1109{\%}2Fic3.2014.6897195},
year = {2014}
}
@incollection{Kabbedijk_2011,
abstract = {In order to serve a lot of different customers in a SaaS environment, software vendors have to comply to a range of different varying requirements in their software product. Because of these varying requirements and the large number of customers, a variable multi-tenant solution is needed to achieve this goal. This paper gives a pragmatic approach to the concepts of multi-tenancy and variability in SaaS environments and proposes three architectural patterns that support variability in multi-tenant SaaS environments. The Customizable Data Views pattern, the Module Dependent Menu pattern and the Pre/Post Update Hooks pattern are explained and shown as good practices for applying variability in a multi-tenant SaaS environment. All patterns are based on case studies performed at two large software vendors in the Netherlands who are offering an ERP software product as a service. {\textcopyright} 2011 Springer-Verlag.},
author = {Kabbedijk, Jaap and Jansen, Slinger},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-24574-9_20},
isbn = {9783642245732},
issn = {03029743},
keywords = {Architectural Patterns,Multi-tenancy,Software-as-a-Service,Variability},
pages = {151--160},
publisher = {Springer Berlin Heidelberg},
title = {{Variability in multi-tenant environments: Architectural design patterns from industry}},
url = {https://doi.org/10.1007{\%}2F978-3-642-24574-9{\_}20},
volume = {6999 LNCS},
year = {2011}
}
@inproceedings{Kitchenham,
author = {Kitchenham, B a},
booktitle = {Proceedings of the 10th International Symposium on Software Metrics, 2004},
doi = {10.1109/METRIC.2004.1357885},
isbn = {9780769521299},
issn = {9780769521299},
number = {4},
pages = {xii},
publisher = {IEEE},
title = {{International Symposium on Software Metrics: Systematic reviews}},
url = {http://ezproxy.unal.edu.co/login?url=http://search.ebscohost.com/login.aspx?direct=true{\&}db=edb{\&}AN=80751552{\&}lang=es{\&}site=eds-live},
volume = {26},
year = {2004}
}
@article{A_Shahin_2014,
abstract = {Most of current Software-as-a-Service (SaaS) applications are developed as customizable service- oriented applications that serve a large number of tenants (users) by one application instance. The current rapid evolution of SaaS applications increases the demand to study the commonality and variability in software product lines that produce customizable SaaS applications. During runtime, Customizability is required to achieve different tenants' requirements. During the development process, defining and realizing commonalty and variability in SaaS applications' families is required to develop reusable, flexible, and customizable SaaS applications at lower costs, in shorter time, and with higher quality. In this paper, Orthogonal Variability Model (OVM) is used to model variability in a separated model, which is used to generate simple and understandable customization model. Additionally, Service oriented architecture Modeling Language (SoaML) is extended to define and realize commonalty and variability during the development of SaaS applications. KEYWORDS},
author = {{A. Shahin}, Ashraf},
doi = {10.5121/ijcsit.2014.6503},
issn = {09754660},
journal = {International Journal of Computer Science and Information Technology},
number = {5},
pages = {39--49},
publisher = {Academy and Industry Research Collaboration Center ({\{}AIRCC{\}})},
title = {{Variability Modeling for Customizable Saas Applications}},
url = {https://doi.org/10.5121{\%}2Fijcsit.2014.6503},
volume = {6},
year = {2014}
}
@inproceedings{Vidhyalakshmi_2014,
abstract = {Software as a Service (SaaS) is an on-demand software delivery model, where the software and its related data are placed at remote location and are accessed as a web based service using a thin client such as web browser over the Internet. The salient features of SaaS includes low startup cost, easy provisioning at the time of need, shorter release cycle, easy maintenance, cost saving on maintenance and upgradation, multi tenant architecture, etc. The advantages and the working pattern surely make it as a best option for Small and Medium Business Enterprises, when compared to traditional web applications. However the consideration of wide consumer base with different requirements specification for a single application leads to the complexity of SaaS design. The SaaS applications are based on protocols such as HTTP, SOAP and architecture design concept such as REST. Many development models have been used for SaaS design however most of the models have very little focus on the reliability. A perspective comparison has been presented in the paper work for the traditional applications and the SaaS applications. A number of desired characteristics have been outlined to increase the configurability, portability and reliability of the SaaS applications designs. {\textcopyright} 2014 IEEE.},
author = {Vidhyalakshmi, R. and Kumar, Vikas},
booktitle = {2014 International Conference on Computing for Sustainable Global Development, INDIACom 2014},
doi = {10.1109/IndiaCom.2014.6828017},
isbn = {9789380544120},
keywords = {Design of SaaS,Mashups,Modularization,NoSQL,SaaS DRESS code,Service Oriented Architecture},
month = {mar},
pages = {541--544},
publisher = {IEEE},
title = {{Design comparison of traditional application and SaaS}},
url = {https://doi.org/10.1109{\%}2Findiacom.2014.6828017},
year = {2014}
}
@incollection{Shroff,
author = {Shroff, Gautam and Shroff, Gautam},
booktitle = {Enterprise Cloud Computing},
doi = {10.1017/cbo9780511778476.024},
pages = {243--252},
publisher = {Cambridge University Press},
title = {{Enterprise cloud computing ecosystem}},
url = {https://doi.org/10.1017{\%}2Fcbo9780511778476.024},
year = {2011}
}
@article{Xin_2008,
abstract = {Software-as-a-Service (SaaS) is emerging as a viable outsourcing option for clients interested in paying for the right to access a standardized set of business software functions through the network. SaaS model largely replaced the Application Service Providers (ASPs) model, by creating an architecture that provides no mechanisms for customizing the software on the vendor side; all customization is done on the client side through standardized interfaces. The fact that vendors are not making any client-specific investments makes this outsourcing model quite intriguing. In this paper we investigate client's side determinants the SaaS model adoption. We draw on economic, strategic management, and Information Systems theories to develop a theoretical framework. By integrating diverse literature streams, we are able to develop a more elaborate view of uncertainty arguing that some types uncertainty increase the propensity to adopt SaaS, while other types do not. Finally, we argue that the maturity of the client's internal enterprise IT architecture plays an important role in SaaS adoption decisions.},
author = {Xin, Mingdi and Levina, Natalia},
doi = {10.2139/ssrn.1319488},
journal = {SSRN Electronic Journal},
publisher = {Elsevier {\{}BV{\}}},
title = {{Software-as-a-Service Model: Elaborating Client-Side Adoption Factors}},
url = {https://doi.org/10.2139{\%}2Fssrn.1319488},
year = {2011}
}
@inproceedings{Li_2010,
abstract = {Though cloud computing has many advantages, it still faces a big challenge of security and privacy problem. This problem is also an obstacle to cloud computing since no one is willing to run his businesses in facilities he has no control over it. Moreover, since cloud computing is a multi-tenancy IT service mode, there should be a capability to compartmentalize different customers in cloud facilities; therefore, security duty separation between CSP and customers must be supported in cloud. However, this security duty separation is not common in traditional security mechanisms. Multi-tenancy based access control model (MTACM) was designed to embed the security duty separation principle in cloud; it was a two granule level access control mechanism, one was tenant granule for CSP to compartmentalize different customers, the other was application granule for customers to control the access to their own applications. MTACM was technically and practically feasible. A prototype introduced in this paper showed that MTACM has a good performance. {\textcopyright}2010 IEEE.},
author = {Li, Xiao Yong and Shi, Yong and Yu-Guo and Ma, Wei},
booktitle = {2010 International Conference on Computational Intelligence and Software Engineering, CiSE 2010},
doi = {10.1109/CISE.2010.5677061},
isbn = {9781424453924},
keywords = {Access control,Cloud computing,Proxy,SSL,Security},
publisher = {IEEE},
title = {{Multi-tenancy based access control in cloud}},
url = {https://doi.org/10.1109{\%}2Fcise.2010.5677061},
year = {2010}
}
@inproceedings{2013,
abstract = {Traditional software applications are typically customized before being delivered to a client. This customization was a paid service delivered by software development organisations. With the growing demand of applications delivered with a SaaS model, software development organisations are increasingly responding with the migration of traditional applications to a multi-tenant SaaS deployment model. This makes them face themselves with the problem of customizing a shared application, with a shared database, for each tenant that subscribes their deployed service. After overviewing existing solutions for application customizability, this paper addresses the customization of the business logic layer of multi-tenant applications by proposing a solution, which has been used in a multi-tenant WMS application deployed with a SaaS service model. Copyright {\textcopyright} 2013 SCITEPRESS.},
author = {Correia, Andr{\'{e}} and Penha, Jorge Renato and {Da Cruz}, Ant{\'{o}}nio Miguel Rosado},
booktitle = {ICSOFT 2013 - Proceedings of the 8th International Joint Conference on Software Technologies},
doi = {10.5220/0004490401620168},
isbn = {9789898565686},
keywords = {Business logic configurability,Customizability,Extensibility,Multi-tenancy,SaaS,Software as a service},
pages = {162--168},
publisher = {{\{}SciTePress{\}} - Science and and Technology Publications},
title = {{An architectural model for customizing the business logic of SaaS applications}},
url = {https://doi.org/10.5220{\%}2F0004490401620168},
year = {2013}
}
@inproceedings{Yong_Zhang_2009,
abstract = {This paper introduces a Software as a Service (SaaS) application which is designed and delivered in high level maturity model. In order to realize the configurability, metadata is used to define all the variability points of the application. Meanwhile, JMX is used to manage the metadata so that changed metadata can be hot deployed immediately during runtime. Scalability is discussed both in application layer and data layer. Integration requirements and roadmap between SaaS application and on-premise applications are introduced. What's more, service surrogate extended from SCA and a message engine are used to meet the integration requirements in business processes. {\textcopyright}2009 IEEE.},
author = {Zhang, Yong and Liu, Shijun and Meng, Xiangxu},
booktitle = {2009 IEEE Asia-Pacific Services Computing Conference, APSCC 2009},
doi = {10.1109/APSCC.2009.5394111},
isbn = {9781424453368},
pages = {273--278},
publisher = {IEEE},
title = {{Towards high level SaaS maturity model: Methods and case study}},
url = {https://doi.org/10.1109{\%}2Fapscc.2009.5394111},
year = {2009}
}
@inproceedings{Aleem_2017,
abstract = {Software-As-A-service (SaaS) has received significant attention from software providers and users as software delivery model. Most of the existing companies are transferring their business into SaaS model. This intensely competitive environment has imposed many challenges for SaaS developers for the development process. SaaS development is a very complex process and SaaS success depends on its architecture design and development. This paper identifies important key factors from literature and provides guidelines for SaaS developers to support these factors in SaaS architecture development process. Ultimately, it will be beneficial for SaaS developers to improve the development process of SaaS application..},
author = {Aleem, Saiqa and Batool, Rabia and Ahmed, Faheem and Khatak, Asad and {Muhammad Ubaid Ullah}, Raja},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/3141128.3141136},
isbn = {9781450353434},
keywords = {Customization,Guidelines,MTA,SaaS,SaaS architecture,Scalability},
pages = {94--99},
publisher = {{\{}ACM{\}} Press},
title = {{Architecture guidelines for SaaS development process}},
url = {https://doi.org/10.1145{\%}2F3141128.3141136},
year = {2017}
}
@inproceedings{Weissman_2009,
abstract = {Force.com is the preeminent on-demand application development platform in use today, supporting some 55,000+ organizations. Individual enterprises and commercial software-as-a-service (SaaS) vendors trust the platform to deliver robust, reliable, Internet-scale applications. To meet the extreme demands of its large user population, Force.com's foundation is a metadata-driven software architecture that enables multitenant applications. The focus of this paper is multitenancy, a fundamental design approach that can dramatically improve SaaS application management. This paper defines multitenancy, explains its benefits, and demonstrates why metadata-driven architectures are the premier choice for implementing multitenancy. {\textcopyright} 2009 ACM.},
author = {Weissman, Craig D. and Bobrowski, Steve},
booktitle = {SIGMOD-PODS'09 - Proceedings of the International Conference on Management of Data and 28th Symposium on Principles of Database Systems},
doi = {10.1145/1559845.1559942},
isbn = {9781605585543},
keywords = {Domain specific language,Flex schema,Multi-tenancy,Object-relational mapping,Query optimization},
pages = {889--896},
publisher = {{\{}ACM{\}} Press},
title = {{The design of the force.com multitenant internet application development platform}},
url = {https://doi.org/10.1145{\%}2F1559845.1559942},
year = {2009}
}
@inproceedings{Srivastava_2015,
abstract = {Cloud computing is rapidly emerging as the preferred computing environment, largely because of the manifold advantages that this paradigm offers in terms of scale, flexibility and economics of computing. While the benefits of cloud computing in comparison to traditional standalone computing environments are compelling, the shift in paradigm introduces unprecedented and varied challenges in data security, recovery, user privacy, access control, trust, notwithstanding legal issues. This paper lists the various challenges that are unique to cloud computing environments and also presents a comparative analysis of solutions and standards that have been presented towards mitigation of security risks in cloud computing.},
author = {Srivastava, Stuti and Sudhish, Prem Sewak},
booktitle = {Proceedings of the 2015 39th National Systems Conference, NSC 2015},
doi = {10.1109/NATSYS.2015.7489088},
isbn = {9781467368285},
keywords = {Cloud Framework,Computing Paradigms,Distributed Computing,Privacy,Security Infrastructure},
publisher = {IEEE},
title = {{Security in cloud computing systems: A review of challenges and solutions for security in distributed computing environments}},
url = {https://doi.org/10.1109{\%}2Fnatsys.2015.7489088},
year = {2016}
}
@incollection{Nowak_2017,
abstract = {Enterprise resource planning (ERP) systems in the cloud are nowa days offered with different service models and deployment options. Depending on these models and options, the degree of flexibility varies as to what the customer gets with regard to customization requirements. Based on an empirical study of cloud ERP systems on the market, the paper focuses on the customization approaches applied by the vendors and the resulting degree of flexibility for adapting specific system elements. Our research shows that different customiza tion options, beyond parameter-based configuration, are usually incorporated into the vendors' customization strategies. The flexibility depends to a large extent on the maturity of the system, i.e., is it a cloud-native or a cloud-enabled solution.},
author = {Nowak, Dawid and Kurbel, Karl},
booktitle = {Lecture Notes in Business Information Processing},
doi = {10.1007/978-3-319-58801-8_12},
isbn = {9783319588001},
issn = {18651348},
keywords = {Cloud,Customization,ERP,Flexibility,On-demand,SaaS},
pages = {135--146},
publisher = {Springer International Publishing},
title = {{Understanding the flexibility of cloud ERP software}},
url = {https://doi.org/10.1007{\%}2F978-3-319-58801-8{\_}12},
volume = {285},
year = {2017}
}
@article{Wohlin_2013,
author = {Wohlin, Claes and Prikladniki, Rafael},
doi = {10.1016/j.infsof.2013.02.002},
issn = {09505849},
journal = {Information and Software Technology},
month = {jun},
number = {6},
pages = {919--920},
publisher = {Elsevier {\{}BV{\}}},
title = {{Systematic literature reviews in software engineering}},
url = {https://doi.org/10.1016{\%}2Fj.infsof.2013.02.002},
volume = {55},
year = {2013}
}
@inproceedings{Tsai_2010,
abstract = {Software-as-as-Service (SaaS) is a new approach for developing software, and it is characterized by its multi-tenancy architecture and its ability to provide flexible customization to individual tenant. However, the multi-tenancy architecture and customization requirements have brought up new issues in software, such as database design, database partition, scalability, recovery, and continuous testing. This paper proposes a hybrid test database design to support SaaS customization with two-layer database partitioning. The database is further extended with a new built-in redundancy with ontology so that the SaaS can recover from ontology, data or metadata failures. Furthermore, constraints in metadata can be used either as test cases or policies to support SaaS continuous testing and policy enforcement.},
author = {Tsai, Wei Tek and Shao, Qihong and Huang, Yu and Bai, Xiaoying},
booktitle = {Proceedings of the 2nd Asia-Pacific Symposium on Internetware, Internetware 2010},
doi = {10.1145/2020723.2020731},
isbn = {9781450306942},
keywords = {Customization,Database Partitioning,Recovery,SaaS,Testing},
publisher = {{\{}ACM{\}} Press},
title = {{Towards a scalable and robust multi-tenancy SaaS}},
url = {https://doi.org/10.1145{\%}2F2020723.2020731},
year = {2010}
}
@inproceedings{Guo_2007,
abstract = {Multi-tenancy technology is one of key competencies for network delivery services to achieve higher profit margin by leveraging the economic of scale. This paper explores the requirements and challenges of the native multi-tenancy pattern which have the potential of serving a large volume of clients simultaneously. We provide a framework with a set of multi-tenancy common services to help people design and implement a high quality native multi-tenant application more efficiently. Due to the essential requirement to guarantee service quality with high share efficiency, we present approaches and principles to support better isolations among tenants in many aspects such as security, performance, availability, administration etc. We have already achieved many hand on experiences by applying parts of the design and principles into a real multi-tenant application, and identified some future research points to better safeguard the quality of service for each tenant. {\textcopyright} 2007 IEEE.},
author = {Chang, Jie Guo and Sun, Wei and Huang, Ying and Zhi, Hu Wang and Gao, Bo},
booktitle = {Proceedings - The 9th IEEE International Conference on E-Commerce Technology; The 4th IEEE International Conference on Enterprise Computing, E-Commerce and E-Services, CEC/EEE 2007},
doi = {10.1109/CEC-EEE.2007.4},
isbn = {0769529135},
month = {jul},
pages = {551--558},
publisher = {IEEE},
title = {{A framework for native multi-tenancy application development and management}},
url = {https://doi.org/10.1109{\%}2Fcec-eee.2007.4},
year = {2007}
}
@article{Ramachandran_2012,
abstract = {Cloud-based systems promise an on-demand service provisioning system along with a "pay-as-you-use" policy. In the case of multi-tenant systems this would mean dynamic creation of a tenant by integrating existing cloud-based services on the fly. Presently, dynamic creation of a tenant is handled by building the required components from scratch. Although multi-tenant systems help providers save cost by allocating multiple tenants to the same instance of an application, they incur huge reconfiguration costs. Cost and time spent on these reconfiguration activities can be reduced by re-constructing tenants from existing tenant configurations supported by service providers. Multi-tenant cloud-based systems also lack the facility of allowing clients to specify their requirements. Giving clients the flexibility to specify requirements helps them avoid spending an excessive amount of time and effort looking through a list of services, many of which might not be relevant to them. Moreover, dynamic provisioning in the cloud requires an integrated solution across the technology stack (software, platform and infrastructure) combining functional, non-functional and resource allocation requirements. Existing research works in the area of web service matching, although numerous, still fall short, since they usually consider each requirement type in isolation and cannot provide an integrated solution. To that end, in this paper we investigate the features needed for dynamic service provisioning on the cloud. We propose a novel User Interface-Tenant Selector-Customizer (UTC) model and approach, which enables cloud-based services to be systematically modeled and provisioned as variants of existing service tenants in the cloud. Our approach considers functional, non-functional and resource allocation requirements, which are explicitly specified by the client via the user interface component of the model. To the best of our knowledge, ours is the first such integrated approach. We illustrate our ideas using a realistic running example, and also present a proof-of-concept prototype built using IBM's Rational Software Architect modeling tool. We also present experimental results demonstrating the applicability of our matching algorithm. Our results show significant reduction in matching time with the help of an elimination process that reduces the search space needed for performing matching. {\textcopyright} 2012 Springer-Verlag London Limited.},
author = {Ramachandran, Lakshmi and Narendra, Nanjangud C. and Ponnalagu, Karthikeyan},
doi = {10.1007/s11761-012-0116-0},
issn = {18632386},
journal = {Service Oriented Computing and Applications},
keywords = {Cloud computing,Multi-tenant systems,Service clouds,Service-oriented architecture},
month = {jul},
number = {4},
pages = {283--302},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Dynamic provisioning in multi-tenant service clouds}},
url = {https://doi.org/10.1007{\%}2Fs11761-012-0116-0},
volume = {6},
year = {2012}
}
@article{Kitchenham_2011,
abstract = {Context: We are strong advocates of evidence-based software engineering (EBSE) in general and systematic literature reviews (SLRs) in particular. We believe it is essential that the SLR methodology is used constructively to support software engineering research. Objective: This study aims to assess the value of mapping studies which are a form of SLR that aims to identify and categorise the available research on a broad software engineering topic. Method: We used a multi-case, participant-observer case study using five examples of studies that were based on preceding mapping studies. We also validated our results by contacting two other researchers who had undertaken studies based on preceding mapping studies and by assessing review comments related to our follow-on studies. Results: Our original case study identified 11 unique benefits that can accrue from basing research on a preceding mapping study of which only two were case specific. We also identified nine problems associated with using preceding mapping studies of which two were case specific. These results were consistent with the information obtained from the validation activities. We did not find an example of an independent research group making use of a mapping study produced by other researchers. Conclusion: Mapping studies can save time and effort for researchers and provide baselines to assist new research efforts. However, they must be of high quality in terms of completeness and rigour if they are to be a reliable basis for follow-on research. {\textcopyright} 2010 Elsevier B.V. All rights reserved.},
author = {Kitchenham, Barbara A. and Budgen, David and {Pearl Brereton}, O.},
doi = {10.1016/j.infsof.2010.12.011},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Case study,Mapping studies,Software engineering,Systematic literature review},
month = {jun},
number = {6},
pages = {638--651},
publisher = {Elsevier {\{}BV{\}}},
title = {{Using mapping studies as the basis for further research - A participant-observer case study}},
url = {https://doi.org/10.1016{\%}2Fj.infsof.2010.12.011},
volume = {53},
year = {2011}
}
@article{Duraisamy_2018,
abstract = {Cloud computing has become most trending and emerging technology in recent years and has changed the way of computation and services delivered to customer. Despite all the advantages that cloud provides, users still feel insecure to adopt cloud computing and having major concern over the data security and privacy. This is due to the data of numerous tenants are being located in the same location or database. In this environment data access by unauthorized user is possible. To overcome this issue, there should be a clear boundary for each tenant. Access control model is used to grant the right level of permission to the user in order to carry out their duties, to prevent unauthorized access and to protect assets of organizations and systems. Access control model also can prevent unauthorized user from accessing protected data, ensure authorized users can access protected data and prevent authorized users from performing illegal actions on protected data. There are many types of access control model available in the industry. However, not all the models can be applied in cloud environment due to various reasons. This paper presents an analysis of existing role based access control models. We use evaluation criteria that outlined by NIST for access control system. First, we identified a list of criteria that are suitable to apply in cloud environment specifically on data security and privacy of multi-tenant SaaS application in public cloud. Then, we analysed the existing access control models against the identified evaluation criteria. The analysis outlines the important gaps and missing elements of an access control model that can be extended into an access control model based testing.},
author = {Duraisamy, Gunavathi and Ghani, Abdul Azim Abd and Zulzalil, Hazura and Abdullah, Azizol},
doi = {10.1166/asl.2018.11122},
issn = {1936-6612},
journal = {Advanced Science Letters},
month = {mar},
number = {3},
pages = {1619--1622},
publisher = {American Scientific Publishers},
title = {{Analysis of Access Control Model for Data Security and Privacy on Multi-Tenant SaaS}},
url = {https://doi.org/10.1166{\%}2Fasl.2018.11122},
volume = {24},
year = {2018}
}
@inproceedings{Tsai_2010,
abstract = {Cloud computing often uses a multi-tenant architecture where tenants share application and system software. Request prioritization presents a challenge in this architecture. Tenant may have individual (local) prioritization requirements, and these requirements can be different for different tenants. The shared application must use a global priority scheme for requests from all the tenants. This paper proposes an effective model to prioritize service requests from multiple tenants while preserving local priorities from individual tenant requests. This paper proposes the Crystalline Mapping (CM) algorithm which maps local priorities from individual tenants to global priorities. The algorithm also maximizes revenues within the local-to-global priority mapping constraints. The performance of the model is evaluated by the total business value, the QoS measurement, and a fairness measure. The model has been evaluated using simulation based on real-world data, and the results are consistent with the mathematical model. {\textcopyright} 2010 IEEE.},
author = {Tsai, Wei Tek and Shao, Qihong and Elston, Jay},
booktitle = {Proceedings - IEEE International Conference on E-Business Engineering, ICEBE 2010},
doi = {10.1109/ICEBE.2010.38},
isbn = {9780769542270},
keywords = {Cloud computing,Multi-tenancy,Prioritization},
month = {nov},
pages = {117--124},
publisher = {IEEE},
title = {{Prioritizing service requests on cloud with multi-tenancy}},
url = {https://doi.org/10.1109{\%}2Ficebe.2010.38},
year = {2010}
}
@inproceedings{Wieringa_2009,
abstract = {Scientific evaluation papers investigate existing problem situations or validate proposed solutions with scientific means, such as by experiment or case study. There is a growing amount of literature about how to report about empirical research in software engineering, but there is still some confusion about the difference between a scientific evaluation paper and other kinds of research papers. This is related to lack of clarity about the relation between empirical research, engineering, and industrial practice. In this minitutorial we give a brief rundown on how to structure a scientific evaluation papers as a special kind of research paper, using experiment reports and case study reports as examples. We give checklists of items that a reader should be able to find in these papers, and sketch the dilemmas that writers and readers of these papers face when applying these checklists. {\textcopyright} 2009 IEEE.},
author = {Wieringa, Roel and Heerkens, Hans and Regnell, Bj{\"{o}}rn},
booktitle = {Proceedings of the IEEE International Conference on Requirements Engineering},
doi = {10.1109/RE.2009.17},
isbn = {9780769537610},
issn = {1090705X},
keywords = {Research methodology,Research reporting,Scientific evaluation papers},
pages = {361--364},
publisher = {IEEE},
title = {{How to write and read a scientific evaluation paper}},
url = {https://doi.org/10.1109{\%}2Fre.2009.17},
year = {2009}
}
@inproceedings{Etedali_2017,
abstract = {The use of cloud computing is on the rise because of the cost effectiveness in providing the same resources to different tenants. Highly customizable Software-as-a-Service (SaaS) provide high scalability and lower cost as a result of multitenant nature of its cloud applications. However, there are several challenges that make its adoption difficult. Some of the weaknesses of current cloud offerings are complex configuration, development, deployment and management. This paper, investigates the different techniques and methods such as adaptation and variation management used to address these challenges. In addition, the details about how techniques from Software Product Line Engineering and Service Oriented Architecture are applied are addressed. Therefore, the paper extends an existing framework for constraint-based configuration management for cloud applications by integrating existing feature modeling tools with a XML filtering tool -Yfilter. The objective of the integration is to automate the process to identify matched tenant-specific requirements with the SaaS cloud application feature model. The automated process results in lower manual efforts and possible errors, and as a result less complex deployment and management of the SaaS application.},
author = {Etedali, Azadeh and Lung, Chung Horng and Ajila, Samuel and Veselinovic, Igor},
booktitle = {Proceedings - International Computer Software and Applications Conference},
doi = {10.1109/COMPSAC.2017.69},
isbn = {9781538603673},
issn = {07303157},
keywords = {Cloud Computing,Feature Modeling,SPLE,Software-as-a-Service,XML Filtering,Yfilter},
month = {jul},
pages = {413--418},
publisher = {IEEE},
title = {{Automated Constraint-Based Multi-tenant SaaS Configuration Support Using XML Filtering Techniques}},
url = {https://doi.org/10.1109{\%}2Fcompsac.2017.69},
volume = {2},
year = {2017}
}
@incollection{Merkel_2015,
abstract = {Enterprises use the cloud for unlimited resource, scalability and elastic provisioning along with being able to use state of the art commodity or specialized solutions available in the cloud. The challenge of this vision is the proper and safe integration of on-premise IT-Landscapes with data and applications in the cloud. To find solutions for integration of classical and cloud environments two approaches, top-down and bottom-up, were used. In the top-down approach cloud integration patterns were specified based on scenarios. In the bottom-up approach cloud integration patterns were based on case study application requirements. Results of this paper are novel cloud integration patterns for various cloud integration scenarios.},
author = {Merkel, Danny and Santas, Filippos and Heberle, Andreas and Ploom, Tarmo},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-24072-5_14},
isbn = {9783319240718},
issn = {16113349},
keywords = {Cloud computing,Integration,Multi-cloud,Patterns,Private cloud,Public cloud,SOA,SaaS,Topology},
pages = {199--213},
publisher = {Springer International Publishing},
title = {{Cloud integration patterns}},
url = {https://doi.org/10.1007{\%}2F978-3-319-24072-5{\_}14},
volume = {9306},
year = {2015}
}
@article{Nguyen_2016,
abstract = {A customizable web service is a service that enables service consumers to dynamically determine variants of the service they receive. Provisioning customizable services helps to efficiently address functional variability in customer requirements. However, this is challenging due to: i) the complexity in deriving the right subset of service capabilities for a service variant and ii) the existence of a large number of variants and their dependencies. We propose a feature-based framework to tackle this challenge. In our framework, a feature model is used to capture functional variability in customer requirements at a high-level of abstraction and to provide customers with a much simpler way to customize an atomic service. A service engineering process is designed to facilitate the systematic identification and implementation of variability during service development, and to maintain the mapping between variabilities at the feature modeling level and the service implementation level. We define a generative middleware that supports service deployment and exploits the mapping to enable runtime service customization. A large scale case study based on the Amazon web services is used for evaluation. In addition to addressing the challenge in provisioning customizable services, our experiments show that the generative middleware helps to reduce runtime resource consumption.},
author = {Nguyen, Tuan and Colman, Alan and Han, Jun},
doi = {10.1109/TSC.2015.2405546},
issn = {19391374},
journal = {IEEE Transactions on Services Computing},
keywords = {Feature modeling,Service customization,Service middleware,Web services},
month = {jul},
number = {4},
pages = {496--510},
publisher = {Institute of Electrical and Electronics Engineers ({\{}IEEE{\}})},
title = {{A feature-based framework for developing and provisioning customizable web services}},
url = {https://doi.org/10.1109{\%}2Ftsc.2015.2405546},
volume = {9},
year = {2016}
}
@inproceedings{2011,
booktitle = {Proceedings of the 1st International Conference on Cloud Computing and Services Science},
doi = {10.5220/0003387503520361},
publisher = {{\{}SciTePress{\}} - Science and and Technology Publications},
title = {{{\{}RESOURCE{\}} {\{}MANAGEMENT{\}} {\{}OF{\}} {\{}VIRTUAL{\}} {\{}INFRASTRUCTURE{\}} {\{}FOR{\}} {\{}ON{\}}-{\{}DEMAND{\}} {\{}SAAS{\}} {\{}SERVICES{\}}}},
url = {https://doi.org/10.5220{\%}2F0003387503520361},
year = {2011}
}
@inproceedings{Kwok_2008,
abstract = {In most commercial electronic contract management applications available today, different customized code base has to be developed, deployed and operated to support each tenant. Few advanced commercial electronic contract management applications use a single code base with configuration options to support multitenants. However, a separate instance of the code base still has to be deployed and operated for each tenant even in these applications. The business model of having to support a single application instance for each tenant makes an electronic contract management application and other critical business applications out of reach for most small and medium businesses (SMBs), in particular, the very small businesses (SVBs) because of its high development and maintenance cost. Recently, a new business model of a single application instance supporting multi-tenancy based on Software as a Service (SaaS) has emerged making expensive business applications more affordable for SMBs and SVBs for multi-tenancy [1]. In this paper, we present the first of a kind multitenancy SaaS electronic contract management application. We also describe several novel methods used in the metadata, security and shared services, as well as customization and tenant extensions modules to support multi-tenancy SaaS in this application. This multi-tenancy SaaS application has shown to benefit both the application service providers as well as their tenants. This new multi-tenancy SaaS model can reduce the application hosting cost and make the application more affordable to the tenants because of its capabilities in customization and scalability while continuing to support an increasing number of tenants. It furthers benefits tenants by saving their money and time with immediate access to the latest IT innovations and infrastructure improvements on a single application code base. Most end users of tenants have found their productivities increased, the contract transaction time accelerated, contractual errors reduced in using this multi-tenancy SaaS electronic contract management application as demonstrated in several ongoing IBM pilot programs serving more than ten tenants with over 3000 end users. {\textcopyright} 2008 IEEE.},
author = {Kwok, Thomas and Nguyen, Thao and Lam, Linh},
booktitle = {Proceedings - 2008 IEEE International Conference on Services Computing, SCC 2008},
doi = {10.1109/SCC.2008.138},
isbn = {9780769532837},
month = {jul},
pages = {179--186},
publisher = {IEEE},
title = {{A software as a service with multi-tenancy support for an electronic contract management application}},
url = {https://doi.org/10.1109{\%}2Fscc.2008.138},
volume = {2},
year = {2008}
}
@article{Bueschken_2009,
abstract = {In a recent article, Fornell et al. (2006) propose that customer satisfaction is a potent driver of corporate market value of equity (MVE). Using data from ACSI from the years 1994-2007 comprising a total of 1,057 observations from 107 firms, we apply an autoregressive, distributed lag model to the data and can confirm that the influence of CS on MVE is significant, when all firms are pooled. Pooling, however, is inappropriate if it is done across heterogeneous sub-samples without addressing group-level effects. Unpooled regression of MVE on CS reveals large heterogeneity among firms with regard to the influence of CS on MVE. Hierarchical random coefficient models with partial pooling are then applied to account for firm heterogeneity, while assuming that firms are exchangeable. We find that, for the vast majority of companies, there is no significant relationship between CS and MVE. The same finding results from two different industry level models. It is concluded that the significant influence of CS on MVE as reported by Fornell et al. is a case of Simpson's paradox. Limitations of this study and directions for future research are discussed.},
author = {Bueschken, Joachim},
doi = {10.2139/ssrn.1394320},
journal = {SSRN Electronic Journal},
publisher = {Elsevier {\{}BV{\}}},
title = {{Does Improving Customer Satisfaction Really Increase the Market Value of Equity? - Revisiting the ACSI Customer Satisfaction Data}},
url = {https://doi.org/10.2139{\%}2Fssrn.1394320},
year = {2011}
}
@inproceedings{Ranchal_2010,
abstract = {Cloud computing allows the use of Internet-based services to support business processes and rental of IT-services on a utility-like basis. It offers a concentration of resources but also poses risks for data privacy. A single breach can cause significant loss. The heterogeneity of "users" represents a danger of multiple, collaborative threats. In cloud computing, entities may have multiple accounts associated with a single or multiple service providers (SPs). Sharing sensitive identity information (that is, Personally Identifiable information or PII) along with associated attributes of the same entity across services can lead to mapping of the identities to the entity, tantamount to privacy loss. Identity management (IDM) is one of the core components in cloud privacy and security and can help alleviate some of the problems associated with cloud computing. Available solutions use trusted third party (TTP) in identifying entities to SPs. The solution providers do not recommend the usage of their solutions on untrusted hosts. We propose an approach for IDM, which is independent of TTP and has the ability to use identity data on untrusted hosts. The approach is based on the use of predicates over encrypted data and multi-party computing for negotiating a use of a cloud service. It uses active bundle - which is a middleware agent that includes PII data, privacy policies, a virtual machine that enforces the policies, and has a set of protection mechanisms to protect itself. An active bundle interacts on behalf of a user to authenticate to cloud services using user's privacy policies. {\textcopyright} 2010 IEEE.},
author = {Ranchal, Rohit and Bhargava, Bharat and Othmane, Lotfi Ben and Lilien, Leszek and Kim, Anya and Kang, Myong and Linderman, Mark},
booktitle = {Proceedings of the IEEE Symposium on Reliable Distributed Systems},
doi = {10.1109/SRDS.2010.57},
isbn = {9780769542508},
issn = {10609857},
keywords = {Active bundle,Cloud computing,Computing predicates,Identity management system,Multi-party computing,Privacy,Security},
pages = {368--372},
publisher = {IEEE},
title = {{Protection of identity information in cloud computing without trusted third party}},
url = {https://doi.org/10.1109{\%}2Fsrds.2010.57},
year = {2010}
}
@inproceedings{Narasimhan,
abstract = {The Eternal system provides transparent fault tolerance for CORBA applications, without requiring modifications to the application or the ORB, and without requiring special skills of the CORBA application programmers. Eternal maintains strong replica consistency as replicas of objects perform operations, and even as they fail and are recovered. Eternal implements the new Fault Tolerant CORBA standard.},
author = {Narasimhan, P. and Moser, L. E. and Melliar-Smith, P. M.},
booktitle = {Proceedings of the Workshop on Object-Oriented Real-Time Dependable Systems (WORDS)},
doi = {10.1109/words.2001.945108},
pages = {10--17},
publisher = {{\{}IEEE{\}} Comput. Soc},
title = {{Strong replica consistency for fault-tolerant CORBA applications}},
url = {https://doi.org/10.1109{\%}2Fwords.2001.945108},
year = {2001}
}
@article{Wang_2018,
abstract = {The proliferation of cloud computing has fueled the rapid growth of multi-tenant service-based systems (SBSs), which serve multiple tenants simultaneously by composing existing services in the form of business processes. In a distributed and volatile operating environment, runtime anomalies may occur to the component services of an SBS and cause end-to-end quality violations. Engineering multi-tenant SBSs that can quickly handle runtime anomalies cost effectively has become a significant challenge. Different approaches have been proposed to formulate fault tolerance strategies for engineering SBSs. However, none of the existing approaches has sufficiently considered the service criticality based on multi-tenancy where multiple tenants share the same SBS instance with different multi-dimensional quality preferences. In this paper, we propose Criticality-based Fault Tolerance for Multi-Tenant SBSs (CFT4MTS), a novel approach that formulates cost-effective fault tolerance strategies for multi-tenant SBSs by providing redundancy for the critical component services. First, the criticality of each component service is evaluated based on its multi-dimensional quality and multiple tenants sharing the component service with differentiated quality preferences. Then, the fault tolerance problem is modelled as an Integer Programming problem to identify the optimal fault tolerance strategy. The experimental results show that, compared with three existing representative approaches, CFT4MTS can alleviate degradation in the quality of multi-tenant SBSs in a much more effective and efficient way.},
author = {Wang, Yanchun and He, Qiang and Ye, Dayong and Yang, Yun},
doi = {10.1109/TSE.2017.2681667},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Cloud computing,criticality,fault tolerance,multi-tenancy,redundancy,service-based system},
month = {mar},
number = {3},
pages = {291--307},
publisher = {Institute of Electrical and Electronics Engineers ({\{}IEEE{\}})},
title = {{Formulating Criticality-Based Cost-Effective Fault Tolerance Strategies for Multi-Tenant Service-Based Systems}},
url = {https://doi.org/10.1109{\%}2Ftse.2017.2681667},
volume = {44},
year = {2018}
}
@incollection{Kang_2010,
abstract = {In today's dynamic IT environment with increased global competition, enterprises must achieve greater business agility and decrease the TCO (Total Cost of Ownership) of their system for service. As the need for innovative software circulation process emerges, SaaS (Software as a Service) is introduced for integrating software service framework. But most of current ASP (Application Service Provider) Players have difficulties to migrate their systems to SaaS Platform for the lack of maturity model and process. In this paper, we have surveyed several cases of SaaS service, and we identified the common key functions of SaaS service. We contend that the practical maturity model is a key enabler for achieving migration to innovative SaaS service platform. To assist in building our SaaS maturity model, we defined two important axes of maturity model and introduced the detailed components of each phase with the reference architecture which contains the essential activities according to the common functions of SaaS service. {\textcopyright} Springer-Verlag Berlin Heidelberg 2010.},
author = {Kang, Seungseok and Myung, Jaeseok and Yeon, Jongheum and Ha, Seong Wook and Cho, Taehyung and Chung, Ji Man and Lee, Sang Goo},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-12098-5_28},
isbn = {3642120970},
issn = {03029743},
keywords = {ASP,Maturity model,SaaS service,Software business},
number = {PART 2},
pages = {337--346},
publisher = {Springer Berlin Heidelberg},
title = {{A general maturity model and reference architecture for SaaS service}},
url = {https://doi.org/10.1007{\%}2F978-3-642-12098-5{\_}28},
volume = {5982 LNCS},
year = {2010}
}
@article{Xu_2012,
abstract = {Cloud computing is changing the way industries and enterprises do their businesses in that dynamically scalable and virtualized resources are provided as a service over the Internet. This model creates a brand new opportunity for enterprises. In this paper, some of the essential features of cloud computing are briefly discussed with regard to the end-users, enterprises that use the cloud as a platform, and cloud providers themselves. Cloud computing is emerging as one of the major enablers for the manufacturing industry; it can transform the traditional manufacturing business model, help it to align product innovation with business strategy, and create intelligent factory networks that encourage effective collaboration. Two types of cloud computing adoptions in the manufacturing sector have been suggested, manufacturing with direct adoption of cloud computing technologies and cloud manufacturing - the manufacturing version of cloud computing. Cloud computing has been in some of key areas of manufacturing such as IT, pay-as-you-go business models, production scaling up and down per demand, and flexibility in deploying and customizing solutions. In cloud manufacturing, distributed resources are encapsulated into cloud services and managed in a centralized way. Clients can use cloud services according to their requirements. Cloud users can request services ranging from product design, manufacturing, testing, management, and all other stages of a product life cycle. {\textcopyright} 2011 Elsevier Ltd.},
author = {Xu, Xun},
doi = {10.1016/j.rcim.2011.07.002},
issn = {07365845},
journal = {Robotics and Computer-Integrated Manufacturing},
keywords = {Cloud computing,Cloud manufacturing,Service-oriented business model},
number = {1},
pages = {75--86},
publisher = {Elsevier {\{}BV{\}}},
title = {{From cloud computing to cloud manufacturing}},
url = {https://doi.org/10.1016{\%}2Fj.rcim.2011.07.002},
volume = {28},
year = {2012}
}
@inproceedings{Jiang_2010,
abstract = {In today' intensely competitive environment, traditional application systems such as ERP, lacks the autonomy and flexibility required by dynamic market. Given that, more and more companies are offering their software by Software as a Service (SaaS) application platform. Most SaaS platforms are implemented by traditional J2EE programming. This paper introduces a new well-designed SaaS application platform based on model driven approach which provides a convenient solution to realize customization and integration of platform. In this paper, we first introduce the overall framework, next present a series of model engines, model templates, and model description files, then describe how they work together to realize the multitenant aware, service customization and service integration over the well-designed SaaS platform, and finally concludes by an example for menu to illustrate our approach. {\textcopyright} 2010 IEEE.},
author = {Jiang, Xiaoyan and Zhang, Yong and Liu, Shijun},
booktitle = {Proceedings - 9th International Conference on Grid and Cloud Computing, GCC 2010},
doi = {10.1109/GCC.2010.62},
isbn = {9780769543130},
keywords = {Customization,Model,Model enigne,Model-driven,SaaS},
month = {nov},
pages = {276--281},
publisher = {IEEE},
title = {{A well-designed SaaS application platform based on model-driven approach}},
url = {https://doi.org/10.1109{\%}2Fgcc.2010.62},
year = {2010}
}
@inproceedings{Yusoh_2014,
abstract = {A Software-as-a-Service or SaaS can be delivered in a composite form, consisting of a set of application and data components that work together to deliver higher-level functional software. Components in a composite SaaS may need to be scaled - replicated or deleted, to accommodate the user's load. It may not be necessary to replicate all components of the SaaS, as some components can be shared by other instances. On the other hand, when the load is low, some of the instances may need to be deleted to avoid resource underutilisation. Thus, it is important to determine which components are to be scaled such that the performance of the SaaS is still maintained. Extensive research on the SaaS resource management in Cloud has not yet addressed the challenges of scaling process for composite SaaS. Therefore, a hybrid genetic algorithm is proposed in which it utilises the problem's knowledge and explores the best combination of scaling plan for the components. Experimental results demonstrate that the proposed algorithm outperforms existing heuristic-based solutions.},
author = {Yusoh, Zeratul Izzah Mohd and Tang, Maolin},
booktitle = {Proceedings of the 2014 IEEE Congress on Evolutionary Computation, CEC 2014},
doi = {10.1109/CEC.2014.6900614},
isbn = {9781479914883},
keywords = {Cloud Computing,Clustering,Composite SaaS,Grouping Genetic Algorithm},
month = {jul},
pages = {1609--1616},
publisher = {IEEE},
title = {{Composite SaaS scaling in Cloud computing using a hybrid genetic algorithm}},
url = {https://doi.org/10.1109{\%}2Fcec.2014.6900614},
year = {2014}
}
@inproceedings{Hu_2013,
abstract = {With the incredible popularity of cloud computing, the adoption of mass customization (MC) is significant for building a cloud computing system that could provide services provisioning in a manner of multi-tenancy. Because of lack of a standard architecture that supports MC development for cloud services, the existing metadata or model driven approaches have insufficient abilities to realize personalized requirements with mass production when applied to product development in large-scale enterprises. Aiming at these problems, this paper presents a novel MC-based development approach for enterprise-level business cloud services based on the specification of the Cloud Computing Reference Architecture (CCRA), and shares the practice about how the approach is applied to building Kingdee K/3 Collaboration Development Cloud (CDC). Successful practice has proved that by adopting our MC development approach, we can develop platforms and tools on the cloud at a low cost and more effectively. {\textcopyright} 2013 IEEE.},
author = {Hu, Bo and Ma, Yutao and Zhang, Liang Jie and Xing, Chunxiao and Zou, Jun and Xu, Ping},
booktitle = {Proceedings - IEEE 10th International Conference on Services Computing, SCC 2013},
doi = {10.1109/SCC.2013.113},
isbn = {9780768550268},
keywords = {cloud computing,collaborative development,domain modeling,mass customization,reference architecture},
month = {jun},
pages = {705--712},
publisher = {IEEE},
title = {{A CCRA based mass customization development for cloud services}},
url = {https://doi.org/10.1109{\%}2Fscc.2013.113},
year = {2013}
}
@inproceedings{Jamshidi_2014,
abstract = {Cloud elasticity provides a software system with the ability to maintain optimal user experience by automatically acquiring and releasing resources, while paying only for what has been consumed. The mechanism for automatically adding or removing resources on the fly is referred to as auto-scaling. The state-of-thepractice with respect to auto-scaling involves specifying thresholdbased rules to implement elasticity policies for cloud-based applications. However, there are several shortcomings regarding this approach. Firstly, the elasticity rules must be specified precisely by quantitative values, which requires deep knowledge and expertise. Furthermore, existing approaches do not explicitly deal with uncertainty in cloud-based software, where noise and unexpected events are common. This paper exploits fuzzy logic to enable qualitative specification of elasticity rules for cloud-based software. In addition, this paper discusses a control theoretical approach using type-2 fuzzy logic systems to reason about elasticity under uncertainties. We conduct several experiments to demonstrate that cloud-based software enhanced with such elasticity controller can robustly handle unexpected spikes in the workload and provide acceptable user experience. This translates into increased profit for the cloud application owner.},
author = {Jamshidi, Pooyan and Ahmad, Aakash and Pahl, Claus},
booktitle = {9th International Symposium on Software Engineering for Adaptive and Self-Managing Systems, SEAMS 2014 - Proceedings},
doi = {10.1145/2593929.2593940},
isbn = {9781450328647},
keywords = {Auto-scaling,Cloud computing,Elasticity,Uncertainty},
pages = {95--104},
publisher = {{\{}ACM{\}} Press},
title = {{Autonomic resource provisioning for cloud-based software}},
url = {https://doi.org/10.1145{\%}2F2593929.2593940},
year = {2014}
}
@inproceedings{Lee_2012,
abstract = {Software as a Service (SaaS) is a software delivery model in which software resources are accessed remotely by users. Enterprises find SaaS attractive because of its low cost. SaaS requires sharing of application servers among multiple tenants for low operational costs. Besides the sharing of application servers, customizations are needed to meet requirements of each tenant. Supporting various levels of configuration and customization is desirable for SaaS frameworks. This paper describes a multi-tenant web application framework for SaaS. The proposed framework supports runtime customizations of user interfaces and business logics by use of file-level namespaces, inheritance, and polymorphism. It supports various client-side web application technologies. {\textcopyright} 2012 IEEE.},
author = {Lee, Wonjae and Choi, Min},
booktitle = {Proceedings - 2012 IEEE 5th International Conference on Cloud Computing, CLOUD 2012},
doi = {10.1109/CLOUD.2012.27},
isbn = {9780769547558},
keywords = {Cloud Computing,Multi-tenancy,Platform as a Service (PaaS),Software as a Service (SaaS)},
month = {jun},
pages = {970--971},
publisher = {IEEE},
title = {{A multi-tenant web application framework for SaaS}},
url = {https://doi.org/10.1109{\%}2Fcloud.2012.27},
year = {2012}
}
@article{Rai_2015,
abstract = {Today, most of the organizations trust on their age old legacy applications, to support their business-critical systems. However, there are several critical concerns, as maintainability and scalability issues, associated with the legacy system. In this background, cloud services offer a more agile and cost effective platform, to support business applications and IT infrastructure. As the adoption of cloud services has been increasing recently and so has been the academic research in cloud migration. However, there is a genuine need of secondary study to further strengthen this research. The primary objective of this paper is to scientifically and systematically identify, categorize and compare the existing research work in the area of legacy to cloud migration. The paper has also endeavored to consolidate the research on Security issues, which is prime factor hindering the adoption of cloud through classifying the studies on secure cloud migration. SLR (Systematic Literature Review) of thirty selected papers, published from 2009 to 2014 was conducted to properly understand the nuances of the security framework. To categorize the selected studies, authors have proposed a conceptual model for cloud migration which has resulted in a resource base of existing solutions for cloud migration. This study concludes that cloud migration research is in seminal stage but simultaneously it is also evolving and maturing, with increasing participation from academics and industry alike. The paper also identifies the need for a secure migration model, which can fortify organization's trust into cloud migration and facilitate necessary tool support to automate the migration process.},
author = {Rai, Rashmi and Sahoo, Gadadhar and Mehfuz, Shabana},
doi = {10.1186/s40064-015-0962-2},
issn = {21931801},
journal = {SpringerPlus},
keywords = {Cloud migration,Legacy-to-cloud migration,Secure migration,Systematic literature review},
number = {1},
pages = {1--12},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Exploring the factors influencing the cloud computing adoption: a systematic study on cloud migration}},
url = {https://doi.org/10.1186{\%}2Fs40064-015-0962-2},
volume = {4},
year = {2015}
}
@inproceedings{Heimerl_2014,
abstract = {Word clouds have emerged as a straightforward and visually appealing visualization method for text. They are used in various contexts as a means to provide an overview by distilling text down to those words that appear with highest frequency. Typically, this is done in a static way as pure text summarization. We think, however, that there is a larger potential to this simple yet powerful visualization paradigm in text analytics. In this work, we explore the usefulness of word clouds for general text analysis tasks. We developed a prototypical system called the Word Cloud Explorer that relies entirely on word clouds as a visualization method. It equips them with advanced natural language processing, sophisticated interaction techniques, and context information. We show how this approach can be effectively used to solve text analysis tasks and evaluate it in a qualitative user study. {\textcopyright} 2014 IEEE.},
author = {Heimerl, Florian and Lohmann, Steffen and Lange, Simon and Ertl, Thomas},
booktitle = {Proceedings of the Annual Hawaii International Conference on System Sciences},
doi = {10.1109/HICSS.2014.231},
isbn = {9781479925049},
issn = {15301605},
month = {jan},
pages = {1833--1842},
publisher = {IEEE},
title = {{Word cloud explorer: Text analytics based on word clouds}},
url = {https://doi.org/10.1109{\%}2Fhicss.2014.231},
year = {2014}
}
@article{Qasem_Ali_2018,
author = {{Qasem Ali}, Abdulrazzaq and {Md Sultan}, Abu Bakar and {Abd Ghani}, Abdul Azim and Zulzalil, Hazura},
doi = {10.20967/jcscm.2018.03.003},
journal = {Journal of Computer Science {\&} Computational Mathematics},
pages = {43--48},
publisher = {Science and Knowledge Research Society},
title = {{The Five Ws Taxonomy on Customization of Software as a Service Applications}},
url = {https://doi.org/10.20967{\%}2Fjcscm.2018.03.003},
year = {2018}
}
@book{Shao_2003,
author = {Bacchetti, Peter and Leung, Jacqueline M.},
booktitle = {Anesthesiology},
doi = {10.1097/00000542-200210000-00050},
issn = {00033022},
month = {mar},
number = {4},
pages = {1028--1029},
pmid = {12357184},
publisher = {{\{}CRC{\}} Press},
title = {{Sample size calculations in clinical research [7]}},
url = {https://doi.org/10.1201{\%}2F9780203911341},
volume = {97},
year = {2002}
}
@article{Chaumun_2002,
abstract = {Growing maintenance costs have become a major concern for developers and users of software systems. Changeability is an important aspect of maintainability, especially in environments where software changes are frequently required. In this work, the assumption that high-level design has an influence on maintainability is carried over to changeability and investigated for that quality characteristics. The approach taken to assess the changeability of an object-oriented (OO) system is to compute the impact of changes made to classes of the system. A change impact model is defined at the conceptual level and mapped on the C++ language. In order to experiment the model as a changeability indicator on large industrial software systems, an experiment involving the impact of one change is carried out on a telecommunications system. The results suggest that the software can easily absorb that kind of change and that well chosen conventional OO design metrics can be used as indicators of changeability. {\textcopyright} 2002 Elsevier Science B.V. All rights reserved.},
author = {Chaumun, M. Ajmal and Kabaili, Hind and Keller, Rudolf K. and Lustman, Fran{\c{c}}ois},
doi = {10.1016/S0167-6423(02)00058-8},
issn = {01676423},
journal = {Science of Computer Programming},
keywords = {C++ language,Change impact,Design,Maintenance,Software engineering,Software metrics,Software quality},
month = {nov},
number = {2-3},
pages = {155--174},
publisher = {Elsevier {\{}BV{\}}},
title = {{A change impact model for changeability assessment in object-oriented software systems}},
url = {https://doi.org/10.1016{\%}2Fs0167-6423{\%}2802{\%}2900058-8},
volume = {45},
year = {2002}
}
@inproceedings{Felizardo_2010,
abstract = {Systematic mapping provides an overview of a research area to assess the quantity of evidence existing on a topic of interest. In spite of its relevance, the establishment of consistent categories and classification of primary studies in these categories are manually conducted. Objective: We propose an approach, named SM-VTM (Systematic Mapping based on Visual Text Mining), to support categorization and classification stages in the systematic mapping using Visual Text Mining (VTM), aiming at reducing time and effort required in this process. Method: We established SM-VTM, selected a VTM tool and conducted a case study comparing results of two systematic mappings: one performed manually and another using our approach. Results: The results of both systematic mappings were very similar, showing the viability of SM-VTM. Furthermore, since our approach was applied using a tool, reduction of time and effort can be achieved. Conclusions: The application of VTM seems to be very relevant in the context of systematic mapping.},
author = {Felizardo, Katia Romero and Nakagawa, Elisa Yumi and Feitosa, Daniel and Minghim, Rosane and Maldonado, Jos{\'{e}} Carlos},
doi = {10.14236/ewic/ease2010.5},
publisher = {{\{}BCS{\}} Learning {\&} Development},
title = {{An Approach Based on Visual Text Mining to Support Categorization and Classification in the Systematic Mapping}},
url = {https://doi.org/10.14236{\%}2Fewic{\%}2Fease2010.5},
year = {2010}
}
@inproceedings{Scheibler_2008,
abstract = {Enterprise Application Integration (EAI) problems are one of the major challenges IT departments are facing today. As enterprises merge, split up, or grow, existing legacy systems from different vendors implemented in different programming languages and running in different environments as well as roll-your-own applications have to be integrated. Furthermore, companies are starting to shift more and more on-premise software to software run in aSoftware as a Service (SaaS) business model. Outsourcing software to external and internal SaaS providers introduces new integration challenges, namely those of the integration of standard SaaS software with on-premise systems or other systems run at different SaaS providers which is a problem not addressed by SaaS platforms today. Recurring integration problems can be described by means of Enterprise Application Integration patterns. Those are used as nuggets of advice to solve complex integration problems. In this paper, we introduce executable EAI patterns offered in a SaaS business model to allow companies to focus on the integration without the need for the setup of complex integration infrastructures. Users will be guided by workflows customizing configurable EAI patterns to easily create integration solutions. We therefore propose EAI as a Service as a flexible, customizable, inexpensive way to tackle EAI problems both of on-premise systems but also of systems run in a SaaS business model. {\textcopyright} 2008 IEEE.},
author = {Scheibler, Thorsten and Mietzner, Ralph and Leymann, Frank},
booktitle = {Proceedings - 12th IEEE International Enterprise Distributed Object Computing Conference, EDOC 2008},
doi = {10.1109/EDOC.2008.21},
isbn = {9780769533735},
pages = {107--116},
publisher = {IEEE},
title = {{EAI as a service - Combining the power of executable EAI patterns and SaaS}},
url = {https://doi.org/10.1109{\%}2Fedoc.2008.21},
year = {2008}
}
@inproceedings{Tsai_2010,
abstract = {Software as a Service (SaaS) with multi-tenancy architecture is a popular approach. To support a significant number of tenants, SaaS applications need be customizable to fulfill the various functional and quality requirements of individual tenants. This paper presents a unified and innovative multi-layered customization framework, to support and manage the variability of SaaS applications and tenants-specific requirements. Ontology is used to derive customization and deployment information for tenants cross layers. This framework also has an intelligent recommendation engine to support new tenants to deploy using information from existing deployed SaaS applications. A case study in mortgage application is used to demonstrate the proposed model.},
author = {Tsai, Wei Tek and Shao, Qihong and Li, Wu},
booktitle = {Proceedings - 2010 IEEE International Conference on Service-Oriented Computing and Applications, SOCA 2010},
doi = {10.1109/SOCA.2010.5707139},
isbn = {9781424498017},
publisher = {IEEE},
title = {{OIC: Ontology-based intelligent customization framework for SaaS}},
url = {https://doi.org/10.1109{\%}2Fsoca.2010.5707139},
year = {2010}
}
@article{Luo_2004,
abstract = {A key issue in enterprise resource planning (ERP) implementation is how to find a match between the ERP system and an organization's business processes by appropriately customizing both the system and the organization. In this paper, we advance a framework for supporting management decision-making about customization choices and the capabilities required to accomplish them. In this framework, we identify various customization possibilities for business processes as well as ERP systems. We also identify technical and process change capabilities required for system and process customization. Combining customization options with change capabilities, we present a useful way for managers to identify feasible customization options for their particular organization. Such a framework also helps managers to recognize the gap between desired customization options and change capabilities. case study is used to illustrate the application of the framework. {\textcopyright} 2004 IEEE.},
author = {Luo, Wenhong and Strong, Diane M.},
doi = {10.1109/TEM.2004.830862},
issn = {00189391},
journal = {IEEE Transactions on Engineering Management},
number = {3},
pages = {322--333},
publisher = {Institute of Electrical and Electronics Engineers ({\{}IEEE{\}})},
title = {{A framework for evaluating ERP implementation choices}},
url = {https://doi.org/10.1109{\%}2Ftem.2004.830862},
volume = {51},
year = {2004}
}
@incollection{Baur_2014,
abstract = {With a shift from the purchase of a product to the delivery of a service, cloud computing has revolutionized the software industry. Its cost structure has changed with the introduction of Software as a Service (SaaS), resulting in decreasing variable costs and necessary amendments to the software vendors' pricing models. In order to justify the gap between the software's price and the incremental cost of adding a new customer, it is essential for the vendor to focus on the added value for the client. This shift from cost-to value-based pricing models has so far not been thoroughly studied. Through literature review and expert interviews, a conceptual model for customer-centric SaaS pricing, especially Business Intelligence {\&} Business Analytics tools, has been developed. The model has then been initially validated by discussions with the top five software players in this realm and builds a strong basis for further theoretical inquiry and practical application.},
author = {Baur, Aaron W. and Genova, Antony C. and B{\"{u}}hler, Julian and Bick, Markus},
booktitle = {IFIP Advances in Information and Communication Technology},
doi = {10.1007/978-3-662-45526-5_1},
isbn = {9783662455258},
issn = {18684238},
keywords = {Business intelligence,Cloud computing,E-Business models,Pricing,SaaS,Software},
pages = {1--13},
publisher = {Springer Berlin Heidelberg},
title = {{Customer is king? A framework to shift from cost-to value-based pricing in software as a service: the case of business intelligence software}},
url = {https://doi.org/10.1007{\%}2F978-3-662-45526-5{\_}1},
volume = {445},
year = {2014}
}
@article{Dimmock_2020,
author = {Dimmock, Ryan L and Wang, Xuyiling and Fu, Yibin and Haj, Alicia J El and Yang, Ying},
doi = {10.21926/rpm.2001005},
journal = {Recent Progress in Materials},
number = {1},
pages = {1--31},
publisher = {{\{}LIDSEN{\}} Publishing Inc},
title = {{Biomedical Applications of Wrinkling Polymers}},
url = {https://doi.org/10.21926{\%}2Frpm.2001005},
volume = {2},
year = {2020}
}
@book{Kitchenham_2015,
abstract = {In the decade since the idea of adapting the evidence-based paradigm for software engineering was first proposed, it has become a major tool of empirical software engineering. Evidence-Based Software Engineering and Systematic Reviews provides a clear introduction to the use of an evidence-based model for software engineering research and practice. The book explains the roles of primary studies (experiments, surveys, case studies) as elements of an over-arching evidence model, rather than as disjointed elements in the empirical spectrum. Supplying readers with a clear understanding of empirical software engineering best practices, it provides up-to-date guidance on how to conduct secondary studies in software engineeringreplacing the existing 2004 and 2007 technical reports. The book is divided into three parts. The first part discusses the nature of evidence and the evidence-based practices centered on a systematic review, both in general and as applying to software engineering. The second part examines the different elements that provide inputs to a systematic review (usually considered as forming a secondary study), especially the main forms of primary empirical study currently used in software engineering. The final part provides practical guidance on how to conduct systematic reviews (the guidelines), drawing together accumulated experiences to guide researchers and students in planning and conducting their own studies. The book includes an extensive glossary and an appendix that provides a catalogue of reviews that may be useful for practice and teaching.},
author = {Kitchenham, Barbara Ann and Budgen, David and Brereton, Pearl},
booktitle = {Evidence-Based Software Engineering and Systematic Reviews},
doi = {10.1201/b19467},
month = {nov},
publisher = {Chapman and Hall/{\{}CRC{\}}},
title = {{Evidence-Based Software Engineering and Systematic Reviews}},
url = {https://doi.org/10.1201{\%}2Fb19467},
year = {2015}
}
@article{Smith_2004,
abstract = {Since the late 1990s, "application service providers" (ASPs) have offered telecommunication-based application services. ASP use can be considered a type of IS outsourcing as well as the creation of an inter-organizational system, such as is created for electronic data interchange (EDI). We developed a theory of ASP adoption and use from the client's perspective based on analysis of primary and secondary data on ASP use and analysis of literature on IS outsourcing and EDI. We present a model and highlight similarities and differences between conventional IS outsourcing, ASP use, and EDI. {\textcopyright} 2003 Elsevier B.V. All rights reserved.},
author = {Smith, Michael Alan and Kumar, Ram L.},
doi = {10.1016/j.im.2003.08.019},
issn = {03787206},
journal = {Information and Management},
keywords = {Application service providers,Application service provision,EDI,Grounded theory,IS outsourcing,IT outsourcing},
month = {nov},
number = {8},
pages = {977--1002},
publisher = {Elsevier {\{}BV{\}}},
title = {{A theory of application service provider (ASP) use from a client perspective}},
url = {https://doi.org/10.1016{\%}2Fj.im.2003.08.019},
volume = {41},
year = {2004}
}
@incollection{Strauch_2013,
abstract = {Offering applications as a service in the Cloud builds on the notion of application multi-tenancy. Multi-tenancy, the sharing of application instances and their underlying resources between users from different organizational domains, allows service providers to maximize resource utilization and reduce servicing costs per user. Realizing application multi-tenancy however requires suitable enabling mechanisms offered by their supporting middleware. Furthermore, the middleware itself can be multi-tenant in a similar fashion. In this work we focus on enabling multi-tenancy for one of the most important components in service-oriented middleware, the Enterprise Service Bus (ESB). In particular, we discuss the prototype realization of a multi-tenant aware ESB, using an open source solution as the basis. We then evaluate the performance of our proposed solution by an ESB-specific benchmark that we extended for multi-tenancy purposes. {\textcopyright} 2013 Springer-Verlag.},
author = {Strauch, Steve and Andrikopoulos, Vasilios and {G{\'{o}}mez S{\'{a}}ez}, Santiago and Leymann, Frank},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-40651-5_7},
isbn = {9783642406508},
issn = {03029743},
keywords = {ESB benchmarking,Enterprise Service Bus (ESB),JBI specification,Multi-tenancy,Platform as a Service},
pages = {79--93},
publisher = {Springer Berlin Heidelberg},
title = {{Implementation and evaluation of a multi-tenant open-source ESB}},
url = {https://doi.org/10.1007{\%}2F978-3-642-40651-5{\_}7},
volume = {8135 LNCS},
year = {2013}
}
@inproceedings{Ermakova_2013,
abstract = {The accelerated adoption of cloud computing among enterprises is due to the multiple benefits the technology provides, one of them the simplification of inter-organizational information sharing, which is of utmost importance in healthcare. Nevertheless, moving sensitive health records to the cloud still implies severe security and privacy risks. With this background, we present a novel secure architecture for sharing electronic health records in a cloud environment. We first conducted a systematic literature review and interviews with different experts from the German healthcare industry that allowed us to derive real-world processes and corresponding security and privacy requirements. Based on these results, we designed our multi-provider cloud architecture that satisfies many of the requirements by providing increased availability, confidentiality and integrity of the medical records stored in the cloud. This architecture features secret sharing as an important measure to distribute health records as fragments to different cloud services, which can provide higher redundancy and additional security and privacy protection in the case of key compromise, broken encryption algorithms or their insecure implementation. Finally, we evaluate and select a secret-sharing algorithm for our multi-cloud architecture. We implemented both Shamir's secret-sharing scheme and Rabin's information dispersal algorithm and performed several experiments measuring the execution time. Our results indicate that an adoption of Rabin's algorithm would create a low overhead, giving strong indicators to the feasibility of our approach. {\textcopyright} 2013 IEEE.},
author = {Ermakova, Tatiana and Fabian, Benjamin},
booktitle = {Proceedings - 2013 IEEE International Conference on Business Informatics, IEEE CBI 2013},
doi = {10.1109/CBI.2013.22},
keywords = {Cloud computing,Electronic health record,Secret-sharing scheme,Security},
month = {jul},
pages = {93--100},
publisher = {IEEE},
title = {{Secret sharing for health data in multi-provider clouds}},
url = {https://doi.org/10.1109{\%}2Fcbi.2013.22},
year = {2013}
}
@inproceedings{Nam_2014,
abstract = {The principal benefit of Software-as-a-Service (SaaS) development is multi-tenancy service. In fact, even if SaaS users realize their goals for use of multi-tenancy-reducing costs and sharing resources-there is still another difficult issue to be addressed: how to meet the varied requirements of a large number of tenants' within a single maintenance framework. In this paper, we propose a multi-tenancy meta-model framework, designed to support different services for multiple tenants. We also present an ontology model, based on our meta-model, with its interchange methods between the two model types. We also describe the framework for our prototype through two scenarios that illustrate the meta-model feasibility. We explain the realizability of our approaches by adding individual RDF(Resource Description Framework) examples that come from the two scenarios.},
author = {Nam, Taewoo and Yeom, Keunhyuk},
booktitle = {Proceedings - 2014 International Conference on Future Internet of Things and Cloud, FiCloud 2014},
doi = {10.1109/FiCloud.2014.32},
isbn = {9781479943586},
keywords = {Cloud Computing,Framework,Meta-model,Multi-tenancy,Ontology Model,SaaS},
pages = {146--151},
publisher = {IEEE},
title = {{Ontology model to support multi-tenancy in software as a service environment}},
url = {https://doi.org/10.1109{\%}2Fficloud.2014.32},
year = {2014}
}
@incollection{Mietzner_2009,
abstract = {The common overarching goal of service bus and Grid middleware is "virtualization" - virtualization of business functions and virtualization of resources, respectively. By combining both capabilities a new infrastructure called "Business Grid" results. This infrastructure meets the requirements of both business applications and scientific computations in a unified manner and in particular those that are not addressed by the middleware infrastructures in each of the fields. Furthermore, it is the basis for enacting new trends like Software as a Service or Cloud computing. In this paper the overall architecture of the Business Grid is outlined. The Business Grid applications are described and the need for their customizability and adaptability is advocated. Requirements on the Business Grid like concurrency, multi-tenancy and scalability are addressed. The concept of "provisioning flows" and other mechanisms to enable scalability as required by a high number of concurrent users are outlined. {\textcopyright} 2009 Springer.},
author = {Mietzner, Ralph and Karastoyanova, Dimka and Leymann, Frank},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-00899-3_8},
isbn = {3642008984},
issn = {03029743},
pages = {136--151},
publisher = {Springer Berlin Heidelberg},
title = {{Business Grid: Combining web services and the Grid}},
url = {https://doi.org/10.1007{\%}2F978-3-642-00899-3{\_}8},
volume = {5460 LNCS},
year = {2009}
}
@inproceedings{Domingo_2010,
abstract = {Cloud Computing is evolving from a mere "storage" technology to a new vehicle for Business Information Systems (BIS) to manage, organize and provide added-value strategies to current business models. However, the underlying infrastructure for Software-as-a-Service (SaaS) to become a new platform for trading partners and transactions must rely on intelligent, flexible, context-aware Multi-Tenant Architectures. In this paper, we present Cloudio, a Cloud Computing-based metadata-powered Multi-Tenant Architecture, backed with a proof-of-concept J2EE implementation. {\textcopyright} 2010 IEEE.},
author = {Domingo, Enrique Jim{\'{e}}nez and Ni{\~{n}}o, Javier Torres and Lemos, Angel Lagares and Lemos, Miguel Lagares and Palacios, Ricardo Colomo and Berb{\'{i}}s, Juan Miguel G{\'{o}}mez},
booktitle = {Proceedings - 2010 IEEE 3rd International Conference on Cloud Computing, CLOUD 2010},
doi = {10.1109/CLOUD.2010.88},
isbn = {9780769541303},
keywords = {Architecture,Business,Cloud,Multi-tenancy},
month = {jul},
pages = {532--533},
publisher = {IEEE},
title = {{CLOUDIO: A Cloud Computing-oriented Multi-Tenant Architecture for Business Information Systems}},
url = {https://doi.org/10.1109{\%}2Fcloud.2010.88},
year = {2010}
}
@inproceedings{Zhao_2014,
abstract = {E-commerce has been one critical component of information society now; however credit is becoming a bottleneck for its further development. Therefore Shanghai is building a third-party e-commerce credit evaluation platform. The platform will be integrated with many external systems to collect massive credit-related data, do scientific evaluation and provide users with personalized credit services. In order to deal with mass data and provide personalized services to tenants of the platform, a cloud computing model of Shanghai e-commerce credit evaluation platform is designed in this paper. In PaaS layer, we propose a mass data processing technology based on the XML metadata specification; in SaaS layer, we propose a mixed model of data storage and a model of areas-layered tenant customization. Experiments show that these technologies and models can improve the data processing efficiency and resource utilization greatly.},
author = {Zhao, Shixiong and Zhang, Yuchen and Shen, Beijun and Shen, Xin and Chen, Rongbin},
booktitle = {PIC 2014 - Proceedings of 2014 IEEE International Conference on Progress in Informatics and Computing},
doi = {10.1109/PIC.2014.6972382},
isbn = {9781479920334},
keywords = {cloud computing,e-commerce,mass data,multi-tenant},
pages = {481--485},
publisher = {IEEE},
title = {{Mass data processing and personalized services in Shanghai e-commerce credit evaluation platform}},
url = {https://doi.org/10.1109{\%}2Fpic.2014.6972382},
year = {2014}
}
@incollection{Chana_2013,
abstract = {This book presents the latest research on Software Engineering Frameworks for the Cloud Computing Paradigm, drawn from an international selection of researchers and practitioners. The book offers both a discussion of relevant software engineering approaches and practical guidance on enterprise-wide software deployment in the cloud environment, together with real-world case studies. Features: presents the state of the art in software engineering approaches for developing cloud-suitable applications; discusses the impact of the cloud computing paradigm on software engineering; offers guidance and best practices for students and practitioners; examines the stages of the software development lifecycle, with a focus on the requirements engineering and testing of cloud-based applications; reviews the efficiency and performance of cloud-based applications; explores feature-driven and cloud-aided software design; provides relevant theoretical frameworks, practical approaches and future research directions.},
author = {Chana, Inderveer and Chawla, Priyanka},
booktitle = {Computer Communications and Networks},
doi = {10.1007/978-1-4471-5031-2_7},
pages = {145--164},
publisher = {Springer London},
title = {{Testing Perspectives for Cloud-Based Applications}},
url = {https://doi.org/10.1007{\%}2F978-1-4471-5031-2{\_}7},
year = {2013}
}
@inproceedings{Gey_2015,
abstract = {Applying application-level multi-tenancy in Software-as-a-Service (SaaS) offerings yields a number of compelling benefits: sharing a single instance of the application between large numbers of customer organizations increases cost efficiency and allows the SaaS provider to attain true economies-of-scale benefits. There is however a main downside to this: increased sharing of resources causes the SaaS application to be very difficult to modify after initial development and deployment without affecting service continuity: any change potentially affects the service levels promised to all enrolled tenant organizations and their end users. This rigidity is a key impediment as now the SaaS provider must evolve and maintain the SaaS offering at run time, on a gradual, per-tenant basis. This in turn causes a reality of multiple co-existing versions of individual components and as such introduces substantial management complexity. To address these challenges, this paper motivates and defines key requirements that allows per-tenant, SLA-aware and gradual upgrades in the context of multi-tenant SaaS applications. In addition, we define an approach that allows the involved stakeholders (tenants, SaaS operators, SaaS developers, etc.) to customize the dynamic enactment of upgrades, and provide a number of alternative software upgrade strategies that represent different service quality trade-offs.},
author = {Gey, Fatih and Landuyt, Dimitri Van and Joosen, Wouter and Jonckers, Viviane},
booktitle = {ICSE Workshop on Principles of Engineering Service Oriented Systems},
doi = {10.1109/PESOS.2015.10},
isbn = {9781479919345},
issn = {2156793X},
pages = {10--16},
publisher = {IEEE},
title = {{Continuous evolution of multi-tenant SaaS applications: A customizable dynamic adaptation approach}},
url = {https://doi.org/10.1109{\%}2Fpesos.2015.10},
volume = {2015-July},
year = {2015}
}
@article{Klenner_2013,
abstract = {In this paper, we examine a markets' readiness for potential disruptive innovations based on past and current conditions. For this purpose, we developed a theoretical framework to evaluate the "disruptive susceptibility" of value networks. Using the construct of disruptive susceptibility, we assess the potential market entry of new companies as sources of disruptive innovations and the market utilization of these innovations. We derived theoretical propositions from existing literature in the field of disruptive innovations with a focus on an ex ante analysis. Furthermore, we applied this preliminary theoretical framework using an in-depth and longitudinal case-study of the amateur photo camera market in Germany to analyze the propositions for disruptive susceptibility on a past disruptive innovation for consistency. Based on the insights of the case study, we refined our theoretical framework. Finally, the refined framework was used from an ex ante perspective to analyze the German electric car market. The results of both case studies indicate that the disruptive susceptibility of established value networks is closely related to the market and organizational maturity. Furthermore, we propose that the overshooting factor of customers might be a conditional but not an imperative factor influencing disruptive susceptibility. Our modified framework would indicate that if the overshooting of customers and other special market conditions are present simultaneously, then the disruptive susceptibility can reach a critical level, and potential disruptive innovations can be successfully introduced into an established value network. Moreover, in our framework, a high degree of disruptive susceptibility would suggest that a low-end market must be present before a disruptive innovation can successfully enter a market. Finally, we propose that the introduction of radical-sustaining innovations by the incumbents in an established value network is a good indicator for a high degree of disruptive susceptibility. {\textcopyright} 2013 Elsevier B.V. All rights reserved.},
author = {Klenner, Philipp and H{\"{u}}sig, Stefan and Dowling, Michael},
doi = {10.1016/j.respol.2012.12.006},
issn = {00487333},
journal = {Research Policy},
keywords = {Disruptive innovation,Disruptive susceptibility,Early warning system},
number = {4},
pages = {914--927},
publisher = {Elsevier {\{}BV{\}}},
title = {{Ex-ante evaluation of disruptive susceptibility in established value networks - When are markets ready for disruptive innovations?}},
url = {https://doi.org/10.1016{\%}2Fj.respol.2012.12.006},
volume = {42},
year = {2013}
}
@inproceedings{Kumara_2013,
abstract = {A single-instance multi-tenant (SIMT) SaaS application enables a SaaS provider to achieve economies of scale through runtime sharing. However, runtime sharing can make tenant-specific variations difficult to achieve in such an application. In this paper, we propose an approach to realizing SIMT SaaS applications, which is based on Dynamic Software Product Lines (DSPL) and supports runtime sharing and variation. With the collaboration among a subset of services as the unit of composition, the commonality among the tenants' requirements is realized in the DSPL architecture by sharing collaboration units, and their variability is realized by composing different collaboration units, all at runtime. In addition, we adopt a feature-based high-level representation of the commonality and variability between the tenants' requirements to facilitate the runtime creation and reconfiguration of their application variants. We compare our approach with two alternative approaches in terms of development effort and degree of sharing. We further quantify the runtime overhead incurred by our multi-tenancy support. {\textcopyright} 2013 IEEE.},
author = {Kumara, Indika and Han, Jun and Colman, Alan and Nguyen, Tuan and Kapuruge, Malinda},
booktitle = {Proceedings - IEEE 10th International Conference on Services Computing, SCC 2013},
doi = {10.1109/SCC.2013.30},
isbn = {9780768550268},
keywords = {SPL,SaaS,compositional,multi-tenancy,variability},
month = {jun},
pages = {567--574},
publisher = {IEEE},
title = {{Sharing with a difference: Realizing service-based SaaS applications with runtime sharing and variation in dynamic software product lines}},
url = {https://doi.org/10.1109{\%}2Fscc.2013.30},
year = {2013}
}
@article{Rico_2014,
abstract = {Multi-tenant architectures (MTAs) are considered a cornerstone in the success of Software as a Service as a new application distribution formula. Multi-tenancy allows multiple customers (i.e. tenants) to be consolidated into the same operational system. This way, tenants run and share the same application instance as well as costs, which are significantly reduced. Functional needs vary from one tenant to another; either companies from different sectors run different types of applications or, although deploying the same functionality, they do differ in the extent of their complexity. In any case, MTA leaves one major concern regarding the companies' data, their privacy and security, which requires special attention to the data layer. In this article, we propose an extended data model that enhances traditional MTAs in respect of this concern. This extension – called multi-target – allows MT applications to host, manage and serve multiple functionalities within the same multi-tenant (MT) environment. The practical deployment of this approach will allow SaaS vendors to target multiple markets or address different levels of functional complexity and yet commercialise just one single MT application. The applicability of the approach is demonstrated via a case study of a real multi-tenancy multi-target (MT2) implementation, called Globalgest.},
author = {Rico, Antonio and Noguera, Manuel and Garrido, Jos{\'{e}} Luis and Benghazi, Kawtar and Barjis, Joseph},
doi = {10.1080/17517575.2014.947636},
issn = {17517583},
journal = {Enterprise Information Systems},
keywords = {Software as a Service,cloud computing,database design,enterprise information systems,multi-target,multi-tenancy,software architecture},
number = {4},
pages = {400--421},
publisher = {Informa {\{}UK{\}} Limited},
title = {{Extending multi-tenant architectures: a database model for a multi-target support in SaaS applications}},
url = {https://doi.org/10.1080{\%}2F17517575.2014.947636},
volume = {10},
year = {2016}
}
@inproceedings{Wang_2009,
abstract = {Multi-tenant technology is one of key competencies for Software as a Service (SaaS) to achieve higher profit margin by leveraging the economic scale. In China, there are a number of textile {\&} apparel OEM enterprises, but due to the lower value-added products, they can not invest on information platform with very big budget. A collaboration service system supporting multiple tenants can significantly reduce cost of customization, deployment and operation of a great number of textile {\&} apparel enterprises. This paper designs and implements a collaboration service system for textile {\&} apparel supply chain. In this system, all tenants share the same infrastructure and application instance. However, from the user experience, the tenant would naturally dedicate to access and use the service as if there were dedicated ones. Therefore a cost-effective and secure multi-tenant infrastructure, especially in data access architecture, should be carefully considered. We analyze the key implementation patterns of data access multi-tenancy on aspects of isolation, security and customization. Furthermore the detailed access control flow is demonstrated. {\textcopyright}2009 IEEE.},
author = {Xiao, Feng Wang and Ping, Jun Dong},
booktitle = {Proceedings - 5th International Conference on Wireless Communications, Networking and Mobile Computing, WiCOM 2009},
doi = {10.1109/WICOM.2009.5305420},
isbn = {9781424436934},
keywords = {Isolation,Multi-tenant,SaaS,Security,Supply chain,Textile {\&} apparel},
publisher = {IEEE},
title = {{The multi-tenant data architecture design for the collaboration service system of textile {\&} apparel supply chain}},
url = {https://doi.org/10.1109{\%}2Fwicom.2009.5305420},
year = {2009}
}
@inproceedings{Espadas_2008,
abstract = {New web development and deployment platforms are arising; some examples of these are Apex of Salesforce.com, Google Application Engine SDK, Facebook API, and so on. These Software Delivety Platforms (SDP) are meant to serve as the basis for the delivety of an important percentage of the software offer. In the other hand, application development over these new platforms is not a defined process. Building applications over an SDP change the way software is designed, developed and delivered. Common methods of software development should be analyzed and redefined in order to fulfill the requirements of these new ways of constructing and delivering software. This paper presents the analysis of the impact of these requirements and proposes guidelines to be applied for application development in Software-as-a-Service (SaaS) environments. {\textcopyright} 2008 IEEE.},
author = {Espadas, Javier and Concha, David and Molina, Arturo},
booktitle = {Proceedings - The 3rd International Conference on Software Engineering Advances, ICSEA 2008, Includes ENTISY 2008: International Workshop on Enterprise Information Systems},
doi = {10.1109/ICSEA.2008.48},
isbn = {9780769533728},
pages = {97--104},
publisher = {IEEE},
title = {{Application development over software-as-a-service platforms}},
url = {https://doi.org/10.1109{\%}2Ficsea.2008.48},
year = {2008}
}
@inproceedings{Tsai_2011,
abstract = {Software-as-a-Service (SaaS) often adopts multi-tenancy architecture (MTA). However, building a MTA SaaS application requires significant effort, either from scratch or using existing platforms such as Force.com or Google App Engine. This paper introduces EasySaaS - a SaaS development framework designed to simplify SaaS development. EasySaaS provides two alternatives to build a SaaS application. First alternative allows tenants to publish their application specifications with their requirements, as well as test scripts and let the SaaS providers customize their SaaS solutions to meet tenants' requirements. The second alternative allows tenants to compose the application using templates provided in EasySaaS. This framework alleviates the workload of tenant developers, and provides an easy approach for customization according to tenants' requirements in a collaborative manner. Most services in the platform is domain independent as the domain knowledge are stored in ontology to support cross-domain development. {\textcopyright} 2011 IEEE.},
author = {Tsai, Wei Tek and Huang, Yu and Shao, Qihong},
booktitle = {Proceedings - 2011 IEEE International Conference on Service-Oriented Computing and Applications, SOCA 2011},
doi = {10.1109/SOCA.2011.6166262},
isbn = {9781467303194},
keywords = {Cloud Computing,Multi-tenancy architecture,SaaS},
publisher = {IEEE},
title = {{EasySaaS: A SaaS development framework}},
url = {https://doi.org/10.1109{\%}2Fsoca.2011.6166262},
year = {2011}
}
@inproceedings{Shen_2011,
abstract = {SaaS is a novel software model that data and applications of service are outsourced to service provider. Although SaaS model offers many benefits for small and medium enterprises, data privacy issue is the most challenge for the development of SaaS. In this paper we propose a new hybrid fragmentation approach which is different from traditional data encryption to protect data. We define three kinds of privacy constraints to support finger-grained privacy customization. We also give a heuristic hybrid fragmentation algorithm which considers query efficiency to produce a hybrid fragmentation. We make some experiments to analyze our approach in the paper. {\textcopyright} 2011 IEEE.},
author = {Shen, Yu and Cui, Wenjuan and Li, Qingzhong and Shi, Yuliang},
booktitle = {Proceedings -8th Web Information Systems and Applications Conference, WISA 2011, Workshop on Semantic Web and Ontology,SWON 2011,Workshop on Electronic Government Technology and Application,EGTA 2011},
doi = {10.1109/WISA.2011.8},
isbn = {9780769545554},
keywords = {Customization,Data privacy,Hybrid fragmentation,SaaS},
pages = {3--6},
publisher = {IEEE},
title = {{Hybrid fragmentation to preserve data privacy for SaaS}},
url = {https://doi.org/10.1109{\%}2Fwisa.2011.8},
year = {2011}
}
@techreport{Mell_2011,
abstract = {Cloud computing is a model for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction. This cloud model promotes availability and is composed of five essential characteristics (On-demand self-service, Broad network access, Resource pooling, Rapid elasticity, Measured Service); three service models (Cloud Software as a Service (SaaS), Cloud Platform as a Service (PaaS), Cloud Infrastructure as a Service (IaaS)); and, four deployment models (Private cloud, Community cloud, Public cloud, Hybrid cloud). Key enabling technologies include: (1) fast wide-area networks, (2) powerful, inexpensive server computers, and (3) high-performance virtualization for commodity hardware.},
author = {NIST},
booktitle = {Observatorio Econ{\'{o}}mico EEUU},
doi = {10.6028/NIST.SP.800-145},
keywords = {Cloud Computing,IaaS,Infrastructure as a Service,Measured Service,NIST SP 800-145,On-demand Self Service,PaaS,Platform as a Service,Rapid Elasticity,Reserve Pooling,SaaS,Software as a Service,The NIST Definition of Cloud Computing},
number = {BBVA Research},
pages = {1--8},
publisher = {National Institute of Standards and Technology},
title = {{The NIST Definition of Cloud Computing}},
url = {https://www.bbvaresearch.com/wp-content/uploads/2016/05/160510{\_}CloudBanking{\_}esp.pdf},
year = {2016}
}
@inproceedings{Kale_2013,
abstract = {A multitenant SaaS model mainly aims to provide the service to customer by providing license. Multitenancy means, only one tenant give service to different customers. Software as a service (SaaS) is used as the service given to the customer. This Proposed framework helps to create, enable a single instance of your application and Software as a service provides software when required to customer. Multi-tenancy is a core concept in SaaS. {\textcopyright} 2013 IEEE.},
author = {Kale, Sonali S. and Borhade, Ravindra H.},
booktitle = {Proceedings of the 2013 International Conference on Advances in Computing, Communications and Informatics, ICACCI 2013},
doi = {10.1109/ICACCI.2013.6637284},
isbn = {9781467362153},
keywords = {SaaS,SaaS platform,multi-tenant,single instance,zero effort multitenancy},
pages = {834--839},
publisher = {IEEE},
title = {{Development of Multitenant SaaS framework at single instance and with zero effort multitenancy}},
url = {https://doi.org/10.1109{\%}2Ficacci.2013.6637284},
year = {2013}
}
@inproceedings{Zheng_2010,
abstract = {In a traditional SaaS application, there is only a virtualized application for a tenant, but in some situations a tenant requires customizing with a SaaS application out of more than one virtualized application and run multiple business applications simultaneously. According to the traditional way, the tenant has to rent and customize with the same SaaS application many times, which results in a lot of repeated custom operations and duplication of custom metadata. In this paper we design a novel metadata-driven schema-sharing data storage architecture for multi-level Customization in SaaS applications, which supports sharing custom metadata in a tenant domain, reduces duplication of customization, and facilitates unified management of a tenant's institutions, users, roles, code, business applications, business data, etc. {\textcopyright} 2010 IEEE.},
author = {Zheng, Xuxu and Li, Qingzhong and Kong, Lanju},
booktitle = {Proc. - 7th Web Information Systems and Applications Conference, WISA 2010, Workshop on Semantic Web and Ontology, SWON 2010, Workshop on Electronic Government Technology and Application, EGTA 2010},
doi = {10.1109/WISA.2010.18},
isbn = {9780769541938},
keywords = {Customization,Metadata-driven,SaaS,Schema-sharing,Virtualized-application},
pages = {106--109},
publisher = {IEEE},
title = {{A data storage architecture supporting multi-level Customization for SaaS}},
url = {https://doi.org/10.1109{\%}2Fwisa.2010.18},
year = {2010}
}
@article{Najwa_Zakaria_2019,
author = {{Najwa Zakaria}, Liyanatul and {Sakdiah Minhat}, Halimatus and {Mohd Zulkefli}, Nor Afiah and Baharom, Anisah and Ahmad, Norliza},
doi = {10.17485/ijst/2019/v12i7/141509},
issn = {0974-6846},
journal = {Indian Journal of Science and Technology},
number = {7},
pages = {1--12},
publisher = {Indian Society for Education and Environment},
title = {{Factors Contributing Towards Malnutrition Among Under Five Indigenous Children: A Systematic Review}},
url = {https://doi.org/10.17485{\%}2Fijst{\%}2F2019{\%}2Fv12i7{\%}2F141509},
volume = {12},
year = {2019}
}
@inproceedings{Tsai_2011,
abstract = {Cloud computing and SaaS (Software-as-a-Service) received significant attention recently. Testing SaaS applications is important because many mission-critical applications will be deployed on the cloud. However, to the best of our knowledge, testing framework designed specifically for SaaS applications is not developed. The issue of testing the scalability of SaaS applications remains untouched. This paper discusses the unique features and challenges in testing SaaS applications, and proposes scalability metrics that can be used to test the scalability of SaaS applications. {\textcopyright} 2011 IEEE.},
author = {Tsai, Wei Tek and Huang, Yu and Shao, Qihong},
booktitle = {Proceedings - 2011 IEEE International Conference on Service-Oriented Computing and Applications, SOCA 2011},
doi = {10.1109/SOCA.2011.6166245},
isbn = {9781467303194},
publisher = {IEEE},
title = {{Testing the scalability of SaaS applications}},
url = {https://doi.org/10.1109{\%}2Fsoca.2011.6166245},
year = {2011}
}
@article{Fornell_1982,
abstract = {In marketing applications of structural equation models with unobservable variables, researchers have relied almost exclusively on LISREL for parameter estimation. Apparently they have been little ...},
author = {Fornell, Claes and Bookstein, Fred L.},
doi = {10.1177/002224378201900406},
issn = {0022-2437},
journal = {Journal of Marketing Research},
month = {nov},
number = {4},
pages = {440--452},
publisher = {{\{}SAGE{\}} Publications},
title = {{Two Structural Equation Models: LISREL and PLS Applied to Consumer Exit-Voice Theory}},
url = {https://doi.org/10.1177{\%}2F002224378201900406},
volume = {19},
year = {1982}
}
@article{Zhang_2011,
abstract = {Context: Systematic literature review (SLR) has become an important research methodology in software engineering since the introduction of evidence-based software engineering (EBSE) in 2004. One critical step in applying this methodology is to design and execute appropriate and effective search strategy. This is a time-consuming and error-prone step, which needs to be carefully planned and implemented. There is an apparent need for a systematic approach to designing, executing, and evaluating a suitable search strategy for optimally retrieving the target literature from digital libraries. Objective: The main objective of the research reported in this paper is to improve the search step of undertaking SLRs in software engineering (SE) by devising and evaluating systematic and practical approaches to identifying relevant studies in SE. Method: We have systematically selected and analytically studied a large number of papers (SLRs) to understand the state-of-the-practice of search strategies in EBSE. Having identified the limitations of the current ad-hoc nature of search strategies used by SE researchers for SLRs, we have devised a systematic and evidence-based approach to developing and executing optimal search strategies in SLRs. The proposed approach incorporates the concept of 'quasi-gold standard' (QGS), which consists of collection of known studies, and corresponding 'quasi-sensitivity' into the search process for evaluating search performance. Results: We conducted two participant-observer case studies to demonstrate and evaluate the adoption of the proposed QGS-based systematic search approach in support of SLRs in SE research. Conclusion: We report their findings based on the case studies that the approach is able to improve the rigor of search process in an SLR, as well as it can serve as a supplement to the guidelines for SLRs in EBSE. We plan to further evaluate the proposed approach using a series of case studies on varying research topics in SE. {\textcopyright} 2011 Elsevier B.V. All rights reserved.},
author = {Zhang, He and Babar, Muhammad Ali and Tell, Paolo},
doi = {10.1016/j.infsof.2010.12.010},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Evidence-based software engineering,Quasi-gold standard,Search strategy,Systematic literature review},
month = {jun},
number = {6},
pages = {625--637},
publisher = {Elsevier {\{}BV{\}}},
title = {{Identifying relevant studies in software engineering}},
url = {https://doi.org/10.1016{\%}2Fj.infsof.2010.12.010},
volume = {53},
year = {2011}
}
@inproceedings{Rimal_2009,
abstract = {The computational world is becoming very large and complex. Cloud Computing has emerged as a popular computing model to support processing large volumetric data using clusters of commodity computers. According to J.Dean and S. Ghemawat [1], Google currently processes over 20 terabytes of raw web data. It's some fascinating, large-scale processing of data that makes your head spin and appreciate the years of distributed computing fine-tuning applied to today's large problems. The evolution of cloud computing can handle such massive data as per on demand service. Nowadays the computational world is opting for pay-for-use models and Hype and discussion aside, there remains no concrete definition of cloud computing. In this paper, we first develop a comprehensive taxonomy for describing cloud computing architecture. Then we use this taxonomy to survey several existing cloud computing services developed by various projects world-wide such as Google, force.com, Amazon. We use the taxonomy and survey results not only to identify similarities and differences of the architectural approaches of cloud computing, but also to identify areas requiring further research. {\textcopyright} 2009 IEEE.},
author = {Rimal, Bhaskar Prasad and Choi, Eunmi and Lumb, Ian},
booktitle = {NCM 2009 - 5th International Joint Conference on INC, IMS, and IDC},
doi = {10.1109/NCM.2009.218},
isbn = {9780769537696},
keywords = {Cloud computing,Distributed computing,Evolution,Large scale processors,Massive data,Taxonomy},
pages = {44--51},
publisher = {IEEE},
title = {{A taxonomy and survey of cloud computing systems}},
url = {https://doi.org/10.1109{\%}2Fncm.2009.218},
year = {2009}
}
@inproceedings{Tsai_2012,
abstract = {An important issue faced by Software-as-a-Service (SaaS) application is scalability. Each SaaS application is typically shared by multiple (tens or hundreds) organizations (tenants). Each tenant may have hundreds or thousands of users. Thus, the number of concurrent accesses is high. Handling a large number of user requests effectively is critical for SaaS applications. Various aspects of SaaS can have a significant impact on its scalability, including levels of scalability mechanisms, automated migration, tenant awareness, workload support, fault-tolerance and recovery, software architecture and database access. This paper identifies scalability factors and discusses their impacts on the scalability of SaaS applications. Existing approaches for addressing the scalibility of SaaS applications are also analyzed, and this paper suggests some alternatives to improve SaaS scalability based on the factors identified. {\textcopyright} 2012 IEEE.},
author = {Tsai, Wei Tek and Huang, Yu and Bai, Xiaoying and Gao, Jerry},
booktitle = {Proceedings - 2012 15th IEEE International Symposium on Object/Component/Service-Oriented Real-Time Distributed Computing Workshops, ISORCW 2012},
doi = {10.1109/ISORCW.2012.44},
isbn = {9780769546698},
pages = {112--117},
publisher = {IEEE},
title = {{Scalable architectures for SaaS}},
url = {https://doi.org/10.1109{\%}2Fisorcw.2012.44},
year = {2012}
}
@inproceedings{Gey_2016,
abstract = {When successful, multi-tenant SaaS applications service many customer organizations (tenants) at once, and SaaS providers face the challenge of complying to the different SLAs of each of these tenants. As a consequence, evolving a SaaS application is in practice done at run time to limit service disruptions, and preferably on a gradual, tenant-per-tenant basis, while taking into account the nature of the upgrade at hand but also these different tenant SLAs. The economic viability and cost-effectiveness of a SaaS offering depends strongly on two principles: (i) maximal automation of its operation, and (ii) self-service: allowing tenant organizations themselves to customize and configure different aspects of the service to their specific needs. In this position paper, we highlight the value of adopting the principles of self-adaptive systems in the design of middleware solutions that support continuous evolution of multi-tenant SaaS applications as a means to implement the first principle. Furthermore, we discuss the additional challenges imposed by the second principle, more specifically for supporting tenant mediation, i.e. introducing human stakeholders such as tenant administrators into the inner control-loop of a self-adaptive system. We present the design of our middleware that addresses these challenges for the specific purpose of evolving multi-tenant SaaS applications, but also discuss the relevance for self-adaptive systems that support stakeholder mediation in general.},
author = {Gey, Fatih and {Van Landuyt}, Dimitri and Joosen, Wouter},
booktitle = {Proceedings - 11th International Symposium on Software Engineering for Adaptive and Self-Managing Systems, SEAMS 2016},
doi = {10.1145/2897053.2897057},
isbn = {9781450341875},
pages = {151--157},
publisher = {{\{}ACM{\}} Press},
title = {{Evolving multi-tenant SaaS applications through self-adaptive upgrade enactment and tenant mediation}},
url = {https://doi.org/10.1145{\%}2F2897053.2897057},
year = {2016}
}
@inproceedings{Ziani_2015,
abstract = {Customizing cloud ERP systems is considered one of the biggest issues in the multi tenant environment. This paper aims to propose a new framework, allowing tenants in the cloud ERP to change the ERP's source codes in order to meet their requirements. We inspired by SAP systems to get better understanding of the structure of ERP systems, and to propose a web based ERP application. Afterwards, we illustrated how we improved the proposed web based ERP application to support the customization process in multi tenant environment. The proposed framework is based on a strong architecture that manages and controls the customizing of the tenants to tailor the cloud ERP system without affecting each other.},
author = {Ziani, Djamal and AlShehri, Asma},
booktitle = {2015 2nd World Symposium on Web Applications and Networking ({\{}WSWAN{\}})},
doi = {10.1109/wswan.2015.7209089},
month = {mar},
pages = {1--7},
publisher = {IEEE},
title = {{A new framework for customizing ERP systems in a multi tenant SaaS environment}},
url = {https://doi.org/10.1109{\%}2Fwswan.2015.7209089},
year = {2015}
}
@inproceedings{Aulbach_2011,
abstract = {Software-as-a-Service applications commonly consolidate multiple businesses into the same database to reduce costs. This practice makes it harder to implement several essential features of enterprise applications. The first is support for master data, which should be shared rather than replicated for each tenant. The second is application modification and extension, which applies both to the database schema and master data it contains. The third is evolution of the schema and master data, which occurs as the application and its extensions are upgraded. These features cannot be easily implemented in a traditional DBMS and, to the extent that they are currently offered at all, they are generally implemented within the application layer. This approach reduces the DBMS to a dumb data repository that only stores data rather than managing it. In addition, it complicates development of the application since many DBMS features have to be re-implemented. Instead, a next-generation multi-tenant DBMS should provide explicit support for Extensibility, Data Sharing and Evolution. As these three features are strongly related, they cannot be implemented independently from each other. Therefore, we propose FLEXSCHEME which captures all three aspects in one integrated model. In this paper, we focus on efficient storage mechanisms for this model and present a novel versioning mechanism, called XOR Delta, which is based on XOR encoding and is optimized for main-memory DBMSs. {\textcopyright} 2011 IEEE.},
author = {Aulbach, Stefan and Seibold, Michael and Jacobs, Dean and Kemper, Alfons},
booktitle = {Proceedings - International Conference on Data Engineering},
doi = {10.1109/ICDE.2011.5767872},
isbn = {9781424489589},
issn = {10844627},
pages = {99--110},
publisher = {IEEE},
title = {{Extensibility and Data Sharing in evolving multi-tenant databases}},
url = {https://doi.org/10.1109{\%}2Ficde.2011.5767872},
year = {2011}
}
@incollection{Li_2008,
author = {Li, Xin Hui and Liu, Tian Cheng and Li, Ying and Chen, Ying},
booktitle = {Service-Oriented Computing {\{}$\backslash$textendash{\}} {\{}ICSOC{\}} 2007},
doi = {10.1007/978-3-540-89652-4_58},
pages = {649--663},
publisher = {Springer Berlin Heidelberg},
title = {{SPIN: Service Performance Isolation Infrastructure in Multi-tenancy Environment}},
url = {https://doi.org/10.1007{\%}2F978-3-540-89652-4{\_}58},
year = {2008}
}
@inproceedings{Yaish_2013,
abstract = {Multi-tenant database is a new cloud computing paradigm that has recently attracted attention to deliver database functionalities for multiple tenants to create, store, and access their databases over the internet. This multi-tenant database should be highly configurable and secure to meet tenants' expectations and their different business requirements. In this paper, we propose an architecture design to build an intermediate database layer to be used between software applications and Relational Database Management Systems (RDBMS) to store and access multiple tenants' data in the Elastic Extension Table (EET) multi-tenant database schema. This database layer combines multi-tenant relational tables and virtual relational tables and makes them work together to act as one database for each tenant. This architecture design is suitable for multi-tenant database environment that can run any business domain database by using a combination of a database schema, which contains shared physical structured tables and virtual structured tenant's tables. Further, this multi-tenant database architecture design can be used as a base to build software applications in general and Software as a Service (SaaS) applications in particular. {\textcopyright} 2013 IEEE.},
author = {Yaish, Haitham and Goyal, Madhu},
booktitle = {Proceedings - 16th IEEE International Conference on Computational Science and Engineering, CSE 2013},
doi = {10.1109/CSE.2013.139},
keywords = {Cloud Computing,Elastic Extension Tables,Multi-tenancy,Multi-tenant Database,SaaS,Structured Data,Unstructured Data},
pages = {933--940},
publisher = {IEEE},
title = {{A multi-tenant database architecture design for software applications}},
url = {https://doi.org/10.1109{\%}2Fcse.2013.139},
year = {2013}
}
@article{Qasem_Ali_2018,
author = {{Qasem Ali}, Abdulrazzaq and {Md Sultan}, Abu Bakar and {Abd Ghani}, Abdul Azim and Zulzalil, Hazura},
doi = {10.20967/jcscm.2018.03.001},
journal = {Journal of Computer Science {\&} Computational Mathematics},
pages = {27--32},
publisher = {Science and Knowledge Research Society},
title = {{Customization of Software as a Service Application: Problems and Objectives}},
url = {https://doi.org/10.20967{\%}2Fjcscm.2018.03.001},
year = {2018}
}
@incollection{1,
author = {Veglis, Andreas and Giomelakis, Dimitrios},
booktitle = {Future Internet},
doi = {10.3390/fi12010006},
issn = {19995903},
number = {1},
pages = {189--220},
publisher = {Apress},
title = {{Search engine optimization}},
url = {https://doi.org/10.1007{\%}2F978-1-4302-0291-2{\_}7},
volume = {12},
year = {2020}
}
@incollection{Kabbedijk_2014,
abstract = {Software architects struggle to choose an adequate architectural style for multi-tenant software systems. Bad choices result in poor performance, low scalability, limited flexibility, and obstruct software evolution. We present a comparison of 12 Multi-Tenant Architecture (MTA) patterns that supports architects in choosing the most suitable architectural pattern, using 17 assessment criteria. Both patterns and criteria were evaluated by domain experts. Five architecture assessment rules of thumb are presented in the paper, aimed at making fast and efficient design decisions. The comparison provides architects with an effective method for selecting the applicable multi-tenant architecture pattern, saving them effort, time, and mitigating the effects of making wrong decisions. {\textcopyright} 2014 Springer International Publishing Switzerland.},
author = {Kabbedijk, Jaap and Pors, Michiel and Jansen, Slinger and Brinkkemper, Sjaak},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-09970-5_18},
isbn = {9783319099699},
issn = {16113349},
keywords = {Multi-tenancy,architecture patterns,quality attributes},
pages = {202--209},
publisher = {Springer International Publishing},
title = {{Multi-tenant architecture comparison}},
url = {https://doi.org/10.1007{\%}2F978-3-319-09970-5{\_}18},
volume = {8627 LNCS},
year = {2014}
}
@article{Alshamaila_2013,
abstract = {Purpose: The purpose of this paper is to contribute to a growing body of research on cloud computing, by studying the small to medium-sized enterprise (SME) adoption process. If SMEs have access to scalable technologies they could potentially deliver products and services that in the past only large enterprises could deliver, flattening the competitive arena. Design/methodology/approach: By adopting the Technological, Organisational and Environmental (TOE) framework as a theoretical base, this qualitative exploratory study used semi-structured interviews to collect data in 15 different SMEs and service providers in the north east of England. The north east of England was selected as it is a region that aspires to become home to innovative digital firms and most of the companies in the region are SMEs. Findings: The main factors that were identified as playing a significant role in SME adoption of cloud services were: relative advantage, uncertainty, geo-restriction, compatibility, trialability, size, top management support, prior experience, innovativeness, industry, market scope, supplier efforts and external computing support. In contrast, this study did not find enough evidence that competitive pressure was a significant determinant of cloud computing adoption. Research limitations/implications: These findings have important implications and great value to the research community, managers and information and communication technologies (ICT) providers, in terms of formulating better strategies for cloud computing adoption. For service providers, using the research model in this study can assist in increasing their understanding of why some SMEs choose to adopt cloud computing services, while seemingly similar ones facing similar market conditions do not. Also, cloud computing providers may need to improve their interaction with SMEs which are involved in the cloud computing experience, in an effort to create a healthy environment for cloud computing adoption, and to remove any vagueness surrounding this type of technology. Originality/value: This study is an attempt to explore and develop an SME cloud computing adoption model that was theoretically grounded in the TOE framework. By adopting the TOE framework this study has shown that the three contexts of this framework (technological, organisational, and environmental) are connected to each other. {\textcopyright} Emerald Group Publishing Limited.},
author = {Alshamaila, Yazn and Papagiannidis, Savvas and Li, Feng},
doi = {10.1108/17410391311325225},
issn = {17410398},
journal = {Journal of Enterprise Information Management},
keywords = {Cloud computing,Communication technologies,Diffusion of innovation,Information and communication technologies innovat,Information technology,Innovation,Internet,North east of England,Small to medium-sized enterprises,TOE framework},
number = {3},
pages = {250--275},
publisher = {Emerald},
title = {{Cloud computing adoption by SMEs in the north east of England: A multi-perspective framework}},
url = {https://doi.org/10.1108{\%}2F17410391311325225},
volume = {26},
year = {2013}
}
@incollection{Hosono_2013,
abstract = {This paper proposes a chain of service models assembled by design, implementation and operation data. To obtain both economy of scale and economy of scope, appropriate chains are required for producing cloud-compliant services. By specifying a target domain and distributing models' attributes into commonality or variability, a chain, which consists of necessary and sufficient models with utmost customizable interfaces, can be determined decisively. A field trial elicits representative chains of models, and shows that the chains, i.e. lifecycle patterns, can be used as templates to develop new services on mass customization basis and tailored to meet clients' varied demands.},
author = {Hosono, Shigeru and Shimomura, Yoshiki},
booktitle = {The Philosopher's Stone for Sustainability},
doi = {10.1007/978-3-642-32847-3_75},
pages = {447--452},
publisher = {Springer Berlin Heidelberg},
title = {{Towards Establishing Mass Customization Methods for Cloud-Compliant Services}},
url = {https://doi.org/10.1007{\%}2F978-3-642-32847-3{\_}75},
year = {2013}
}
@inproceedings{Shah_2014,
abstract = {Virtualization is very important factor to reduce cost of data warehouse deployment. It can reduce cost as well as tremendous pressure of managing devices, storage servers, application models and man power. In current era, data warehouse is very effective concept that can make huge impact in organizational decision support system. Unlike database systems, data warehouse systems take large amount of time and cost to deploy and develop in-house system for an organization. This is the reason that people now think about cloud computing as a solution of the problem instead of implementing their own data warehouse system. This paper is about, how cloud computing environment can be established as an alternative of data warehouse system. It will also throw some light about better environment choice for the organizational need. Organizational data warehouse and EC2 (Elastic Cloud Computing) are discussed with different parameters like ROI, security, scalability, robustness of data, maintenance of system etc. Paper will help in comparative analysis of both the systems. {\textcopyright} 2014 IEEE.},
author = {Shah, Neepa K.},
booktitle = {2014 International Conference on Computing for Sustainable Global Development, INDIACom 2014},
doi = {10.1109/IndiaCom.2014.6828113},
isbn = {9789380544120},
keywords = {Elastic Cloud Computing,IaaS,In-house data warehouse,SaaS and PaaS,cloud computing,data warehouse},
month = {mar},
pages = {118--123},
publisher = {IEEE},
title = {{Data warehouse systems in the environment of cloud computing - A comparative study of elastic cloud computing and organizational systems}},
url = {https://doi.org/10.1109{\%}2Findiacom.2014.6828113},
year = {2014}
}
@inproceedings{Zhu_2009,
abstract = {Software-as-a-Service (SaaS) is changing the way enterprises develop and deploy information systems. With the rapid development and successful implementations of the model-driven architecure(MDA) and service-oriented architecture (SOA), SaaS has become the focus of research. This paper describes the design and implementation of a service template markup language (STML) and its integrated development tools, which provide a comprehensive solution to the customization of applications over SaaS platforms for individual users on an asneeded basis. In the paper, we first analyze and point out the limitations of current software customization approaches in SaaS platforms, then propose a framework for a MDA-based approach to software customization in a SaaS platform, next present a series of SaaS service models and an XML-based service template markup language, finally conclude by an example showing the practicability of the STML tools. {\textcopyright}2009 IEEE.},
author = {Xiyong, Zhu and Shixiong, Wang},
booktitle = {Proceedings - International Conference on Management and Service Science, MASS 2009},
doi = {10.1109/ICMSS.2009.5300967},
isbn = {9781424446391},
keywords = {MDA,STML,SaaS,Software customization},
publisher = {IEEE},
title = {{Software customization based on model-driven architecture over SaaS platforms}},
url = {https://doi.org/10.1109{\%}2Ficmss.2009.5300967},
year = {2009}
}
@inproceedings{Tsai_2010,
abstract = {Cloud computing often uses the multi-tenancy architecture where tenants share system software. To support dynamically increasing demands from multi-tenants, the cloud service providers have to duplicate computing resources to cope with the fluctuation of requests from tenants. This is currently handled by virtualization and duplication at the application level in the existing cloud environment, such as Google App Engine. However, duplicating at the application level only may result in significant resource waste as the entire application is duplicated. This paper proposes a two-tier SaaS scaling and scheduling architecture that works at both service and application levels to save resources, and the key idea is to increase the resources to those bottleneck components only. Several duplication strategies are proposed, including lazy duplication and pro-active duplication to achieve better system performance. Additionally, a resource allocation algorithm is proposed in a clustered cloud environment. The experiment results showed that the proposed algorithms can achieve a better resource utilization rate. {\textcopyright} 2010 IEEE.},
author = {Tsai, Wei Tek and Sun, Xin and Shao, Qihong and Qi, Guanqiu},
booktitle = {Proceedings - IEEE International Conference on E-Business Engineering, ICEBE 2010},
doi = {10.1109/ICEBE.2010.103},
isbn = {9780769542270},
month = {nov},
pages = {484--489},
publisher = {IEEE},
title = {{Two-tier multi-tenancy scaling and load balancing}},
url = {https://doi.org/10.1109{\%}2Ficebe.2010.103},
year = {2010}
}
@misc{2012,
booktitle = {Business in the Cloud},
doi = {10.1002/9781119200253.ch9},
month = {jan},
pages = {153--170},
publisher = {Wiley},
title = {{The Business Impact of Cloud Computing}},
url = {https://doi.org/10.1002{\%}2F9781119200253.ch9},
year = {2012}
}
@inproceedings{Park_2016,
abstract = {With virtualization technique, cloud computing is developed rapidly. However, aspects of the collecting of digital proofs for forensics in cloud computing environment, certain guideline is not yet. Therefore, cloud forensic researches in progress for reactivating security incidents in cloud computing. In this paper, we analyze forensic issue, challenges, already proposed forensic model in previous researches for adopting cloud forensic. And we suggest a novel model and approach for cloud forensic in SaaS and discuss needs of Service Level Agreements (SLA) and possibilities of Forensic-as-a-Service.},
author = {Park, Jun Hak and Na, Sang Ho and Park, Jun Young and Huh, Eui Nam and Lee, Chul Woo and Kim, Hyoung Chun},
booktitle = {Proceedings - 18th IEEE International Conference on High Performance Computing and Communications, 14th IEEE International Conference on Smart City and 2nd IEEE International Conference on Data Science and Systems, HPCC/SmartCity/DSS 2016},
doi = {10.1109/HPCC-SmartCity-DSS.2016.0107},
isbn = {9781509042968},
keywords = {Cloud computing,Cloud forensics},
pages = {734--740},
publisher = {IEEE},
title = {{A Study on Cloud Forensics and Challenges in SaaS Application Environment}},
url = {https://doi.org/10.1109{\%}2Fhpcc-smartcity-dss.2016.0107},
year = {2017}
}
@inproceedings{Ru_2014,
abstract = {Multi-tenancy is a cloud computing phenomenon. Multiple instances of an application occupy and share resources from a large pool, allowing different users to have their own version of the same application running and coexisting on the same hardware but in isolated virtual spaces. In this position paper we survey the current landscape of multi-tenancy, laying out the challenges and complexity of software engineering where multi-tenancy issues are involved. Multitenancy allows cloud service providers to better utilise computing resources, supporting the development of more exible services to customers based on economy of scale, reducing overheads and infrastructural costs. Nevertheless, there are major challenges in migration from single tenant applications to multi-tenancy. These have not been fully explored in research or practice to date. In particular, the reengineering effort of multi-tenancy in Software-as-a-Service cloud applications requires many complex and important aspects that should be taken into consideration, such as security, scalability, scheduling, data isolation, etc. Our study emphasizes scheduling policies and cloud provisioning and deployment with regards to multi-tenancy issues. We employ CloudSim and MapReduce in our experiments to simulate and analyse multi-tenancy models, scenarios, performance, scalability, scheduling and reliability on cloud platforms.},
author = {Ru, Jia and Grundy, John and Keung, Jacky},
booktitle = {International Workshop on Innovative Software Development Methodologies and Practices, InnoSWDev 2014 - Proceedings},
doi = {10.1145/2666581.2666585},
isbn = {9781450332262},
keywords = {Cloud computing,Multi-tenancy,Resource allocation,Saas,Scheduling policies,Software development},
pages = {1--10},
publisher = {{\{}ACM{\}} Press},
title = {{Software engineering for multi-tenancy computing challenges and implications}},
url = {https://doi.org/10.1145{\%}2F2666581.2666585},
year = {2014}
}
@inproceedings{Park_2016,
abstract = {With virtualization technique, cloud computing is developed rapidly. However, aspects of the collecting of digital proofs for forensics in cloud computing environment, certain guideline is not yet. Therefore, cloud forensic researches in progress for reactivating security incidents in cloud computing. In this paper, we analyze forensic issue, challenges, already proposed forensic model in previous researches for adopting cloud forensic. And we suggest a novel model and approach for cloud forensic in SaaS and discuss needs of Service Level Agreements (SLA) and possibilities of Forensic-as-a-Service.},
author = {Park, Jun Hak and Na, Sang Ho and Park, Jun Young and Huh, Eui Nam and Lee, Chul Woo and Kim, Hyoung Chun},
booktitle = {Proceedings - 18th IEEE International Conference on High Performance Computing and Communications, 14th IEEE International Conference on Smart City and 2nd IEEE International Conference on Data Science and Systems, HPCC/SmartCity/DSS 2016},
doi = {10.1109/HPCC-SmartCity-DSS.2016.0107},
isbn = {9781509042968},
keywords = {Cloud computing,Cloud forensics},
pages = {734--740},
publisher = {IEEE},
title = {{A Study on Cloud Forensics and Challenges in SaaS Application Environment}},
url = {https://doi.org/10.1109{\%}2Fhpcc-smartcity-dss.2016.0107},
year = {2017}
}
@inproceedings{Andro_ec_2018,
abstract = {On-premise and Cloud ERP systems have become a backbone of almost all businesses. Another recent trend currently in focus of both industry and academy is Internet of Things. The integration of Cloud ERP and the Internet of Things (IoT) should be looked as a new shift in business effectiveness and will have a great momentum in future. In this work, we propose the ontologically based model for the integration of the IoT and Cloud ERP systems by using Semantic Web services. To semantically annotate things as services, we plan to use recently published W3C's SSN and SOSA ontologies. Furthermore, we plan to extend mentioned ontologies to include classification and descriptions of Cloud ERP APIs. Our integration model proposes usage of Semantic web services and AI planning technique to semi-automatically compose IoT and Cloud ERP services.},
author = {Andro{\v{c}}ec, Darko and Picek, Ruben and Mija{\v{c}}, Marko},
booktitle = {CLOSER 2018 - Proceedings of the 8th International Conference on Cloud Computing and Services Science},
doi = {10.5220/0006763104810488},
isbn = {9789897582950},
keywords = {Cloud ERP,ERP,Integration,Internet of Things,Interoperability,Iot,Semantic Web},
pages = {481--488},
publisher = {{\{}SCITEPRESS{\}} - Science and Technology Publications},
title = {{The ontologically based model for the integration of the IoT and Cloud ERP services}},
url = {https://doi.org/10.5220{\%}2F0006763104810488},
volume = {2018-Janua},
year = {2018}
}
@article{Landis_1977,
abstract = {This paper presents a general statistical methodology for the analysis of multivariate categorical data arising from observer reliability studies. The procedure essentially involves the construction of functions of the observed proportions which are directed at the extent to which the observers agree among themselves and the construction of test statistics for hypotheses involving these functions. Tests for interobserver bias are presented in terms of first-order marginal homogeneity and measures of interobserver agreement are developed as generalized kappa-type statistics. These procedures are illustrated with a clinical diagnosis example from the epidemiological literature.},
author = {Landis, J. Richard and Koch, Gary G.},
doi = {10.2307/2529310},
issn = {0006341X},
journal = {Biometrics},
month = {mar},
number = {1},
pages = {159},
publisher = {JSTOR},
title = {{The Measurement of Observer Agreement for Categorical Data}},
url = {https://doi.org/10.2307{\%}2F2529310},
volume = {33},
year = {1977}
}
@inproceedings{Salih_2012,
abstract = {We observed SaaS developed application by multi-tenancy to provide flexible customization and introduced many issues in software scalability and dynamic testing. Multi-tenancy demand to customizing the single instance according variability wishes among many customers. For that we proposed variable service process to customization multi-tenancy in runtime. It will be realize all benefits of variability concept for SaaS application. And proposed Feature meta-model to implement graphical editor and define all rules and linkages between elements of service process. {\textcopyright} 2012 IEEE.},
author = {Salih, Nadir K. and Zang, Tianyi},
booktitle = {Proceedings of the 2012 International Conference in Green and Ubiquitous Technology, GUT 2012},
doi = {10.1109/GUT.2012.6344158},
isbn = {9781457721724},
keywords = {SaaS,multi-tenancy,service process,variability},
month = {jul},
pages = {102--105},
publisher = {IEEE},
title = {{Variable service process by feature meta-model for SaaS application}},
url = {https://doi.org/10.1109{\%}2Fgut.2012.6344158},
year = {2012}
}
@inproceedings{Pathirage_2011,
abstract = {Cloud computing, as a concept, promises cost savings to end-users by letting them outsource their non-critical business functions to a third party in pay-as-you-go style. However, to enable economic pay-as-you-go services, we need Cloud middleware that maximizes sharing and support near zero costs for unused applications. Multi-tenancy, which let multiple tenants (user) to share a single application instance securely, is a key enabler for building such a middleware. On the other hand, Business processes capture Business logic of organizations in an abstract and reusable manner, and hence play a key role in most organizations. This paper presents the design and architecture of a Multi-tenant Workflow engine while discussing in detail potential use cases of such architecture. Primary contributions of this paper are motivating workflow multi-tenancy, and the design and implementation of multi-tenant workflow engine that enables multiple tenants to run their workflows securely within the same workflow engine instance without modifications to the workflows. {\textcopyright} 2011 IEEE.},
author = {Pathirage, Milinda and Perera, Srinath and Kumara, Indika and Weerawarana, Sanjiva},
booktitle = {Proceedings - 2011 IEEE 9th International Conference on Web Services, ICWS 2011},
doi = {10.1109/ICWS.2011.99},
isbn = {9780769544632},
keywords = {Business processes,Cloud,Multi-tenancy,SOA,Workflows},
month = {jul},
pages = {121--128},
publisher = {IEEE},
title = {{A multi-tenant architecture for business process executions}},
url = {https://doi.org/10.1109{\%}2Ficws.2011.99},
year = {2011}
}
@incollection{Lee_2012,
abstract = {Users from multiple tenants remotely access resources in the Software as a Service (SaaS) model. SaaS is attractive to budget-constrained enterprises due to its low cost. Sharing of application servers among multiple tenants are necessary to achieve low costs in SaaS environments. Tenant-specific customization are required to accommodate many tenants. This paper describes methods to support multi-tenancy in SaaS environments. The proposed methods support tenant-specific customization and sharing of application servers. {\textcopyright} 2012 Springer Science+Business Media Dordrecht.},
author = {Lee, Wonjae and Choi, Min},
booktitle = {Lecture Notes in Electrical Engineering},
doi = {10.1007/978-94-007-5064-7_27},
isbn = {9789400750630},
issn = {18761100},
keywords = {Cloud Computing,Multi-tenancy,Platform as a Service (PaaS),Software as a Service (SaaS)},
number = {VOL. 2},
pages = {187--191},
publisher = {Springer Netherlands},
title = {{Supporting multi-tenancy in SaaS environments}},
url = {https://doi.org/10.1007{\%}2F978-94-007-5064-7{\_}27},
volume = {179 LNEE},
year = {2012}
}
@inproceedings{Kriouile_2014,
abstract = {Software-as-a-Service (SaaS) is a new delivery model, that involves providing applications to the customer on demand over the Internet. SaaS promotes multi-tenancy as a tool to exploit economies of scale. However, the flexibility of an application to be adapted to individual tenant's needs is a major requirement. Thus, we initiate in this paper to an approach proposing a more flexible and reusable SaaS system for multi-tenancy. This approach consist on integrating a functional variability using Rich-Variant Components with a deployment variability enabling the customers to choose with which others tenants they want or don't want to share instances. The approach presented enables exploiting the economies of scale while avoiding the problem of customers' hesitation about sharing with other tenants.},
author = {Kriouile, Houda and {El Asri}, Bouchra and {El Haloui}, M'barek},
booktitle = {2014 2nd World Conference on Complex Systems, WCCS 2014},
doi = {10.1109/ICoCS.2014.7060957},
isbn = {9781479946471},
keywords = {Deployment Variability,Functional Variability,Multi-tenancy,Rich-Variant Component,SaaS},
month = {nov},
pages = {164--170},
publisher = {IEEE},
title = {{Towards flexible and reusable SaaS for multi-tenancy: To design, implement and bind multi-functional variability for Rich-Variant services}},
url = {https://doi.org/10.1109{\%}2Ficocs.2014.7060957},
year = {2015}
}
@incollection{Guo_2011,
abstract = {Software as a Serivce (SaaS) provides software application vendors a Web based delivery model to serve big amount of clients with multi-tenancy based infrastructure and application sharing architecture so as to get great benefit from the economy of scale. In this paper, we describe the evolution of the small and medium businesses (SMB) oriented SaaS ecosystem and its key challenges. On particular problem we focus on is how to leverage massive multi-tenancy to balance the cost-effectiveness achieved via high shared efficiency, and the consequent security, performance and availability isolation issues among tenants. Base on this foundation, we further study the concepts, competency model and enablement framework of customization and configuration in SaaS context to satisfy as may tenants' requirements as possible. We also explore the topics on service lifecycle and the subscription management design of SaaS. {\textcopyright} Springer-Verlag Berlin Heidelberg 2011.},
author = {Guo, Chang Jie and Sun, Wei and Jiang, Zhong Bo and Huang, Ying and Gao, Bo and Wang, Zhi Hu},
booktitle = {Lecture Notes in Business Information Processing},
doi = {10.1007/978-3-642-19294-4_1},
isbn = {9783642192937},
issn = {18651348},
keywords = {Customization,Multi-tenancy,Service lifecycle management,Small and medium businesses (SMB),Software as a service,Subscription},
pages = {1--30},
publisher = {Springer Berlin Heidelberg},
title = {{Study of Software as a Service Support Platform for Small and Medium Businesses}},
url = {https://doi.org/10.1007{\%}2F978-3-642-19294-4{\_}1},
volume = {74 LNBIP},
year = {2011}
}
@inproceedings{Moon_2013,
abstract = {Multitenant databases achieve cost efficiency through the consolidation of multiple small tenants. However, performance isolation is an inherent problem in multitenant databases due to resource sharing among the tenants. That is, a bursty workload from a co-located tenant, i.e., a noisy neighbor, may affect the performance of the other tenants sharing the same system resources. We address this issue by using a load balancing method that is based on database replica swap. Unlike the traditional data migration-based load balancing, replica swap-based load balancing does not incur data movement, which makes it highly resource- and time-efficient. We propose a novel method of choosing which tenants should be subject to swaps. Our experimental results show that swap-based load balancing effectively reduces the number of SLA violations, which is the main performance metric we choose. {\textcopyright} 2013 ACM.},
author = {Moon, Hyun Jin and Hacig{\"{u}}m{\"{u}}ş, Hakan and Chi, Yun and Hsiung, Wang Pin},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/2452376.2452385},
isbn = {9781450315975},
pages = {65--76},
publisher = {{\{}ACM{\}} Press},
title = {{SWAT: A lightweight load balancing method for multitenant databases}},
url = {https://doi.org/10.1145{\%}2F2452376.2452385},
year = {2013}
}
@article{Kitchenham_2007,
abstract = {The objective of this paper is to determine under what circumstances individual organizations would be able to rely on cross-company-based estimation models. We performed a systematic review of studies that compared predictions from cross-company models with predictions from within-company models based on analysis of project data. Ten papers compared cross-company and within-company estimation models; however, only seven presented independent results. Of those seven, three found that cross-company models were not significantly different from within-company models, and four found that cross-company models were significantly worse than within-company models. Experimental procedures used by the studies differed making it impossible to undertake formal meta-analysis of the results. The main trend distinguishing study results was that studies with small within-company data sets (i.e., ≤20 projects) that used leave-one-out cross validation all found that the within-company model was significantly different (better) from the cross-company model. The results of this review are inconclusive. It is clear that some organizations would be ill-served by cross-company models whereas others would benefit. Further studies are needed, but they must be independent (i.e., based on different data bases or at least different single company data sets) and should address specific hypotheses concerning the conditions that would favor cross-company or within-company models. In addition, experimenters need to standardize their experimental procedures to enable formal meta-analysis, and recommendations are made in Section 3. {\textcopyright} 2007 IEEE.},
author = {Kitchenham, Barbara A. and Mendes, Emilia and Travassos, Guilherme H.},
doi = {10.1109/TSE.2007.1001},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Cost estimation,Management,Software engineering,Systematic review},
number = {5},
pages = {316--329},
publisher = {Institute of Electrical and Electronics Engineers ({\{}IEEE{\}})},
title = {{Cross versus within-company cost estimation studies: A systematic review}},
url = {https://doi.org/10.1109{\%}2Ftse.2007.1001},
volume = {33},
year = {2007}
}
@inproceedings{Bezemer_2010,
abstract = {Multi-tenancy is a relatively new software architecture principle in the realm of the Software as a Service (SaaS) business model. It allows to make full use of the economy of scale, as multiple customers - "tenants" - share the same application and database instance. All the while, the tenants enjoy a highly configurable application, making it appear that the application is deployed on a dedicated server. The major benefits of multi-tenancy are increased utilization of hardware resources and improved ease of maintenance, in particular on the deployment side. These benefits should result in lower overall application costs, making the technology attractive for service providers targeting small and medium enterprises (SME). However, as this paper advocates, a wrong architectural choice might entail that multi-tenancy becomes a maintenance nightmare. {\textcopyright} 2010 ACM.},
author = {Bezemer, Cor Paul and Zaidman, Andy},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/1862372.1862393},
isbn = {1595930361},
pages = {88--92},
publisher = {{\{}ACM{\}} Press},
title = {{Multi-tenant SaaS applications: Maintenance dream or nightmare?}},
url = {https://doi.org/10.1145{\%}2F1862372.1862393},
year = {2010}
}
@article{Hsu_2014,
abstract = {Cloud computing is a new information technology (IT) paradigm that promises to revolutionize traditional IT delivery through reduced costs, greater elasticity, and ubiquitous access. On the surface, adopting cloud computing requires a firm to address many of the same concerns they face in adopting any enterprise IT. However, cloud technologies also offer new pricing and deployment strategies that are unavailable in traditional enterprise solutions. It is unclear how previous research frameworks of enterprise IT adoption relate to these new adoption strategies. To bridge this gap in the literature, our study uses the technology-organization-environment (TOE) framework of innovation diffusion theory to develop a cloud service adoption model that deals with not only adoption intention, but also pricing mechanisms and deployment models. Our research model has been empirically tested using 200 Taiwanese firms. We found that: (1) Cloud adoption is still at its initial stage, since the adoption rates are very low; (2) the perceived benefits, business concerns, and IT capability within the TOE framework are significant determinants of cloud computing adoption, while external pressure is not; (3) firms with greater IT capability tend to choose the pay-as-you-go pricing mechanism; (4) business concern is the most important factor influencing the choice of deployment model, with higher concerns leading to private deployment options. {\textcopyright} 2014 Elsevier Ltd.},
author = {Hsu, Pei Fang and Ray, Soumya and Li-Hsieh, Yu Yu},
doi = {10.1016/j.ijinfomgt.2014.04.006},
issn = {02684012},
journal = {International Journal of Information Management},
keywords = {Cloud computing,Deployment model,Innovation adoption,Pricing mechanism,TOE framework},
number = {4},
pages = {474--488},
publisher = {Elsevier {\{}BV{\}}},
title = {{Examining cloud computing adoption intention, pricing mechanism, and deployment model}},
url = {https://doi.org/10.1016{\%}2Fj.ijinfomgt.2014.04.006},
volume = {34},
year = {2014}
}
@incollection{Patikirikorala_2012,
author = {Patikirikorala, Tharindu and Kumara, Indika and Colman, Alan and Han, Jun and Wang, Liuping and Weerasiri, Denis and Ranasinghe, Waruna},
booktitle = {Service-Oriented Computing},
doi = {10.1007/978-3-642-34321-6_14},
pages = {206--221},
publisher = {Springer Berlin Heidelberg},
title = {{Dynamic Performance Management in Multi-tenanted Business Process Servers Using Nonlinear Control}},
url = {https://doi.org/10.1007{\%}2F978-3-642-34321-6{\_}14},
year = {2012}
}
@inproceedings{Ganesh_2014,
abstract = {The emergence of Cloud Computing has brought new dimension to the world of information technology. Even though Cloud Computing provide various benefits like agility, on-demand provisioning of resources, reduced cost, multi-tenancy etc., there are risks and flaws associated with it. One key research challenge in Cloud Computing is to ensure continuous reliability and guaranteed availability of resources provided by it. So there is a need for a robust Fault Tolerant (FT) system in Cloud Computing. To better understand FT in Cloud Computing, it is essential to understand the different types of faults. In this paper, we highlight the basic concepts of fault tolerance by understanding the different FT policies like Reactive FT policy and Proactive FT policy and the associated FT techniques used on different types of faults. A study on various fault tolerant methods, algorithms, frameworks etc., has been carried out which are developed and implemented by research experts in this field. This is an area where lot of research is happening and these studies will guide us to build a robust FT technique in Cloud. {\textcopyright} 2014 IEEE.},
author = {Ganesh, Amal and Sandhya, M. and Shankar, Sharmila},
booktitle = {Souvenir of the 2014 IEEE International Advance Computing Conference, IACC 2014},
doi = {10.1109/IAdCC.2014.6779432},
keywords = {Cloud Computing,Fault Tolerance},
pages = {844--849},
publisher = {IEEE},
title = {{A study on fault tolerance methods in Cloud Computing}},
url = {https://doi.org/10.1109{\%}2Fiadcc.2014.6779432},
year = {2014}
}
@inproceedings{Xiong_2014,
abstract = {SaaS (Software-as-a-Service) as a part of cloud computing is a new approach for software construction, evolution, and delivery. This paper proposes HLA-based SaaS-oriented simulation frameworks where simulation services will be organized into a SaaS framework running in a cloud environment. This SaaS-oriented frameworks can be applied to multiple application domains but illustrated by using HLA (High-Level Architecture). The framework will allow integration of a variety of modules, service-oriented design, flexible customization, multi-granularity simulation, high-performance computing, and system security. It has the potential to reduce system development time, and allows simulation to be run in a cloud environment taking advantages of resources offered by the cloud. {\textcopyright} 2014 IEEE.},
author = {Xiong, Wei and Tsai, Wei Tek},
booktitle = {Proceedings - IEEE 8th International Symposium on Service Oriented System Engineering, SOSE 2014},
doi = {10.1109/SOSE.2014.74},
isbn = {9781479925049},
keywords = {HLA,SaaS (Software-as-a-Service),service-oriented design,simulation frameworks},
pages = {376--383},
publisher = {IEEE},
title = {{HLA-based SaaS-Oriented simulation frameworks}},
url = {https://doi.org/10.1109{\%}2Fsose.2014.74},
year = {2014}
}
@incollection{Easterbrook_2008,
abstract = {Selecting a research method for empirical software engineering research is problematic because the benefits and challenges to using each method are not yet well catalogued. Therefore, this chapter describes a number of empirical methods available. It examines the goals of each and analyzes the types of questions each best addresses. Theoretical stances behind the methods, practical considerations in the application of the methods and data collection are also briefly reviewed. Taken together, this information provides a suitable basis for both understanding and selecting from the variety of methods applicable to empirical software engineering. {\textcopyright} 2008 Springer-Verlag London.},
author = {Easterbrook, Steve and Singer, Janice and Storey, Margaret Anne and Damian, Daniela},
booktitle = {Guide to Advanced Empirical Software Engineering},
doi = {10.1007/978-1-84800-044-5_11},
isbn = {9781848000438},
pages = {285--311},
publisher = {Springer London},
title = {{Selecting empirical methods for software engineering research}},
url = {https://doi.org/10.1007{\%}2F978-1-84800-044-5{\_}11},
year = {2008}
}
@article{Chun_2013,
abstract = {Cloud computing is a model for enabling convenient, on-demand network access to a shared pool of configurable computing resources. To ensure large-scale adoption of cloud computing by businesses, several challenges including security, privacy, trust, performance and other quality attributes need to be addressed. Also, as with other utility services, adequate selection of service models and pricing schemes by service providers plays a pivotal role in market expansion. This paper investigates optimal pricing schemes for cloud services. In particular, this paper analyzes two pricing schemes: subscription and pay-per-use pricing models from a provider's standpoint. Using a theoretical analysis of a simple economic model this paper analyzes the optimal choices of providers and discusses implications on consumer surplus and social welfare. {\textcopyright} 2013 Springer Science+Business Media New York.},
author = {Chun, Se Hak and Choi, Byong Sam},
doi = {10.1007/s10586-013-0296-1},
issn = {15737543},
journal = {Cluster Computing},
keywords = {Cloud computing,Pay-per-use pricing,Pricing scheme,Service models,Subscription pricing},
number = {2},
pages = {529--535},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Service models and pricing schemes for cloud computing}},
url = {https://doi.org/10.1007{\%}2Fs10586-013-0296-1},
volume = {17},
year = {2014}
}
@inproceedings{Sabahi_2011,
abstract = {Cloud computing is one of today's most exciting technology because of its cost-reducing, flexibility, and scalability. With the fast growing of cloud computing technology, Data security becomes more and more important in it. In evaluating whether to move to cloud computing, it is important to compare benefits and also risks of it. Thus, security and other existed issues in the cloud cause cloud clients need more time to think about moving to cloud environments. But Security-related topics is one of the most arguable issues in the cloud computing which caused several enterprises looks to this technology uncertainly and move toward it warily. In this paper I try to summarize cloud computing RAS (Reliability, Availability, and Security) issues and also clarify available solution for some of them. In this paper I try to summarize virtualization level of cloud computing security in detailed view. {\textcopyright} 2011 IEEE.},
author = {Sabahi, Farzad},
booktitle = {2011 IEEE 3rd International Conference on Communication Software and Networks, ICCSN 2011},
doi = {10.1109/ICCSN.2011.6014716},
isbn = {9781612844855},
keywords = {Cloud computing,Security,Virtualization},
pages = {250--254},
publisher = {IEEE},
title = {{Virtualization-level security in cloud computing}},
url = {https://doi.org/10.1109{\%}2Ficcsn.2011.6014716},
year = {2011}
}
@article{Samalikova_2014,
abstract = {Currently used software process improvement methods such as the Capability Maturity Model Integration (CMMI) rely in their process assessments on information, which is gathered during interviews, in oral audit sessions, and from quality manuals and process standard reviews. Although valuable information about software processes can be gained in these assessments, the resulting data quality can be improved upon. This paper investigates the potential of process mining to support current software process assessment and improvement approaches. Based on an analysis of CMMI from a process mining perspective, particular CMMI model components are identified for which it is in principle possible to apply process mining techniques. Subsequently, criteria have been defined to select, with respect to these particular CMMI components, software processes for which process mining has an added value. These criteria have been applied in the selection of a particular 'minable' software process, that is, a change control process. Subsequently, the results of a case study from industrial practice, on the process mining of a change control board process, are used to illustrate that process mining can provide CMMI assessors with relevant information. This information reflects the actual or 'real' software processes in practice, and as such, it offers an excellent basis to support assessors in understanding the 'actual' software processes. Copyright {\textcopyright} 2014 John Wiley {\&} Sons, Ltd.},
author = {Samalikova, J. and Kusters, R. J. and Trienekens, J. J.M. and Weijters, A. J.M.M.},
doi = {10.1002/smr.1645},
issn = {20477481},
journal = {Journal of Software: Evolution and Process},
keywords = {information gathering,process mining,software process assessment},
number = {7},
pages = {714--728},
publisher = {Wiley},
title = {{Process mining support for Capability Maturity Model Integration-based software process assessment, in principle and in practice}},
url = {https://doi.org/10.1002{\%}2Fsmr.1645},
volume = {26},
year = {2014}
}
@article{Hackshaw_2008,
author = {Hackshaw, A.},
doi = {10.1183/09031936.00136408},
issn = {09031936},
journal = {European Respiratory Journal},
month = {nov},
number = {5},
pages = {1141--1143},
pmid = {18978131},
publisher = {European Respiratory Society ({\{}ERS{\}})},
title = {{Small studies: Strengths and limitations}},
url = {https://doi.org/10.1183{\%}2F09031936.00136408},
volume = {32},
year = {2008}
}
@inproceedings{Liao_2010,
abstract = {Revenue of traditional software enterprises are from software copyright licensing and software upgrades, maintenance and other services fees. As a rapidly growing operation model of software contrast to traditional perpetual-use license, SaaS (Software as a Service) softwares are subscripted by users from vendors. From views of business and technique, software product/service selection, software service classification, service pattern and charges, advantages and disadvantages of SaaS business model were analyzed in the paper. A conclusion is that SaaS business model could not only provide vendors more development opportunities but also contribute to SME's informationization. {\textcopyright} 2010 IEEE.},
author = {Liao, Hancheng},
booktitle = {ICIME 2010 - 2010 2nd IEEE International Conference on Information Management and Engineering},
doi = {10.1109/ICIME.2010.5477915},
isbn = {9781424452644},
keywords = {Business model,Saas,Software enterprise},
pages = {604--607},
publisher = {IEEE},
title = {{SaaS business model for software enterprise}},
url = {https://doi.org/10.1109{\%}2Ficime.2010.5477915},
volume = {2},
year = {2010}
}
@inproceedings{Lizhen_2010,
abstract = {Software as a Service (SaaS) is a new software delivery model. More and more companies are offering their software by following it. In contrast to earlier attempts of application service provisioning, the SaaS delivery model is focused on exploiting economies of scale by offering the same instance of an application to as many customers, i.e. supporting multi-tenants. As well understand, the delivery model of SaaS does not allow the SaaS vendor to develop and maintain a version of application code for each individual customer, SaaS applications have to be customizable to fulfill the varying functional and quality requirements of individual tenants. In this paper, we propose variability modeling based on metagraph support SaaS providers in managing the variability for configuration and customization of SaaS applications. This novel approach can systematically describe variability points and their relationships, and assure the quality of the configuration inputs made by the customers. {\textcopyright}2010 IEEE.},
author = {Cui, Lizhen and Wang, Haiyang and Lin, Jinjiao and Pu, Haitao},
booktitle = {ICPCA10 - 5th International Conference on Pervasive Computing and Applications},
doi = {10.1109/ICPCA.2010.5704108},
isbn = {9781424491421},
keywords = {Customization modeling,Metagraph,Software as a service},
pages = {255--260},
publisher = {IEEE},
title = {{Customization modeling based on metagraph for multi-tenant applications}},
url = {https://doi.org/10.1109{\%}2Ficpca.2010.5704108},
year = {2010}
}
@article{Matos_2016,
author = {Matos, Pablo and Lopes, Denivaldo and Abdelouahab, Zair},
doi = {10.17706/jsw.11.2.118-132},
issn = {1796-217X},
journal = {Journal of Software},
number = {2},
pages = {118--132},
publisher = {International Academy Publishing ({\{}IAP{\}})},
title = {{A Model Driven Engineering Approach to Support the Development of Secure Software as a Service}},
url = {https://doi.org/10.17706{\%}2Fjsw.11.2.118-132},
volume = {11},
year = {2016}
}
@article{Fiaidhi_2012,
abstract = {Learn about the articles in this special issue and how to enforce multitenancy in cloud computing environments. {\textcopyright} 2006 IEEE.},
author = {Fiaidhi, Jinan and Bojanova, Irena and Zhang, Jia and Zhang, Liang Jie},
doi = {10.1109/MITP.2012.6},
issn = {15209202},
journal = {IT Professional},
keywords = {Cloud computing,multitenancy},
month = {jan},
number = {1},
pages = {16--18},
publisher = {Institute of Electrical and Electronics Engineers ({\{}IEEE{\}})},
title = {{Enforcing multitenancy for cloud computing environments}},
url = {https://doi.org/10.1109{\%}2Fmitp.2012.6},
volume = {14},
year = {2012}
}
@inproceedings{Barga,
abstract = {Database recovery does not mask failures to applications and users. Recovery is needed that considers data, messages, and application components. Special cases have been studied, but clear principles for recovery guarantees in general multi-tier applications such as web-based e-services are missing. We develop a frame-work for recovery guarantees that masks almost all failures. The main concept is an interaction contract between two components, a pledge as to message and state persistence, and contract release. Contracts are composed into system-wide agreements so that a set of components is provably recoverable with exactly-once message delivery and execution, except perhaps for crash interrupted user input or output. Our implementation techniques reduce logging cost, allow effective log truncation, and provide independent recovery for critical server components. Interaction contracts form the basis for our Phoenix/COM project on persistent components. Our framework s utility is demonstrated with a case study of a web-based e-service.},
author = {Barga, Roger and Lomet, David and Weikum, Gerhard},
booktitle = {Proceedings - International Conference on Data Engineering},
doi = {10.1109/ICDE.2002.994773},
issn = {10844627},
pages = {543--554},
publisher = {{\{}IEEE{\}} Comput. Soc},
title = {{Recovery guarantees for general multi-tier applications}},
url = {https://doi.org/10.1109{\%}2Ficde.2002.994773},
year = {2002}
}
@article{Fleiss_1971,
abstract = {Introduced the statistic kappa to measure nominal scale agreement between a fixed pair of raters. Kappa was generalized to the case where each of a sample of 30 patients was rated on a nominal scale by the same number of psychiatrist raters (n = 6), but where the raters rating 1 s were not necessarily the same as those rating another. Large sample standard errors were derived. (PsycINFO Database Record (c) 2006 APA, all rights reserved). {\textcopyright} 1971 American Psychological Association.},
author = {Fleiss, Joseph L.},
doi = {10.1037/h0031619},
issn = {00332909},
journal = {Psychological Bulletin},
keywords = {nominal scale agreement measurement among many rat},
number = {5},
pages = {378--382},
publisher = {American Psychological Association ({\{}APA{\}})},
title = {{Measuring nominal scale agreement among many raters}},
url = {https://doi.org/10.1037{\%}2Fh0031619},
volume = {76},
year = {1971}
}
@incollection{Wu_2009,
abstract = {This paper proposes a novel replication architecture for stateful application servers that offers an integrated solution for fault-tolerance and load-distribution. Each application server replica is able to execute client requests and at the same time serves as backup for other replicas. We propose an effective load balancing mechanism that is only load-aware if a server is close to become overloaded. Furthermore, we present transparent reconfiguration algorithms that guarantee that each replica has the same number of backups in a dynamic environment where replicas can join or leave at any time. Our evaluation shows that our approach scales and distributes load across all servers even in heterogeneous environments while keeping the overhead for fault-tolerance and load-balancing small. {\textcopyright} 2009 Springer.},
author = {Wu, Huaigu and Kemme, Bettina},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-03869-3_20},
isbn = {3642038689},
issn = {03029743},
pages = {178--190},
publisher = {Springer Berlin Heidelberg},
title = {{A unified framework for load distribution and fault-tolerance of application servers}},
url = {https://doi.org/10.1007{\%}2F978-3-642-03869-3{\_}20},
volume = {5704 LNCS},
year = {2009}
}
@inproceedings{AlBar_2015,
abstract = {Cloud based Enterprise Resource Planning (ERP) systems have emerged as solutions to all the difficulties encountered by conventional ERP system. It provides flexibility, adaptability, and cost efficiency. It requires low upfront investments and can rapidly be deployed. Different private and public organization in developed countries have already realized the benefit of cloud ERP and implemented it to improve overall efficiency and quality of services. However, the adoption rate of cloud ERP in developing countries such as Saudi Arabia is still at the beginning stage with not many adopters. Side by side, not much research has been done to investigate the factors that influence the implementation of cloud ERP. So, it is essential to analyze the factors that affect the adoption of cloud ERP in Saudi Arabia. This paper will examine various factors that affect the adoption of cloud ERP in different private and public organization in Saudi Arabia by combining the two widely applied IT theories such as Technology-Organization-Environment (TOE) framework and Diffusion of Innovation theory. This paper will also analyze the performance of cloud base ERP with traditional ERP systems. Avenues for future research will also be suggested.},
author = {AlBar, Adnan Mustafa and Hoque, Md Rakibul},
booktitle = {2015 International Conference on Cloud Computing, ICCC 2015},
doi = {10.1109/CLOUDCOMP.2015.7149637},
isbn = {9781467366175},
keywords = {Cloud ERP,Saudi Arabia,TOE,diffusion of innovation},
publisher = {IEEE},
title = {{Determinants of Cloud ERP Adoption in Saudi Arabia: An Empirical Study}},
url = {https://doi.org/10.1109{\%}2Fcloudcomp.2015.7149637},
year = {2015}
}
@inproceedings{Wang_2015,
abstract = {With the proliferation of cloud computing, more and more functionally equivalent cloud services with varied quality of service (QoS) have emerged. Service selection for a SaaS (Software as a Service) has become a critical issue in cloud environments, and the transition from single-tenancy to multi-tenancy has made this issue more complicated. Existing approaches suffer from low efficiency in finding optimal solutions, especially in large-scale scenarios. As a result, QoS-aware service recommendation is becoming increasingly important for selecting services for a multi-tenant SaaS that simultaneously serves multiple clients with differentiated QoS requirements. In this paper, we propose a novel service recommendation approach that largely improves the efficiency of QoS-aware service selection for multi-tenant SaaS. Our approach significantly reduces the search space of the service selection problem by selecting representative candidate services based on the diversity and similarity in tenants' QoS requirements for the SaaS. The experimental results demonstrate the effectiveness and efficiency of our approach.},
author = {Wang, Yanchun and He, Qiang and Yang, Yun},
booktitle = {Proceedings - 2015 IEEE International Conference on Services Computing, SCC 2015},
doi = {10.1109/SCC.2015.33},
isbn = {9781467372817},
keywords = {Cloud computing,Clustering,Multi-Tenancy,Quality of Service,Service Recommendation,Service Selection,Similarity},
month = {jun},
pages = {178--185},
publisher = {IEEE},
title = {{QoS-Aware Service Recommendation for Multi-tenant SaaS on the Cloud}},
url = {https://doi.org/10.1109{\%}2Fscc.2015.33},
year = {2015}
}
@incollection{2012,
abstract = {Frailty is a syndrome that leads to practical harm in the lives of elders, since it is related to increased risk of dependency, falls, hospitalization, institutionalization, and death. The objective of this systematic review was to identify the socio-demographic, psycho-behavioral, health-related, nutritional, and lifestyle factors associated with frailty in the elderly. A total of 4,183 studies published from 2001 to 2013 were detected in the databases, and 182 complete articles were selected. After a comprehensive reading and application of selection criteria, 35 eligible articles remained for analysis. The main factors associated with frailty were: age, female gender, black race/color, schooling, income, cardiovascular diseases, number of comorbidities/diseases, functional incapacity, poor self-rated health, depressive symptoms, cognitive function, body mass index, smoking, and alcohol use. Knowledge of the complexity of determinants of frailty can assist the formulation of measures for prevention and early intervention, thereby contributing to better quality of life for the elderly.},
booktitle = {Virus Taxonomy},
doi = {10.1016/b978-0-12-384684-6.00082-3},
pages = {961--964},
publisher = {Elsevier},
title = {{Barnaviridae}},
url = {https://doi.org/10.1016{\%}2Fb978-0-12-384684-6.00082-3},
year = {2012}
}
@article{Makki_2018,
abstract = {Multi-tenant Software-as-a-Service (SaaS) applications share a single runtime instance among multiple customer organizations (tenants). To account for differences in tenant requirements, they have to support run-time customization. Run-time customization involves a wide range of software artifacts such as user interfaces, databases, web-services and business process or workflow definitions. This paper analyzes and compares the quality implications of different business process customization strategies for multi-tenant SaaS applications. The customization strategies are selected from an existing survey and the comparison criteria are derived from two essential characteristics of SaaS: it is (i) a business model aiming at “economies of scale” and (ii) a software delivery model with specific automation requirements. The comparative study shows that there is no single best strategy, and provides SaaS architects with support for making appropriate trade-off decisions when adopting a workflow customization strategy. As a by-product of this study, a number of points for future improvement and innovations in existing workflow technology are identified, which are exclusively relevant for multi-tenant SaaS applications.},
author = {Makki, Majid and {Van Landuyt}, Dimitri and Lagaisse, Bert and Joosen, Wouter},
doi = {10.1016/j.jss.2018.07.014},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Functional customization,Multi-tenancy,Software quality,Software-as-a-Service,Workflow automation},
pages = {423--438},
publisher = {Elsevier {\{}BV{\}}},
title = {{A comparative study of workflow customization strategies: Quality implications for multi-tenant SaaS}},
url = {https://doi.org/10.1016{\%}2Fj.jss.2018.07.014},
volume = {144},
year = {2018}
}
@inproceedings{Makki_2016,
abstract = {In cloud computing, multi-tenancy is concomitant with scalability in the sense that sharing a single deployment instance between many customer organizations (tenants) maximizes the utilization of the available resources. However, this also introduces the need to customize the application to the (slightly) different requirements of different tenants. In the context of workflow-based SaaS offerings, this is not straightforward to accomplish without compromising scalability or manageability of the offering. In this paper, we present a middleware for multi-tenant customization of workflows that enables software providers (i) to decrease coupling of multi-tenant customization concerns and workflow design for better manageability, (ii) to activate tenant preferences at runtime, but (iii) without incurring a scalability penalty. We validate a prototype implementation of our middleware in the context of a realistic SaaS application, evaluate its scalability, and extensively compare the results with related work confirming that the proposed middleware indeed supports customization of workflows in a significantly more scalable fashion.},
author = {Makki, Majid and {Van Landuyt}, Dimitri and Joosen, Wouter and Walraven, Stefan},
booktitle = {Proceedings of the ACM Symposium on Applied Computing},
doi = {10.1145/2851613.2851627},
isbn = {9781450337397},
keywords = {BPMN 2.0,Bpaas,Business process customization,Multi-tenancy,RedHat JBoss jBPM,Workflow-based SaaS},
pages = {432--439},
publisher = {{\{}ACM{\}} Press},
title = {{Scalable and manageable customization of workflows in multi-tenant SaaS offerings}},
url = {https://doi.org/10.1145{\%}2F2851613.2851627},
volume = {04-08-Apri},
year = {2016}
}
@inproceedings{Rafique_2015,
abstract = {Multi-tenant Software-as-a-Service (SaaS) applications are increasingly built on combinations of cloud storage technologies and providers in a so-called multi-cloud setup. One advantage is that such a setup helps satisfying the different - sometimes even contrasting - storage requirements of different customer organizations (tenants). In such a multi-cloud environment, the application data is distributed and replicated over multiple cloud storage systems, each differing profoundly in supported data models, development APIs, performance, scalability, availability, and durability. Despite the clear benefits, managing such a multi-cloud storage architecture in practice is non-trivial. Addressing this complexity in the application layer is far from ideal, as it inherently limits the flexibility with which continuously changing application-wide and tenant-specific storage requirements can be met. To alleviate this, we present a reusable data management middleware that (i) makes abstraction of multiple cloud storage technologies and thus also providers, (ii) follows a policy-driven approach for making data placement decisions, and (iii) provides tenant customization support, i.e.{\~{}}by allowing tenants to define storage configurations and data storage policies. We validate and evaluate our prototype implementation in the context of a realistic multi-cloud SaaS application. Our performance benchmark results indicate that the benefits of the proposed middleware can be achieved with acceptable overhead.},
author = {Rafique, Ansar and {Van Landuyt}, Dimitri and Lagaisse, Bert and Joosen, Wouter},
booktitle = {Proceedings - 2015 2nd IEEE/ACM International Symposium on Big Data Computing, BDC 2015},
doi = {10.1109/BDC.2015.39},
isbn = {9780769556963},
keywords = {Abstraction API for NoSQL,Data management middleware,Multi-cloud storage,Multi-tenant SaaS,Policy-driven},
pages = {78--84},
publisher = {IEEE},
title = {{Policy-Driven Data Management Middleware for Multi-cloud Storage in Multi-tenant SaaS}},
url = {https://doi.org/10.1109{\%}2Fbdc.2015.39},
year = {2016}
}
@incollection{S_nica_2011,
abstract = {This article describes the state of the art of cloud computing, focusing on its features and on the variety of services and applications that can be placed inside a cloud system, such as databases, processing, cloud gaming, storage and backup, etc.. This article also assesses and highlights the advantages and disadvantages of using cloud computing by companies and provides an overview of cloud computing trends and solutions currently available. {\textcopyright} 2011 Springer-Verlag.},
author = {S{\'{e}}nica, Nuno and Teixeira, Cl{\'{a}}udio and Pinto, Joaquim Sousa},
booktitle = {Communications in Computer and Information Science},
doi = {10.1007/978-3-642-24355-4_10},
isbn = {9783642243547},
issn = {18650929},
keywords = {Cloud Computing,DaaS,IaaS,PaaS,SaaS},
number = {PART 2},
pages = {91--100},
publisher = {Springer Berlin Heidelberg},
title = {{Cloud computing: A platform of services for services}},
url = {https://doi.org/10.1007{\%}2F978-3-642-24355-4{\_}10},
volume = {220 CCIS},
year = {2011}
}
@incollection{Schaffner_2011,
abstract = {For traditional data warehouses, mostly large and expensive server and storage systems are used. For small- and medium size companies, it is often too expensive to implement and run such systems. Given this situation, the SaaS model comes in handy, since these companies might opt to run their OLAP as a service. The challenge is then for the analytics service provider to minimize TCO by consolidating as many tenants onto as few servers as possible, a technique often referred to as multi-tenancy. In this article, we report on three different results on our research around building a cluster of multi-tenant main memory column databases for analytics as a service. For this purpose we ported SAP's in-memory column database TREX to run in the Amazon cloud. We evaluated the relation between data size of a tenant and number of queries per second and created a formula which allows us to estimate how many tenants with different sizes and request rates can be put on one instance for our main memory database. We discuss findings on cost/performance tradeoffs between reliably storing the data of a tenant on a single node using a highly-available network attached storage, such as Amazon EBS, vs. replication of tenant data to a secondary node where the data resides on less resilient storage. We also describe a mechanism to provide support for historical queries across older snapshots of tenant data which is lazy-loaded from Amazon's S3 near-line archiving storage and cached on the local VM disks. {\textcopyright} Springer-Verlag Berlin Heidelberg 2011.},
author = {Schaffner, Jan and Eckart, Benjamin and Schwarz, Christian and Brunnert, Jan and Jacobs, Dean and Zeier, Alexander},
booktitle = {Lecture Notes in Business Information Processing},
doi = {10.1007/978-3-642-19294-4_11},
isbn = {9783642192937},
issn = {18651348},
pages = {257--282},
publisher = {Springer Berlin Heidelberg},
title = {{Towards analytics-as-a-service using an in-memory column database}},
url = {https://doi.org/10.1007{\%}2F978-3-642-19294-4{\_}11},
volume = {74 LNBIP},
year = {2011}
}
@incollection{Zhang_2013,
abstract = {SaaS (Software as a Service) is becoming a new direction of software industry in the new cloud computing era. SaaS applications and services must be able to react in a fast and flexible way to ever changing business situations, policies and products. In order to satisfy policy changes and other personalized requirements from different customers (ortenants), business rule management of SaaS needs to support multi-tenancy and online customization. This paper proposed a business rule engine based framework for managing and decoupling of business logic rule from SaaS application. It takes on-demand business rule management as an independent and online maintainable part of SaaS application, which could allow tenants to safely upgrade, delete or create rules during runtime. Finally, a practical case study in Attendance Management System (AMS) evaluates the effectiveness of the framework. {\textcopyright} Springer International Publishing Switzerland 2013.},
author = {Zhang, Xiuwei and He, Keqing and Wang, Jian and Wang, Chong and Li, Zheng},
booktitle = {Communications in Computer and Information Science},
doi = {10.1007/978-3-319-04519-1_9},
isbn = {9783319045184},
issn = {18650929},
keywords = {Business Rule Engine,Decision Table,Personalized Customization,SaaS},
pages = {135--150},
publisher = {Springer International Publishing},
title = {{On-Demand Business Rule Management Framework for SaaS Application}},
url = {https://doi.org/10.1007{\%}2F978-3-319-04519-1{\_}9},
volume = {367 CCIS},
year = {2013}
}
@incollection{Luoma_2013,
abstract = {The paper focuses the attention to different business models and intended strategic aims of the firms providing Software-as-a-Service (SaaS). SaaS vendors have been said to challenge the business practices of the existing vendors providing proprietary or customer-specific solutions. The current studies on the topic have shown that SaaS is different from preceding software business models, but consider and emphasize SaaS business model as an invariable configuration. This case study compares two SaaS firms with different backgrounds and reveals characteristics of two very different SaaS business models. The findings indicate that along with SaaS vendors providing only standard software applications and focusing on cost efficiency, there are vendors who provide more specialized software applications and complement the SaaS offering with services required by larger customers. {\textcopyright} 2013 Springer International Publishing.},
author = {Luoma, Eetu},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-02414-1_1},
isbn = {9783319024134},
issn = {03029743},
keywords = {Business Models,Software-as-a-Service,Strategies},
pages = {1--15},
publisher = {Springer International Publishing},
title = {{Examining business models of software-as-a-service firms}},
url = {https://doi.org/10.1007{\%}2F978-3-319-02414-1{\_}1},
volume = {8193 LNCS},
year = {2013}
}
@inproceedings{Azeez_2010,
abstract = {Enterprise IT infrastructure incurs many costs ranging from hardware costs and software licenses/maintenance costs to the costs of monitoring, managing, and maintaining IT infrastructure. The recent advent of cloud computing offers some tangible prospects of reducing some of those costs; however, abstractions provided by cloud computing are often inadequate to provide major cost savings across the IT infrastructure life-cycle. Multi-tenancy, which allows a single application to emulate multiple application instances, has been proposed as a solution to this problem. By sharing one application across many tenants, multi-tenancy attempts to replace many small application instances with one or few large instances thus bringing down the overall cost of IT infrastructure. In this paper, we present an architecture for achieving multi-tenancy at the SOA level, which enables users to run their services and other SOA artifacts in a multi-tenant SOA framework as well as provides an environment to build multi-tenant applications. We discuss architecture, design decisions, and problems encountered, together with potential solutions when applicable. Primary contributions of this paper are motivating multitenancy, and the design and implementation of a multitenant SOA platform which allows users to run their current applications in a multi-tenant environment with minimal or no modifications. {\textcopyright} 2010 IEEE.},
author = {Azeez, Afkham and Perera, Srinath and Gamage, Dimuthu and Linton, Ruwan and Siriwardana, Prabath and Leelaratne, Dimuthu and Weerawarana, Sanjiva and Fremantle, Paul},
booktitle = {Proceedings - 2010 IEEE 3rd International Conference on Cloud Computing, CLOUD 2010},
doi = {10.1109/CLOUD.2010.50},
isbn = {9780769541303},
keywords = {Cloud computing,Multi-tenancy,PaaS,SOA,SaaS},
month = {jul},
pages = {458--465},
publisher = {IEEE},
title = {{Multi-tenant SOA middleware for cloud computing}},
url = {https://doi.org/10.1109{\%}2Fcloud.2010.50},
year = {2010}
}
@article{Damanpour_2001,
abstract = {While many researchers have fruitfully explored the patterns of adoption of product and process innovations across industries, few have studied these same patterns within individual firms. In this study we address this issue, examining the dynamics that govern the adoption of product and process innovations at the firm level over time. We examine questions such as: Which type of innovation is more readily adopted? Does the adoption of one type of innovation lead or lag the adoption of the other type? And, would the pattern of adoption of innovation types have an effect on organizational performance? Using data on the innovations introduced between 1982 and 1993 by a sample of 101 commercial banks in the United States, we find that: (1) product innovations are adopted at a greater rate and speed than process innovations; (2) a product-process pattern of adoption is more likely than a process-product pattern; (3) the adoption of product innovations is positively associated with the adoption of process innovations; and (4) high-performance banks adopt product and process innovations more evenly than low-performance banks.},
author = {Damanpour, Fariborz and Gopalakrishnan, Shanthi},
doi = {10.1111/1467-6486.00227},
issn = {00222380},
journal = {Journal of Management Studies},
month = {jan},
number = {1},
pages = {45--65},
publisher = {Wiley},
title = {{The dynamics of the adoption of product and process innovations in organizations}},
url = {https://doi.org/10.1111{\%}2F1467-6486.00227},
volume = {38},
year = {2001}
}
@article{Zhang_2011,
abstract = {SaaS (Software as a Service) application mode came into being along with the expansion and convenient of the network platform, and its core lies in Multi-Tenant (multi-tenant) application. Multi-Tenant Application under the SaaS model makes software applications efficient and convenient, more importantly, tenants can greatly reduce their software development costs, hardware acquisition costs, training costs, and upgrade and maintenance costs by using the application system, which virtually eased business cost pressures and makes more focus on business development. This paper elaborates the personalized needs of tenants for Multi-Tenant Applications mainly from the three aspects: data, function, and interface. With the configuration of data, function and interface, Multi-tenant applications will become better. {\textcopyright} 2011 Trans Tech Publications.},
author = {Zhang, Sheng Wen and Wang, Xuan Peng},
doi = {10.4028/www.scientific.net/AMR.219-220.1182},
isbn = {9783037850817},
issn = {10226680},
journal = {Advanced Materials Research},
keywords = {Multi-Tenant,Personalized Configuration,SaaS},
month = {mar},
pages = {1182--1185},
publisher = {Trans Tech Publications, Ltd.},
title = {{Configuration of multi-tenant applications}},
url = {https://doi.org/10.4028{\%}2Fwww.scientific.net{\%}2Famr.219-220.1182},
volume = {219-220},
year = {2011}
}
@incollection{Krebs_2013,
abstract = {Cloud environments reduce data center operating costs through resource sharing and economies of scale. Infrastructure-as-a-Service is one example that leverages virtualization to share infrastructure resources. However, virtualization is often insufficient to provide Software-as-a-Service applications due to the need to replicate the operating system, middleware and application components for each customer. To overcome this problem, multi-tenancy has emerged as an architectural style that allows to share a single Web application instance among multiple independent customers, thereby significantly improving the efficiency of Software-as-a-Service offerings. A number of platforms are available today that support the development and hosting of multi-tenant applications by encapsulating multi-tenancy specific functionality. Although a lack of performance guarantees is one of the major obstacles to the adoption of cloud computing, in general, and multi-tenant applications, in particular, these kinds of applications and platforms have so far not been in the focus of the performance and benchmarking community. In this paper, we present an extended version of an existing and widely accepted application benchmark adding support for multi-tenant platform features. The benchmark is focused on evaluating the maximum throughput and the amount of tenants that can be served by a platform. We present a case study comparing virtualization and multi-tenancy. The results demonstrate the practical usability of the proposed benchmark in evaluating multi-tenant platforms and gives insights that help to decide for one sharing approach. {\textcopyright} 2013 Springer-Verlag Berlin Heidelberg.},
author = {Krebs, Rouven and Wert, Alexander and Kounev, Samuel},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-39200-9_36},
isbn = {9783642391996},
issn = {03029743},
keywords = {Benchmark,Multi-tenancy,Platform,SaaS},
pages = {424--438},
publisher = {Springer Berlin Heidelberg},
title = {{Multi-tenancy performance benchmark for web application platforms}},
url = {https://doi.org/10.1007{\%}2F978-3-642-39200-9{\_}36},
volume = {7977 LNCS},
year = {2013}
}
@inproceedings{Lehrig_2014,
abstract = {Software architects plan, model, and analyze architectures of large software like Software-as-a-Service (SaaS) applications. The scalability and elasticity of these applications is crucially impacted by architects' early decision for an architectural style. However, whether this decision fostered scalability and elasticity can currently only be tested with the final application deployed in the target cloud computing environment. This process leads to the high risk of unsatisfying scalability/elasticity and expensive re-implementations. To tackle this problem, we propose scalability/elasticity analyses using the architectural template (AT) language, a constraint language to specify templates (based on architectural styles) of component models for early quality analyses. This work-in-progress paper provides a first formalization of the AT language and investigates its applicability to analyze the scalability and elasticity of SaaS applications at early design-time by using a 3-tier example scenario. Our results indicate the language is applicable to such 3-tier scenarios.},
author = {Lehrig, Sebastian},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/2649563.2649573},
isbn = {9781450330596},
keywords = {Analysis,Architectural templates,Cloud computing},
publisher = {{\{}ACM{\}} Press},
title = {{Applying architectural templates for design-time scalability and elasticity analyses of SaaS applications}},
url = {https://doi.org/10.1145{\%}2F2649563.2649573},
volume = {2014-March},
year = {2014}
}
@inproceedings{Bhardwaj_2015,
abstract = {Cloud computing is an encouraging paradigm for both consumers and providers in various scopes of endeavor. Software-as-a-Service (SaaS) is a way of conveying applications over the Internet-as a service, and it is one of the most important computing services in Cloud computing. Cloud computing has become a major medium for SaaS providers to host their applications so as to meet the demand of scalability of SaaS components. Delivering the SaaS through Cloud has a number of benefits, including resilient offerings and increased providers profit. In this paper, we have proposed a mathematical model for SaaS Placement Problem (SPP) to minimize the total cost of deployment in Cloud. This paper presents a novel framework for obtaining sub-optimal solution to SPP using Particle Swarm Optimization (PSO). In house simulator has been used to compare the performance of the proposed approach with Greedy heuristic.},
author = {Bhardwaj, Sumit and Sahoo, Bibhudatta},
booktitle = {International Conference on Computing, Communication and Automation, ICCCA 2015},
doi = {10.1109/CCAA.2015.7148462},
isbn = {9781479988907},
pages = {686--690},
publisher = {IEEE},
title = {{A Particle Swarm Optimization approach for cost effective SaaS placement on cloud}},
url = {https://doi.org/10.1109{\%}2Fccaa.2015.7148462},
year = {2015}
}
@inproceedings{Chen_2010,
abstract = {Systematic Literature Reviews and Systematic Mapping Studies are relatively new forms of secondary studies in software engineering. Identifying relevant papers from various Electronic Data Sources (EDS) is one of the key activities of conducting these kinds of studies. Hence, the selection of EDS for searching the potentially relevant papers is an important decision, which can affect a study's coverage of relevant papers. Researchers usually select EDS mainly based on personal knowledge, experience, and preferences and/or recommendations by other researchers. We believe that building an evidence-based understanding of EDS can enable researchers to make more informed decisions about the selection of EDS. This paper reports our initial effort towards this end. We propose an initial set of metrics for characterizing the EDS from the perspective of the needs of secondary studies. We explain the usage and benefits of the proposed metrics using the data gathered from two secondary studies. We also tried to synthesize the data from the two studies and that from literature to provide initial evidence-based heuristics for EDS selection. Evidence-Based Software Engineering, systematic literature review; systematic mapping study; primary study selection, search engine selection, database selection},
author = {Chen, Lianipng and Babar, Muhammad Ali and Zhang, He},
doi = {10.14236/ewic/ease2010.17},
publisher = {{\{}BCS{\}} Learning {\&} Development},
title = {{Towards an Evidence-Based Understanding of Electronic Data Sources}},
url = {https://doi.org/10.14236{\%}2Fewic{\%}2Fease2010.17},
year = {2010}
}
@book{Comrey_2013,
abstract = {The goal of this book is to foster a basic understanding of factor analytic techniques so that readers can use them in their own research and critically evaluate their use by other researchers. Both the underlying theory and correct application are emphasized. The theory is presented through the mathematical basis of the most common factor analytic models and several methods used in factor analysis. On the application side, considerable attention is given to the extraction problem, the rotation problem, and the interpretation of factor analytic results. Hence, readers are given a background of understanding in the the theory underlying factor analysis and then taken through the steps in executing a proper analysis -- from the initial problem of design through choice of correlation coefficient, factor extraction, factor rotation, factor interpretation, and writing up results. This revised edition includes introductions to newer methods -- such as confirmatory factor analysis and structural equation modeling -- that have revolutionized factor analysis in recent years. To help remove some of the mystery underlying these newer, more complex methods, the introductory examples utilize EQS and LISREL. Updated material relating to the validation of the Comrey Personality Scales also has been added. Finally, program disks for running factor analyses on either an IBM-compatible PC or a mainframe with FORTRAN capabilities are available. The intended audience for this volume includes talented but mathematically unsophisticated advanced undergraduates, graduate students, and research workers seeking to acquire a basic understanding of the principles supporting factor analysis. Disks are available in 5.25" and 3.5" formats for both mainframe programs written in Fortran and IBM PCs and compatibles running a math co-processor.},
author = {Comrey, Andrew L.},
booktitle = {A First Course in Factor Analysis},
doi = {10.4324/9781315827506},
month = {nov},
publisher = {Psychology Press},
title = {{A First Course in Factor Analysis}},
url = {https://doi.org/10.4324{\%}2F9781315827506},
year = {2013}
}
@article{Azouzi_2018,
abstract = {Cloud computing has a model for utility computing that promotes on-demand scalability, flexible application deployment and reuse. It also promotes multi-tenancy for efficient resource utilization by sharing hardware and software infrastructure among multiple userS. Multi-tenant applications running on a cloud infrastructure are provided to clients as software-as-a-Service (saas) over the network. In this context, software product lines (sPL) promote reusable application development for product familieS. On the other hand, business processes of most organizations are automated to support the advanced workflow management Systems. In the context of the e-learning applications, it is perfectly suitable to manage the e-learning application by automating the e-learning process to effectively manage multiple tenants' (institutions/teachers) ever changing requirementS. As the available LMss such as Moodle, Claroline and WebCT do not satisfy all the needs of different institutions/teachers, their demand is to develop their own Systems. Cloud-based applications can be modeled as Business Process-as-a-Service (BPaas) families similar to the sPL productS. As sPL development techniques rely on feature models to describe the commonality and variability of family member applications, such techniques can be used to model variability in BPaaS. This paper proposes a generative multi-tenant e-learning process, that utilizes Business Process Feature Model (BPFM) approach which is a combination of sPL approach and BPM approach for modeling the reconfigurable e-learning process with multi-tenancy capabilities in cloud computing (BPaas).},
author = {Azouzi, Sameh and Brahmi, Zaki and Ghannouchi, Sonia Ayachi},
doi = {10.1016/j.procS.2018.07.295},
issn = {18770509},
journal = {Procedia Computer Science},
keywords = {BPM,E-learning,SPL,cloud computing,customization,multi-tenant,variability},
pages = {606--615},
publisher = {Elsevier {\{}BV{\}}},
title = {{Customization of multi-tenant learning process as a Service with Business Process Feature Model}},
url = {https://doi.org/10.1016{\%}2Fj.procs.2018.07.295},
volume = {126},
year = {2018}
}
@incollection{Luan_2009,
abstract = {With the gradually mature of SOA and the rapid development of Internet, SaaS has become a popular software service mode. The customized action of SaaS is usually subject to internal and external dependency relationships. This paper first introduces a method for modeling customization process based on Temporal Logic of Actions, and then proposes a verification algorithm to assure that each step in customization will not cause unpredictable influence on system and follow the related rules defined by SaaS provider. {\textcopyright} 2009 Springer-Verlag.},
author = {Luan, Shuai and Shi, Yuliang and Wang, Haiyang},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-05250-7_36},
isbn = {3642052495},
issn = {03029743},
keywords = {Customization,SaaS,TLA,Verification},
pages = {337--344},
publisher = {Springer Berlin Heidelberg},
title = {{A mechanism of modeling and verification for SaaS customization based on TLA}},
url = {https://doi.org/10.1007{\%}2F978-3-642-05250-7{\_}36},
volume = {5854 LNCS},
year = {2009}
}
@inproceedings{Jalali_2012,
abstract = {Systematic studies of the literature can be done in different ways. In particular, different guidelines propose different first steps in their recommendations, e.g. start with search strings in different databases or start with the reference lists of a starting set of papers. In software engineering, the main recommended first step is using search strings in a number of databases, while in information systems, snowballing has been recommended as the first step. This paper compares the two different search approaches for conducting literature review studies. The comparison is conducted by searching for articles addressing "Agile practices in global software engineering". The focus of the paper is on evaluating the two different search approaches. Despite the differences in the included papers, the conclusions and the patterns found in both studies are quite similar. The strengths and weaknesses of each first step are discussed separately and in comparison with each other. It is concluded that none of the first steps is outperforming the other, and the choice of guideline to follow, and hence the first step, may be context-specific, i.e. depending on the area of study. Copyright 2012 ACM.},
author = {Jalali, Samireh and Wohlin, Claes},
booktitle = {International Symposium on Empirical Software Engineering and Measurement},
doi = {10.1145/2372251.2372257},
issn = {19493770},
keywords = {Agile practices,Global software engineering,Snowballing,Systematic literature review},
pages = {29--38},
publisher = {{\{}ACM{\}} Press},
title = {{Systematic literature studies: Database searches vs. backward snowballing}},
url = {https://doi.org/10.1145{\%}2F2372251.2372257},
year = {2012}
}
@inproceedings{Ruehl_2011,
abstract = {Software-as-a-Service (SaaS) is a new delivery model, whose basic idea is to provide applications to the customer on demand over the Internet. In contrast to older approaches SaaS promotes multi-tenancy as a tool to exploit economies-of- scale. This means that a single application instance serves multiple customers. However, the flexibility of an application to be adapted to individual tenant's needs is a major requirement for the acceptance and success of such an application. Thus, the issue of flexibility of multi-tenancy applications is discussed in this paper. Furthermore, the goal of this paper is to analyze how Software Product Lines (SPL) can be utilized to create highly customizable SaaS applications. In order to achieve this goal a vision of an architectural model is presented. This model is supposed to support the creation of such applications. Copyright {\textcopyright} 2011 ACM.},
author = {Ruehl, Stefan T. and Andelfinger, Urs},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/2019136.2019154},
isbn = {9781450307895},
keywords = {SPL,Saas,Software product lines,Software-as-a-service},
publisher = {{\{}ACM{\}} Press},
title = {{Applying software product lines to create customizable software-as-a- service applications}},
url = {https://doi.org/10.1145{\%}2F2019136.2019154},
year = {2011}
}
@book{2013,
author = {Balasubramanyam, Suchitra Ravi},
doi = {10.1007/978-1-4471-5031-2},
editor = {Mahmood, Zaigham and Saeed, Saqib},
isbn = {9781447150312},
keywords = {cloud provision,software life cycle,wrapper model},
number = {350},
publisher = {Springer London},
title = {{Cloud-Based Development Using Classic}},
url = {https://doi.org/10.1007{\%}2F978-1-4471-5031-2},
year = {2013}
}
@article{Tsai_2016,
abstract = {Multi-tenancy architecture (MTA) is often used in Software-as-a-Service (SaaS) and the central idea is that multiple tenant applications can be developed using components stored in the SaaS infrastructure. Recently, MTA has been extended to allow a tenant application to have its own sub-tenants, where the tenant application acts like a SaaS infrastructure. In other words, MTA is extended to STA (Sub-Tenancy Architecture). In STA, each tenant application needs not only to develop its own functionalities, but also to prepare an infrastructure to allow its sub-tenants to develop customized applications. This paper applies Crowdsourcing as the core to STA component in the development life cycle. In addition, to discovering adequate fit tenant developers or components to help build and compose new components, dynamic and static ranking models are proposed. Furthermore, rank computation architecture is presented to deal with the case when the number of tenants and components becomes huge. Finally, experiments are performed to demonstrate that the ranking models and the rank computation architecture work as design.},
author = {Tsai, Wei-Tek and Zhong, Peide and Chen, Yinong},
doi = {10.1016/j.trit.2016.08.002},
issn = {24682322},
journal = {CAAI Transactions on Intelligence Technology},
number = {2},
pages = {150--161},
publisher = {Elsevier {\{}BV{\}}},
title = {{Tenant-centric Sub-Tenancy Architecture in Software-as-a-Service}},
url = {https://doi.org/10.1016{\%}2Fj.trit.2016.08.002},
volume = {1},
year = {2016}
}
@inproceedings{Kabbedijk_2012,
abstract = {Within the business software domain it is crucial for a software vendor to comply to different customer requirements. Traditionally this could be done by offering different products to different customers, but because multi-tenant business software deployments use one software product to serve all customers, this is no longer possible. Software vendors have to make sure that one instance of a software product is variable enough to support all different requirements from all different customers. This ability is defined as tenant-based variability. Within this paper a conceptual model is presented, explaining the role software patterns play in solving variability implementation problems in multi-tenant business software. Different important aspects of patterns are explained, like forces and consequences and are linked to concepts in the problem domain. The paper suggests that variability patterns play a large role in addressing variability in multitenant business software and provide a valuable vocabulary for researching, reporting, thinking and communicating about variability solutions in online software products. Copyright 2012 ACM.},
author = {Kabbedijk, J. and Jansen, S.},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/2361999.2362029},
isbn = {9781450315685},
keywords = {Multi-tenancy,Online business software,SaaS,Software patterns,Variability},
pages = {143--146},
publisher = {{\{}ACM{\}} Press},
title = {{The role of variability patterns in multi-tenant business software}},
url = {https://doi.org/10.1145{\%}2F2361999.2362029},
year = {2012}
}
@inproceedings{Sun_2011,
abstract = {Cloud computing technology is put on more and more attentions for decreasing the IT budget of small and median enterprises. But the heterogeneous, distributed and dynamic properties of current SaaS software hamper the creations of one universal SaaS platform to securely integrate the often-used software for the enterprise. In this paper, we propose our public SaaS platform based on SOA architecture, which aims integrate the manufacture business software and with one universal entrance portal for small and median enterprises to online use software as OA, E-Mail, ERP, SCP and etc. The platform adopts cloud service bus to compatibly support the SOA based software and easily combine the primitive mechanisms of SaaS software as data access, user control, authority overlap and etc. The openness of SOA will permit more software can be integrated on the cloud computing platform without modification. The architecture is verified on our CN-online SaaS platform which is providing the commercial service for Chinese enterprises. {\textcopyright} 2011 IEEE.},
author = {Sun, Aobing and Zhou, Jialin and Ji, Tongkai and Yue, Qiang},
booktitle = {Proceedings - 2011 International Conference on Cloud and Service Computing, CSC 2011},
doi = {10.1109/CSC.2011.6138539},
isbn = {9781457716362},
keywords = {Cloud Service Bus,SaaS,Software Integration},
pages = {309--314},
publisher = {IEEE},
title = {{CSB: Cloud service bus based public SaaS platform for small and median enterprises}},
url = {https://doi.org/10.1109{\%}2Fcsc.2011.6138539},
year = {2011}
}
@inproceedings{Wang_2008,
abstract = {Multi-tenancy is one of key characteristics of the service oriented computing especially for Software as a Service (SaaS) to leverage economy of scale to drive down total cost of ownership for both service consumer and provider. This paper aims to study the technologies to build a cost-effective, secure and scalable multi-tenant infrastructure, especially in data tier. We first explore all the key implementation patterns of data tier multi-tenancy on aspects of isolation, security, customization {\&} scalability etc. Furthermore, we mainly evaluate the performance of these design patterns on aspects of isolation and security via a series of experiments and simulations. This paper also identifies the potential performance bottlenecks, summarizes corresponding optimization approaches and best implementation practices for different multi-tenant business usage models. {\textcopyright} 2008 IEEE.},
author = {Wang, Zhi Hu and Guo, Chang Jie and Gao, Bo and Sun, Wei and Zhang, Zhen and An, Wen Hao},
booktitle = {IEEE International Conference on e-Business Engineering, ICEBE'08 - Workshops: AiR'08, EM2I'08, SOAIC'08, SOKM'08, BIMA'08, DKEEE'08},
doi = {10.1109/ICEBE.2008.60},
isbn = {9780769533957},
pages = {94--101},
publisher = {IEEE},
title = {{A study and performance evaluation of the multi-tenant data tier design patterns for service oriented computing}},
url = {https://doi.org/10.1109{\%}2Ficebe.2008.60},
year = {2008}
}
@inproceedings{Tang_2010,
abstract = {Multi-tenancy supporting becomes a basic characteristic of Software-as-a-Service (SaaS) operation. In multi-tenancy environment, tenant placement problem is critical for balance the database server workload. In this paper, we discuss how the cross-tenant data access affects the workload and how to optimize resource utilization in tenant placement process. This paper comes up with a SaaS tenant data lifecycle framework to capture the placement determinant factors. According to the framework, a formal placement algorithm is presented based on a formal model of tenant data and a resource estimation method. As a result of the formalization, several suggestions for data center host to minimize the workload of database servers are presented. {\textcopyright} 2010 IEEE.},
author = {Tang, Kai and Jiang, Zhong Bo and Sun, Wei and Zhang, Xin and Dong, Wei Shan},
booktitle = {Proceedings - IEEE International Conference on E-Business Engineering, ICEBE 2010},
doi = {10.1109/ICEBE.2010.67},
isbn = {9780769542270},
keywords = {Cross-tenant data access,Multi-tenancy,Resource estimation,Software-as-a-Service,Tenant placement},
month = {nov},
pages = {479--483},
publisher = {IEEE},
title = {{Research on tenant placement based on business relations}},
url = {https://doi.org/10.1109{\%}2Ficebe.2010.67},
year = {2010}
}
@article{Haag_2014,
abstract = {This paper takes a scientometric research approach and undertakes a categorized literature analysis to provide a comprehensive and systemic overview of the current status of research on cloud services and their adoption by organizations. We review 52 journals and proceedings of the information systems field to identify and systematically categorize 36 articles on the topic. Our content-based analysis shows that the scarce theoretical and empirical work on organizational cloud service adoption has developed and explored factors that directly or indirectly drive organizations to adopt or inhibit them from adopting cloud services from different perspectives and dimensions. We classify these driving and inhibiting determinants based on the technology organization environment framework Tornatzky and Fleischer (The process of technological innovation. Lexington Books, Lexington, 1990) to provide a structured summary. Based on our analysis and recent cloud evolution in practice, we identify five new research areas, including theoretical and practical phenomena describing determinants and consequences of cloud service adoption in organizations: information technology (IT) related public threat appeals, trust in the technology versus trust in the vendor, bring your own cloud, transformation of organizational identity, and intelligent clusters of IT initiatives. For each phenomenon we provide relevant research questions, potential theoretical foundations, and methodologies to guide future research endeavors in this field.},
author = {Haag, Steffi and Eckhardt, Andreas},
doi = {10.1007/s11573-014-0716-6},
issn = {18618928},
journal = {Journal of Business Economics},
keywords = {Cloud computing,Cloud service,Cloud service adoption,Literature review,Scientometrics},
number = {3},
pages = {407--440},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Organizational cloud service adoption: a scientometric and content-based literature analysis}},
url = {https://doi.org/10.1007{\%}2Fs11573-014-0716-6},
volume = {84},
year = {2014}
}
@inproceedings{Wang_2009,
abstract = {SaaS (Software as a Service), the new software application pattern has got wide attraction in both industry and academia. Multi-tenancy supporting is a big advantage of SaaS. However, current SaaS models and design/execution approaches can not efficiently support simultaneous invocation by large amount of users of different tenants. To solve the problem, this paper proposes a new SaaS service execution mechanism with multi-tenancy support. The mechanism supports effective concurrent execution through a new state transition based SaaS model with corresponding SaaS service event model and message passing based execution way. SaaS service setup, message route and the implementation of the mechanism are also addressed. {\textcopyright}2009 IEEE.},
author = {Wang, Deshuai and Zhang, Yichuan and Zhang, Bin and Liu, Ying},
booktitle = {2009 1st International Conference on Information Science and Engineering, ICISE 2009},
doi = {10.1109/ICISE.2009.894},
isbn = {9780769538877},
keywords = {Execution mechnism,Interaction,Multi-tenancy,SaaS,SaaS service},
pages = {336--339},
publisher = {IEEE},
title = {{Research and implementation of a new SaaS service execution mechanism with multi-tenancy support}},
url = {https://doi.org/10.1109{\%}2Ficise.2009.894},
year = {2009}
}
@article{Liu_2019,
abstract = {Mass customization (MC), which is popular in the fashion industry, is proposed to provide customers with products with a high degree of adaptation and a price comparable to a mass product. Both the manufacturer and customers can benefit from it. However, how to properly apply the MC strategy when facing challenges in the real world needs more exploration. In this paper, we first review the related operations research literature. Then, we conduct a real case study of a fashion company adopting MC in China. We highlight the challenges and critical successful factors for implementing apparel MC. We identify important technologies in fashion MC systems. We also propose future research opportunities on MC operations in the fashion industry.},
author = {Liu, Na and Chow, Pui Sze and Zhao, Hongshan},
doi = {10.1007/s10479-019-03149-7},
issn = {15729338},
journal = {Annals of Operations Research},
keywords = {Case study,Fashion industry,Literature review,Mass customization,Personalization},
month = {mar},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Challenges and critical successful factors for apparel mass customization operations: recent development and case study}},
url = {https://doi.org/10.1007{\%}2Fs10479-019-03149-7},
year = {2019}
}
@incollection{Tsai_2007,
abstract = {As service providers strive to improve the quality and efficiency of their IT (information technology) management services, the need to adopt a standard set of tools and processes becomes increasingly important. Deploying multitenant capable tools is a key part of this standardization, since a single instance can be used to manage multiple customer environments, and multi-tenant tools have the potential to significantly reduce service-delivery costs. However, most tools are not designed for multi-tenancy, and providing this support requires extensive re-design and re-implementation. In this paper, we explore the use of virtualization technology to enable multi-tenancy for systems and network management tools with minimal, if any, changes to the tool software. We demonstrate our design techniques by creating a multi-tenant version of a widely-used open source network management system. We perform a number of detailed profiling experiments to measure the resource requirements in the virtual environments, and also compare the scalability of two multi-tenant realizations using different virtualization approaches. We show that our design can support roughly 20 customers with a single tool instance, and leads to a scalability increase of 60-90{\%} over a traditional design in which each customer is assigned to a single virtual machine. {\textcopyright} IFIP International Federation for Information Processing 2007.},
author = {Tsai, Chang Hao and Ruan, Yaoping and Sahu, Sambit and Shaikh, Anees and Shin, Kang G.},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-540-75694-1_15},
isbn = {9783540756934},
issn = {16113349},
pages = {171--182},
publisher = {Springer Berlin Heidelberg},
title = {{Virtualization-based techniques for enabling multi-tenant management tools}},
url = {https://doi.org/10.1007{\%}2F978-3-540-75694-1{\_}15},
volume = {4785 LNCS},
year = {2007}
}
@article{Benaroch_2012,
abstract = {We study contract design choices affecting the complexity of outsourcing contracts, defined by the number and stringency of contract provisions employed, using 262 software development outsourcing contracts from a large European bank. Unlike extant research, we study the complexity of specific contract functions – safeguarding, coordination, and contingency adaptation – in both fixed-price and time-and-material contracts. The drivers of complexity we examine include not only transactional attributes, but also the “learning to contract” effect of prior experiences and of reliance on standard contracts. Moreover, unlike past studies, we also consider the high ex-ante contracting costs faced in some IT contexts, on the premise that design choices seek to minimize the overall transaction costs due to ex-ante contract planning and drafting and to ex-post opportunism and inefficiencies. Our results offer novel insights about specific contract functions that are masked by aggregate contract complexity measures used in past studies, and about pricing-based differences that are masked in mixed contract samples. Additionally, our results about the impact of transactional attributes and of the “learning to contract” effect (due to prior interaction and use of standard contracts) confirm the presence of tradeoffs between ex-ante and ex-post transaction costs as well as explain conflicting findings of past studies.},
author = {Benaroch, Michel and Lichtenstein, Yossi and Wyss, Simon},
doi = {10.2139/ssrn.2137174},
journal = {SSRN Electronic Journal},
publisher = {Elsevier {\{}BV{\}}},
title = {{Contract Design Choices in IT Outsourcing: New Lessons from Software Development Outsourcing Contracts}},
url = {https://doi.org/10.2139{\%}2Fssrn.2137174},
year = {2012}
}
@article{Labes_2016,
abstract = {The acceleration of technical change in the fast moving electronics market increases the uncertainty and risk for IT providers. Influenced by new IT provisioning concepts such as cloud computing, providers are looking to identify stable guidelines and success factors within existing and new business models. The authors have conducted an intensive analysis of the business model characteristics of 45 providers in the cloud market that are critical to success. A cloud business model framework with 105 characteristics was used to systemize the business models, and the data was analyzed statistically in regard to indicators for success. The results revealed 42 success-related business model characteristics, and a cluster analysis led to three common combinations of characteristics that describe meta types of cloud business models. The most promising meta type is a specialized cloud provider with customer-oriented branch solutions, while small-scale newcomers with aggregation services experience difficulties to be competitive. To evaluate and verify the results and the success of each business model type, 12 expert interviews were conducted. The interview statements were aggregated and summarized to offer recommendations for action and a prediction for the success of cloud business models.},
author = {Labes, Stine and Hanner, Nicolai and Zarnekow, Ruediger},
doi = {10.1007/s12599-016-0455-z},
issn = {18670202},
journal = {Business and Information Systems Engineering},
keywords = {Business model,Cloud computing,Cloud provider,Cloud strategy,Expert interviews,Qualitative content analysis,Success factors,Value proposition},
month = {nov},
number = {4},
pages = {223--233},
publisher = {Springer Science and Business Media {\{}LLC{\}}},
title = {{Successful Business Model Types of Cloud Providers}},
url = {https://doi.org/10.1007{\%}2Fs12599-016-0455-z},
volume = {59},
year = {2017}
}
